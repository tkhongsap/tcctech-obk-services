// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TCCTOBK.OperationBackend.Infrastructure.Database;

#nullable disable

namespace TCCTOBK.OperationBackend.Infrastructure.Database.Migrations
{
    [DbContext(typeof(TCCTOBKContext))]
    [Migration("20240816051225_modifyTableAttendance")]
    partial class modifyTableAttendance
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.SOCUser", b =>
                {
                    b.Property<Guid>("SID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("FirstNameEn")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("IdentifyNumber")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<int>("IdentifyType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("LastNameEn")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("SID");

                    b.ToTable("SOCUser");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.Tenant", b =>
                {
                    b.Property<Guid>("TID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.HasKey("TID");

                    b.ToTable("Tenant");

                    b.HasData(
                        new
                        {
                            TID = new Guid("4199e4de-bdf8-48f8-a8a8-a5b31756a748"),
                            CreatedBy = "00000000-0000-0000-0000-000000000000",
                            CreatedByName = "System",
                            CreatedDate = new DateTime(2024, 8, 16, 12, 12, 22, 807, DateTimeKind.Local).AddTicks(1220),
                            IsActive = true,
                            Name = "OBK CMS",
                            UpdatedBy = "00000000-0000-0000-0000-000000000000",
                            UpdatedByName = "System",
                            UpdatedDate = new DateTime(2024, 8, 16, 12, 12, 22, 807, DateTimeKind.Local).AddTicks(7216),
                            description = "One bangkok CMS"
                        },
                        new
                        {
                            TID = new Guid("caa4ebec-15c8-4d6b-9985-6d6b66f94e63"),
                            CreatedBy = "00000000-0000-0000-0000-000000000000",
                            CreatedByName = "System",
                            CreatedDate = new DateTime(2024, 8, 16, 12, 12, 22, 807, DateTimeKind.Local).AddTicks(7895),
                            IsActive = true,
                            Name = "Operation app",
                            UpdatedBy = "00000000-0000-0000-0000-000000000000",
                            UpdatedByName = "System",
                            UpdatedDate = new DateTime(2024, 8, 16, 12, 12, 22, 807, DateTimeKind.Local).AddTicks(7900),
                            description = "Operation app"
                        });
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.TenantMember", b =>
                {
                    b.Property<Guid>("MID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TID")
                        .HasColumnType("uuid");

                    b.HasKey("MID", "TID");

                    b.HasIndex("TID");

                    b.ToTable("TenantMember");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.TimeCardEntries", b =>
                {
                    b.Property<Guid>("CAID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CheckIn")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("CheckOut")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("KCUsername")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TSID")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("CAID");

                    b.ToTable("TimeCardEntries");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.TimeSheet", b =>
                {
                    b.Property<Guid>("TSID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CheckCode")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Location")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("TSID");

                    b.ToTable("TimeSheet");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.mtActionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("mtActionType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e8eb7171-de01-4a85-a955-711b211eecc2"),
                            Action = "qr",
                            CreatedBy = "00000000-0000-0000-0000-000000000000",
                            CreatedByName = "system",
                            CreatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 813, DateTimeKind.Local).AddTicks(2586),
                            UpdatedBy = "00000000-0000-0000-0000-000000000000",
                            UpdatedByName = "system",
                            UpdatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 813, DateTimeKind.Local).AddTicks(2686)
                        },
                        new
                        {
                            Id = new Guid("e8eb7171-de01-4a85-a955-711b211eecc3"),
                            Action = "confirm",
                            CreatedBy = "00000000-0000-0000-0000-000000000000",
                            CreatedByName = "system",
                            CreatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 813, DateTimeKind.Local).AddTicks(2718),
                            UpdatedBy = "00000000-0000-0000-0000-000000000000",
                            UpdatedByName = "system",
                            UpdatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 813, DateTimeKind.Local).AddTicks(2719)
                        },
                        new
                        {
                            Id = new Guid("e8eb7171-de01-4a85-a955-711b211eecc4"),
                            Action = "photo",
                            CreatedBy = "00000000-0000-0000-0000-000000000000",
                            CreatedByName = "system",
                            CreatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 813, DateTimeKind.Local).AddTicks(2722),
                            UpdatedBy = "00000000-0000-0000-0000-000000000000",
                            UpdatedByName = "system",
                            UpdatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 813, DateTimeKind.Local).AddTicks(2724)
                        },
                        new
                        {
                            Id = new Guid("e8eb7171-de01-4a85-a955-711b211eecc5"),
                            Action = "complex",
                            CreatedBy = "00000000-0000-0000-0000-000000000000",
                            CreatedByName = "system",
                            CreatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 813, DateTimeKind.Local).AddTicks(2727),
                            UpdatedBy = "00000000-0000-0000-0000-000000000000",
                            UpdatedByName = "system",
                            UpdatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 813, DateTimeKind.Local).AddTicks(2728)
                        });
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.mtAppConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("mtAppConfig");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.mtHomeContent", b =>
                {
                    b.Property<Guid>("HCID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("RemoteConfigDataJson")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("RemoteConfigResponseDataJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.HasKey("HCID");

                    b.ToTable("HomeContent");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.mtMenu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Breadcrumb")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying");

                    b.Property<string>("Class")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying");

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Header")
                        .HasMaxLength(200)
                        .HasColumnType("character varying");

                    b.Property<string>("IconClass")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying");

                    b.Property<string>("IconName")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .HasMaxLength(200)
                        .HasColumnType("character varying");

                    b.Property<Guid?>("PTID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Separator")
                        .HasColumnType("boolean");

                    b.Property<string>("To")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying");

                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("Url")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying");

                    b.Property<bool>("Visible")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("mtMenu");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.mtPrivilege", b =>
                {
                    b.Property<Guid>("PID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.HasKey("PID");

                    b.ToTable("mtPrivilege");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.mtPrivilegeItem", b =>
                {
                    b.Property<Guid>("PTID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<Guid>("PID")
                        .HasColumnType("uuid");

                    b.HasKey("PTID");

                    b.HasIndex("PID");

                    b.ToTable("mtPrivilegeItem");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.mtShift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("AllowCheckInEnd")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("AllowCheckInStart")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("CheckoutTimeEnd")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("interval");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval");

                    b.Property<int>("isOverNight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("mtShift");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AllowCheckInEnd = new TimeSpan(0, 7, 15, 0, 0),
                            AllowCheckInStart = new TimeSpan(0, 6, 0, 0, 0),
                            CheckoutTimeEnd = new TimeSpan(0, 21, 0, 0, 0),
                            EndTime = new TimeSpan(0, 19, 0, 0, 0),
                            Name = "socDay",
                            StartTime = new TimeSpan(0, 7, 0, 0, 0),
                            isOverNight = 0
                        },
                        new
                        {
                            Id = 2,
                            AllowCheckInEnd = new TimeSpan(0, 19, 15, 0, 0),
                            AllowCheckInStart = new TimeSpan(0, 18, 0, 0, 0),
                            CheckoutTimeEnd = new TimeSpan(0, 9, 0, 0, 0),
                            EndTime = new TimeSpan(0, 7, 0, 0, 0),
                            Name = "socNight",
                            StartTime = new TimeSpan(0, 19, 0, 0, 0),
                            isOverNight = 1
                        });
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.mtShiftManPowerRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BaseLocation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Demand")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndDateTime")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying");

                    b.Property<string>("Shift")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("StartDateTime")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("mtShiftManPowerRequest");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BaseLocation = "CI",
                            Company = "G4S",
                            CreatedBy = "00000000-0000-0000-0000-000000000000",
                            CreatedByName = "system",
                            CreatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 816, DateTimeKind.Local).AddTicks(700),
                            Demand = 90,
                            Role = "Security Guard",
                            Shift = "socNight",
                            StartDateTime = new DateTime(2024, 7, 16, 12, 12, 22, 816, DateTimeKind.Local).AddTicks(193),
                            UpdatedBy = "00000000-0000-0000-0000-000000000000",
                            UpdatedByName = "system",
                            UpdatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 816, DateTimeKind.Local).AddTicks(705)
                        },
                        new
                        {
                            Id = 2,
                            BaseLocation = "CI",
                            Company = "G4S",
                            CreatedBy = "00000000-0000-0000-0000-000000000000",
                            CreatedByName = "system",
                            CreatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 816, DateTimeKind.Local).AddTicks(733),
                            Demand = 120,
                            Role = "Security Guard",
                            Shift = "socDay",
                            StartDateTime = new DateTime(2024, 7, 16, 12, 12, 22, 816, DateTimeKind.Local).AddTicks(731),
                            UpdatedBy = "00000000-0000-0000-0000-000000000000",
                            UpdatedByName = "system",
                            UpdatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 816, DateTimeKind.Local).AddTicks(735)
                        },
                        new
                        {
                            Id = 3,
                            BaseLocation = "ONE Power",
                            Company = "G4S",
                            CreatedBy = "00000000-0000-0000-0000-000000000000",
                            CreatedByName = "system",
                            CreatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 816, DateTimeKind.Local).AddTicks(739),
                            Demand = 20,
                            Role = "Security Guard",
                            Shift = "socNight",
                            StartDateTime = new DateTime(2024, 7, 16, 12, 12, 22, 816, DateTimeKind.Local).AddTicks(738),
                            UpdatedBy = "00000000-0000-0000-0000-000000000000",
                            UpdatedByName = "system",
                            UpdatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 816, DateTimeKind.Local).AddTicks(740)
                        },
                        new
                        {
                            Id = 4,
                            BaseLocation = "ONE Power",
                            Company = "G4S",
                            CreatedBy = "00000000-0000-0000-0000-000000000000",
                            CreatedByName = "system",
                            CreatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 816, DateTimeKind.Local).AddTicks(744),
                            Demand = 30,
                            Role = "Security Guard",
                            Shift = "socDay",
                            StartDateTime = new DateTime(2024, 7, 16, 12, 12, 22, 816, DateTimeKind.Local).AddTicks(743),
                            UpdatedBy = "00000000-0000-0000-0000-000000000000",
                            UpdatedByName = "system",
                            UpdatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 816, DateTimeKind.Local).AddTicks(745)
                        });
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.taMember", b =>
                {
                    b.Property<Guid>("MID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DataJson")
                        .HasColumnType("character varying");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<int>("FailAttempt")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("KeyCloakUserId")
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("LastLoginDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastLogoutDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("MID");

                    b.ToTable("taMember");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ActionType")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying");

                    b.Property<int>("IsRequired")
                        .HasColumnType("integer");

                    b.Property<string>("MetaData")
                        .HasColumnType("json");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ActionType");

                    b.ToTable("trAction");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2aa84ed4-a495-47c8-913f-fa5928c1b4b8"),
                            ActionType = new Guid("e8eb7171-de01-4a85-a955-711b211eecc2"),
                            CreatedBy = "00000000-0000-0000-0000-000000000000",
                            CreatedByName = "system",
                            CreatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 813, DateTimeKind.Local).AddTicks(4924),
                            Description = "L-10, Fire Exit Door 3 (Passenger Elevator)",
                            IsRequired = 0,
                            MetaData = "{\"QrId\":\"Test1\"}",
                            Name = "Scan QR Code",
                            UpdatedBy = "00000000-0000-0000-0000-000000000000",
                            UpdatedByName = "system",
                            UpdatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 813, DateTimeKind.Local).AddTicks(4929)
                        },
                        new
                        {
                            Id = new Guid("3ff4f468-53ef-48a3-8781-61a8a053fa99"),
                            ActionType = new Guid("e8eb7171-de01-4a85-a955-711b211eecc2"),
                            CreatedBy = "00000000-0000-0000-0000-000000000000",
                            CreatedByName = "system",
                            CreatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 813, DateTimeKind.Local).AddTicks(4958),
                            Description = "L-10, Fire Exit Door 2 (Passenger Elevator)",
                            IsRequired = 0,
                            MetaData = "{\"QrId\":\"Test2\"}",
                            Name = "Scan QR Code",
                            UpdatedBy = "00000000-0000-0000-0000-000000000000",
                            UpdatedByName = "system",
                            UpdatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 813, DateTimeKind.Local).AddTicks(4960)
                        },
                        new
                        {
                            Id = new Guid("564d0272-92c8-4108-82b2-0f98882058d4"),
                            ActionType = new Guid("e8eb7171-de01-4a85-a955-711b211eecc3"),
                            CreatedBy = "00000000-0000-0000-0000-000000000000",
                            CreatedByName = "system",
                            CreatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 813, DateTimeKind.Local).AddTicks(4964),
                            Description = "Inspect fire exits and make sure all the doors are closed",
                            IsRequired = 0,
                            Name = "Inspect Fire doors",
                            UpdatedBy = "00000000-0000-0000-0000-000000000000",
                            UpdatedByName = "system",
                            UpdatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 813, DateTimeKind.Local).AddTicks(4996)
                        },
                        new
                        {
                            Id = new Guid("6d174fd6-b597-4b16-a117-08b7a84be839"),
                            ActionType = new Guid("e8eb7171-de01-4a85-a955-711b211eecc3"),
                            CreatedBy = "00000000-0000-0000-0000-000000000000",
                            CreatedByName = "system",
                            CreatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 813, DateTimeKind.Local).AddTicks(5000),
                            Description = "Inspect fire exits and make sure all the doors are closed",
                            IsRequired = 0,
                            Name = "Inspect Fire doors",
                            UpdatedBy = "00000000-0000-0000-0000-000000000000",
                            UpdatedByName = "system",
                            UpdatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 813, DateTimeKind.Local).AddTicks(5002)
                        },
                        new
                        {
                            Id = new Guid("c1cb273c-570a-42f5-b563-66bac08911cc"),
                            ActionType = new Guid("e8eb7171-de01-4a85-a955-711b211eecc3"),
                            CreatedBy = "00000000-0000-0000-0000-000000000000",
                            CreatedByName = "system",
                            CreatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 813, DateTimeKind.Local).AddTicks(5005),
                            Description = "Check Distress Alert",
                            IsRequired = 0,
                            Name = "Distress Alert",
                            UpdatedBy = "00000000-0000-0000-0000-000000000000",
                            UpdatedByName = "system",
                            UpdatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 813, DateTimeKind.Local).AddTicks(5007)
                        },
                        new
                        {
                            Id = new Guid("e8eb7171-de01-4a85-a955-711b211eecc1"),
                            ActionType = new Guid("e8eb7171-de01-4a85-a955-711b211eecc2"),
                            CreatedBy = "00000000-0000-0000-0000-000000000000",
                            CreatedByName = "system",
                            CreatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 813, DateTimeKind.Local).AddTicks(5018),
                            Description = "L-10, Fire Exit Door 1 (Passenger Elevator)",
                            IsRequired = 0,
                            MetaData = "{\"QrId\":\"Test3\"}",
                            Name = "Scan QR Code",
                            UpdatedBy = "00000000-0000-0000-0000-000000000000",
                            UpdatedByName = "system",
                            UpdatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 813, DateTimeKind.Local).AddTicks(5019)
                        },
                        new
                        {
                            Id = new Guid("c1cb273c-570a-42f5-b563-66bac08911cd"),
                            ActionType = new Guid("e8eb7171-de01-4a85-a955-711b211eecc5"),
                            CreatedBy = "00000000-0000-0000-0000-000000000000",
                            CreatedByName = "system",
                            CreatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 813, DateTimeKind.Local).AddTicks(5022),
                            Description = "Check Distress Alert",
                            IsRequired = 0,
                            Name = "Distress Alert",
                            UpdatedBy = "00000000-0000-0000-0000-000000000000",
                            UpdatedByName = "system",
                            UpdatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 813, DateTimeKind.Local).AddTicks(5024)
                        });
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trActivityProcedure", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<string>("SubtaskActions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Code");

                    b.HasIndex("LocationId");

                    b.ToTable("trActivityProcedure");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trAttendance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BaseLocation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("CheckInDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CheckOutDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying");

                    b.Property<string>("DeviceKey")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying");

                    b.Property<string>("IdentifyDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IndentifyType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying");

                    b.Property<int>("LateTime")
                        .HasColumnType("integer");

                    b.Property<string>("MetaData")
                        .HasColumnType("json");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying");

                    b.Property<string>("Shift")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("trAttendance");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trInviteMember", b =>
                {
                    b.Property<Guid>("IMID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("InviteCode")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MID")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("IMID");

                    b.HasIndex("MID");

                    b.ToTable("trInviteMember");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trMemberUAT", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("MetaData")
                        .HasColumnType("json");

                    b.HasKey("Id");

                    b.ToTable("trMemberUAT");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trResetPassword", b =>
                {
                    b.Property<Guid>("RPID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MID")
                        .HasColumnType("uuid");

                    b.Property<string>("ResetPasswordCode")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("RPID");

                    b.HasIndex("MID");

                    b.ToTable("trResetPassword");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trRole", b =>
                {
                    b.Property<Guid>("RID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<Guid>("TID")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("RID");

                    b.HasIndex("TID");

                    b.ToTable("trRole");

                    b.HasData(
                        new
                        {
                            RID = new Guid("fcddbf6b-88b8-4fae-ade7-63150ce1f1ec"),
                            CreatedBy = "00000000-0000-0000-0000-000000000000",
                            CreatedByName = "System",
                            CreatedDate = new DateTime(2024, 8, 16, 12, 12, 22, 818, DateTimeKind.Local).AddTicks(302),
                            Description = "Technician",
                            IsActive = true,
                            IsDelete = false,
                            Name = "Technician",
                            TID = new Guid("caa4ebec-15c8-4d6b-9985-6d6b66f94e63"),
                            UpdatedBy = "00000000-0000-0000-0000-000000000000",
                            UpdatedByName = "System",
                            UpdatedDate = new DateTime(2024, 8, 16, 12, 12, 22, 818, DateTimeKind.Local).AddTicks(322)
                        },
                        new
                        {
                            RID = new Guid("18a79217-9fa7-460d-bccc-e74285b07531"),
                            CreatedBy = "00000000-0000-0000-0000-000000000000",
                            CreatedByName = "System",
                            CreatedDate = new DateTime(2024, 8, 16, 12, 12, 22, 818, DateTimeKind.Local).AddTicks(348),
                            Description = "Cleaning",
                            IsActive = true,
                            IsDelete = false,
                            Name = "Cleaning",
                            TID = new Guid("caa4ebec-15c8-4d6b-9985-6d6b66f94e63"),
                            UpdatedBy = "00000000-0000-0000-0000-000000000000",
                            UpdatedByName = "System",
                            UpdatedDate = new DateTime(2024, 8, 16, 12, 12, 22, 818, DateTimeKind.Local).AddTicks(350)
                        },
                        new
                        {
                            RID = new Guid("f2cf879b-34f3-41da-9445-ee3bc590f224"),
                            CreatedBy = "00000000-0000-0000-0000-000000000000",
                            CreatedByName = "System",
                            CreatedDate = new DateTime(2024, 8, 16, 12, 12, 22, 818, DateTimeKind.Local).AddTicks(358),
                            Description = "Supervisor",
                            IsActive = true,
                            IsDelete = false,
                            Name = "Supervisor",
                            TID = new Guid("caa4ebec-15c8-4d6b-9985-6d6b66f94e63"),
                            UpdatedBy = "00000000-0000-0000-0000-000000000000",
                            UpdatedByName = "System",
                            UpdatedDate = new DateTime(2024, 8, 16, 12, 12, 22, 818, DateTimeKind.Local).AddTicks(359)
                        });
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trRoleMember", b =>
                {
                    b.Property<Guid>("RID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MID")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("RID", "MID");

                    b.HasIndex("MID");

                    b.ToTable("trRoleMember");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trRolePrivilegeItem", b =>
                {
                    b.Property<Guid>("RID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PTID")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("RID", "PTID");

                    b.HasIndex("PTID");

                    b.ToTable("trRolePrivilegeItem");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trSchedulePlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<TimeSpan>("EndTime")
                        .HasMaxLength(100)
                        .HasColumnType("TIME");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<string>("Route")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<TimeSpan>("StartTime")
                        .HasMaxLength(100)
                        .HasColumnType("TIME");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("Route");

                    b.ToTable("trSchedulePlan");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trSubtask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("trSubtask");

                    b.HasData(
                        new
                        {
                            Id = new Guid("77e2f48c-8178-4df5-9b84-48bfd253a496"),
                            CreatedBy = "00000000-0000-0000-0000-000000000000",
                            CreatedByName = "system",
                            CreatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 813, DateTimeKind.Local).AddTicks(6891),
                            Name = "Distress Alert",
                            StatusId = 0,
                            UpdatedBy = "00000000-0000-0000-0000-000000000000",
                            UpdatedByName = "system",
                            UpdatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 813, DateTimeKind.Local).AddTicks(6896)
                        },
                        new
                        {
                            Id = new Guid("eaab304c-89e1-484c-aefe-0e4e3e27e911"),
                            CreatedBy = "00000000-0000-0000-0000-000000000000",
                            CreatedByName = "system",
                            CreatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 813, DateTimeKind.Local).AddTicks(6930),
                            Name = "L-10, Fire Exit Door 3 (Passenger Elevator)",
                            StatusId = 0,
                            UpdatedBy = "00000000-0000-0000-0000-000000000000",
                            UpdatedByName = "system",
                            UpdatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 813, DateTimeKind.Local).AddTicks(6931)
                        },
                        new
                        {
                            Id = new Guid("1a157bf0-4748-4589-91cc-1450e0c06596"),
                            CreatedBy = "00000000-0000-0000-0000-000000000000",
                            CreatedByName = "system",
                            CreatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 813, DateTimeKind.Local).AddTicks(6935),
                            Name = "L-10, Fire Exit Door 2 (Passenger Elevator)",
                            StatusId = 0,
                            UpdatedBy = "00000000-0000-0000-0000-000000000000",
                            UpdatedByName = "system",
                            UpdatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 813, DateTimeKind.Local).AddTicks(6936)
                        },
                        new
                        {
                            Id = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa6"),
                            CreatedBy = "00000000-0000-0000-0000-000000000000",
                            CreatedByName = "system",
                            CreatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 813, DateTimeKind.Local).AddTicks(6965),
                            Name = "L-10, Fire Exit Door 4 (Passenger Elevator)",
                            StatusId = 0,
                            UpdatedBy = "00000000-0000-0000-0000-000000000000",
                            UpdatedByName = "system",
                            UpdatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 813, DateTimeKind.Local).AddTicks(6967)
                        },
                        new
                        {
                            Id = new Guid("35d4cfa7-04ea-473a-9b50-c9751843ead5"),
                            CreatedBy = "00000000-0000-0000-0000-000000000000",
                            CreatedByName = "system",
                            CreatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 813, DateTimeKind.Local).AddTicks(6970),
                            Name = "L-10, Fire Exit Door 1 (Passenger Elevator)",
                            StatusId = 0,
                            UpdatedBy = "00000000-0000-0000-0000-000000000000",
                            UpdatedByName = "system",
                            UpdatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 813, DateTimeKind.Local).AddTicks(6971)
                        });
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trSubtaskAction", b =>
                {
                    b.Property<Guid>("Subtask")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Action")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("MetaData")
                        .HasColumnType("json");

                    b.Property<string>("Reading")
                        .HasColumnType("text");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Subtask", "Action");

                    b.HasIndex("Action");

                    b.ToTable("trSubtaskAction");

                    b.HasData(
                        new
                        {
                            Subtask = new Guid("1a157bf0-4748-4589-91cc-1450e0c06596"),
                            Action = new Guid("3ff4f468-53ef-48a3-8781-61a8a053fa99"),
                            CreatedBy = "00000000-0000-0000-0000-000000000000",
                            CreatedByName = "system",
                            CreatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 814, DateTimeKind.Local).AddTicks(1794),
                            StatusId = 0,
                            UpdatedBy = "00000000-0000-0000-0000-000000000000",
                            UpdatedByName = "system",
                            UpdatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 814, DateTimeKind.Local).AddTicks(1799)
                        },
                        new
                        {
                            Subtask = new Guid("1a157bf0-4748-4589-91cc-1450e0c06596"),
                            Action = new Guid("564d0272-92c8-4108-82b2-0f98882058d4"),
                            CreatedBy = "00000000-0000-0000-0000-000000000000",
                            CreatedByName = "system",
                            CreatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 814, DateTimeKind.Local).AddTicks(1821),
                            StatusId = 0,
                            UpdatedBy = "00000000-0000-0000-0000-000000000000",
                            UpdatedByName = "system",
                            UpdatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 814, DateTimeKind.Local).AddTicks(1823)
                        },
                        new
                        {
                            Subtask = new Guid("1a157bf0-4748-4589-91cc-1450e0c06596"),
                            Action = new Guid("6d174fd6-b597-4b16-a117-08b7a84be839"),
                            CreatedBy = "00000000-0000-0000-0000-000000000000",
                            CreatedByName = "system",
                            CreatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 814, DateTimeKind.Local).AddTicks(1826),
                            StatusId = 0,
                            UpdatedBy = "00000000-0000-0000-0000-000000000000",
                            UpdatedByName = "system",
                            UpdatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 814, DateTimeKind.Local).AddTicks(1828)
                        },
                        new
                        {
                            Subtask = new Guid("35d4cfa7-04ea-473a-9b50-c9751843ead5"),
                            Action = new Guid("564d0272-92c8-4108-82b2-0f98882058d4"),
                            CreatedBy = "00000000-0000-0000-0000-000000000000",
                            CreatedByName = "system",
                            CreatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 814, DateTimeKind.Local).AddTicks(1831),
                            StatusId = 0,
                            UpdatedBy = "00000000-0000-0000-0000-000000000000",
                            UpdatedByName = "system",
                            UpdatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 814, DateTimeKind.Local).AddTicks(1833)
                        },
                        new
                        {
                            Subtask = new Guid("35d4cfa7-04ea-473a-9b50-c9751843ead5"),
                            Action = new Guid("6d174fd6-b597-4b16-a117-08b7a84be839"),
                            CreatedBy = "00000000-0000-0000-0000-000000000000",
                            CreatedByName = "system",
                            CreatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 814, DateTimeKind.Local).AddTicks(1836),
                            StatusId = 0,
                            UpdatedBy = "00000000-0000-0000-0000-000000000000",
                            UpdatedByName = "system",
                            UpdatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 814, DateTimeKind.Local).AddTicks(1837)
                        },
                        new
                        {
                            Subtask = new Guid("35d4cfa7-04ea-473a-9b50-c9751843ead5"),
                            Action = new Guid("e8eb7171-de01-4a85-a955-711b211eecc1"),
                            CreatedBy = "00000000-0000-0000-0000-000000000000",
                            CreatedByName = "system",
                            CreatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 814, DateTimeKind.Local).AddTicks(1975),
                            StatusId = 0,
                            UpdatedBy = "00000000-0000-0000-0000-000000000000",
                            UpdatedByName = "system",
                            UpdatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 814, DateTimeKind.Local).AddTicks(1977)
                        },
                        new
                        {
                            Subtask = new Guid("eaab304c-89e1-484c-aefe-0e4e3e27e911"),
                            Action = new Guid("2aa84ed4-a495-47c8-913f-fa5928c1b4b8"),
                            CreatedBy = "00000000-0000-0000-0000-000000000000",
                            CreatedByName = "system",
                            CreatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 814, DateTimeKind.Local).AddTicks(2002),
                            StatusId = 0,
                            UpdatedBy = "00000000-0000-0000-0000-000000000000",
                            UpdatedByName = "system",
                            UpdatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 814, DateTimeKind.Local).AddTicks(2003)
                        },
                        new
                        {
                            Subtask = new Guid("eaab304c-89e1-484c-aefe-0e4e3e27e911"),
                            Action = new Guid("564d0272-92c8-4108-82b2-0f98882058d4"),
                            CreatedBy = "00000000-0000-0000-0000-000000000000",
                            CreatedByName = "system",
                            CreatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 814, DateTimeKind.Local).AddTicks(2007),
                            StatusId = 0,
                            UpdatedBy = "00000000-0000-0000-0000-000000000000",
                            UpdatedByName = "system",
                            UpdatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 814, DateTimeKind.Local).AddTicks(2008)
                        },
                        new
                        {
                            Subtask = new Guid("eaab304c-89e1-484c-aefe-0e4e3e27e911"),
                            Action = new Guid("6d174fd6-b597-4b16-a117-08b7a84be839"),
                            CreatedBy = "00000000-0000-0000-0000-000000000000",
                            CreatedByName = "system",
                            CreatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 814, DateTimeKind.Local).AddTicks(2012),
                            StatusId = 0,
                            UpdatedBy = "00000000-0000-0000-0000-000000000000",
                            UpdatedByName = "system",
                            UpdatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 814, DateTimeKind.Local).AddTicks(2013)
                        },
                        new
                        {
                            Subtask = new Guid("77e2f48c-8178-4df5-9b84-48bfd253a496"),
                            Action = new Guid("c1cb273c-570a-42f5-b563-66bac08911cc"),
                            CreatedBy = "00000000-0000-0000-0000-000000000000",
                            CreatedByName = "system",
                            CreatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 814, DateTimeKind.Local).AddTicks(2019),
                            StatusId = 0,
                            UpdatedBy = "00000000-0000-0000-0000-000000000000",
                            UpdatedByName = "system",
                            UpdatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 814, DateTimeKind.Local).AddTicks(2020)
                        },
                        new
                        {
                            Subtask = new Guid("77e2f48c-8178-4df5-9b84-48bfd253a496"),
                            Action = new Guid("c1cb273c-570a-42f5-b563-66bac08911cd"),
                            CreatedBy = "00000000-0000-0000-0000-000000000000",
                            CreatedByName = "system",
                            CreatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 814, DateTimeKind.Local).AddTicks(2024),
                            StatusId = 0,
                            UpdatedBy = "00000000-0000-0000-0000-000000000000",
                            UpdatedByName = "system",
                            UpdatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 814, DateTimeKind.Local).AddTicks(2025)
                        });
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AcknowledgeDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("CompleteDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("IsLate")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("StartDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("trTask");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2c055101-2271-44e0-95fe-bcf2c59a459b"),
                            CreatedBy = "00000000-0000-0000-0000-000000000000",
                            CreatedByName = "system",
                            CreatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 813, DateTimeKind.Local).AddTicks(9270),
                            LocationId = new Guid("2c055101-2271-44e0-95fe-bcf2c59a459a"),
                            MemberId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Illegal Parking",
                            StatusId = 0,
                            UpdatedBy = "00000000-0000-0000-0000-000000000000",
                            UpdatedByName = "system",
                            UpdatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 813, DateTimeKind.Local).AddTicks(9275)
                        },
                        new
                        {
                            Id = new Guid("4422cc3c-0ea5-4d73-a31e-a42485a81003"),
                            CreatedBy = "00000000-0000-0000-0000-000000000000",
                            CreatedByName = "system",
                            CreatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 813, DateTimeKind.Local).AddTicks(9303),
                            LocationId = new Guid("2c055101-2271-44e0-95fe-bcf2c59a459a"),
                            MemberId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Name = "Distress Alert",
                            StatusId = 0,
                            UpdatedBy = "00000000-0000-0000-0000-000000000000",
                            UpdatedByName = "system",
                            UpdatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 813, DateTimeKind.Local).AddTicks(9304)
                        });
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trTaskSubtask", b =>
                {
                    b.Property<Guid>("Task")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Subtask")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Task", "Subtask");

                    b.HasIndex("Subtask");

                    b.ToTable("trTaskSubtask");

                    b.HasData(
                        new
                        {
                            Task = new Guid("2c055101-2271-44e0-95fe-bcf2c59a459b"),
                            Subtask = new Guid("1a157bf0-4748-4589-91cc-1450e0c06596"),
                            CreatedBy = "00000000-0000-0000-0000-000000000000",
                            CreatedByName = "system",
                            CreatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 814, DateTimeKind.Local).AddTicks(361),
                            UpdatedBy = "00000000-0000-0000-0000-000000000000",
                            UpdatedByName = "system",
                            UpdatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 814, DateTimeKind.Local).AddTicks(366)
                        },
                        new
                        {
                            Task = new Guid("2c055101-2271-44e0-95fe-bcf2c59a459b"),
                            Subtask = new Guid("35d4cfa7-04ea-473a-9b50-c9751843ead5"),
                            CreatedBy = "00000000-0000-0000-0000-000000000000",
                            CreatedByName = "system",
                            CreatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 814, DateTimeKind.Local).AddTicks(387),
                            UpdatedBy = "00000000-0000-0000-0000-000000000000",
                            UpdatedByName = "system",
                            UpdatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 814, DateTimeKind.Local).AddTicks(389)
                        },
                        new
                        {
                            Task = new Guid("2c055101-2271-44e0-95fe-bcf2c59a459b"),
                            Subtask = new Guid("eaab304c-89e1-484c-aefe-0e4e3e27e911"),
                            CreatedBy = "00000000-0000-0000-0000-000000000000",
                            CreatedByName = "system",
                            CreatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 814, DateTimeKind.Local).AddTicks(392),
                            UpdatedBy = "00000000-0000-0000-0000-000000000000",
                            UpdatedByName = "system",
                            UpdatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 814, DateTimeKind.Local).AddTicks(394)
                        },
                        new
                        {
                            Task = new Guid("4422cc3c-0ea5-4d73-a31e-a42485a81003"),
                            Subtask = new Guid("77e2f48c-8178-4df5-9b84-48bfd253a496"),
                            CreatedBy = "00000000-0000-0000-0000-000000000000",
                            CreatedByName = "system",
                            CreatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 814, DateTimeKind.Local).AddTicks(424),
                            UpdatedBy = "00000000-0000-0000-0000-000000000000",
                            UpdatedByName = "system",
                            UpdatedDate = new DateTime(2024, 7, 16, 12, 12, 22, 814, DateTimeKind.Local).AddTicks(426)
                        });
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Location", b =>
                {
                    b.Property<Guid>("LID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BuildingName")
                        .HasColumnType("text");

                    b.Property<string>("BuildingZoneName")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FloorName")
                        .HasColumnType("text");

                    b.Property<string>("SiteName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ZoneName")
                        .HasColumnType("text");

                    b.HasKey("LID");

                    b.ToTable("Location");

                    b.HasData(
                        new
                        {
                            LID = new Guid("2c055101-2271-44e0-95fe-bcf2c59a459a"),
                            BuildingName = "O2",
                            BuildingZoneName = "O2T1",
                            CreatedBy = "00000000-0000-0000-0000-000000000000",
                            CreatedByName = "System",
                            CreatedDate = new DateTime(2024, 8, 16, 12, 12, 22, 814, DateTimeKind.Local).AddTicks(4723),
                            FloorName = "1B",
                            SiteName = "OBK",
                            Type = "floor",
                            UpdatedBy = "00000000-0000-0000-0000-000000000000",
                            UpdatedByName = "System",
                            UpdatedDate = new DateTime(2024, 8, 16, 12, 12, 22, 814, DateTimeKind.Local).AddTicks(4727),
                            ZoneName = "R1"
                        });
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.SOCUserTanent", b =>
                {
                    b.Property<Guid>("SID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SOCUserSID")
                        .HasColumnType("uuid");

                    b.HasKey("SID", "TID");

                    b.HasIndex("SOCUserSID");

                    b.HasIndex("TID");

                    b.ToTable("SOCUserTanent");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.SpotCoordinate", b =>
                {
                    b.Property<Guid>("CID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LID")
                        .HasColumnType("uuid");

                    b.Property<float>("Lat")
                        .HasColumnType("real");

                    b.Property<float>("Long")
                        .HasColumnType("real");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("CID");

                    b.HasIndex("LID");

                    b.ToTable("SpotCoordinate");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Unit", b =>
                {
                    b.Property<Guid>("UID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float?>("Area")
                        .HasColumnType("real");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("IndoorSpillOutSeating")
                        .HasColumnType("integer");

                    b.Property<float?>("InlineAreaIndoorZone")
                        .HasColumnType("real");

                    b.Property<float?>("InlineAreaOutdoorZone")
                        .HasColumnType("real");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LID")
                        .HasColumnType("uuid");

                    b.Property<float?>("Lat")
                        .HasColumnType("real");

                    b.Property<float?>("Long")
                        .HasColumnType("real");

                    b.Property<string>("UnitNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UnitType")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("UID");

                    b.HasIndex("LID");

                    b.ToTable("Unit");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.WorkTransaction", b =>
                {
                    b.Property<Guid>("TID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CheckIn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CheckOut")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("HoneywellResponeDataJson")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SID")
                        .HasColumnType("uuid");

                    b.Property<int>("Transactiontype")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("TID");

                    b.ToTable("WorkTransaction");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.trRoleSOCUser", b =>
                {
                    b.Property<Guid>("RID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SID")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("RID", "SID");

                    b.HasIndex("SID");

                    b.ToTable("trRoleSOCUser");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.TenantMember", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.taMember", "taMember")
                        .WithMany("tenantMembers")
                        .HasForeignKey("MID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.Tenant", "Tenant")
                        .WithMany("tenantMembers")
                        .HasForeignKey("TID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");

                    b.Navigation("taMember");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.mtMenu", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.mtMenu", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.mtPrivilegeItem", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.mtPrivilege", "mtPrivilege")
                        .WithMany("mtPrivilegeItems")
                        .HasForeignKey("PID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("mtPrivilege");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trAction", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.mtActionType", "mtActionType")
                        .WithMany()
                        .HasForeignKey("ActionType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("mtActionType");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trActivityProcedure", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Location", "location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("location");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trInviteMember", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.taMember", "taMember")
                        .WithMany()
                        .HasForeignKey("MID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("taMember");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trResetPassword", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.taMember", "taMember")
                        .WithMany()
                        .HasForeignKey("MID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("taMember");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trRole", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trRoleMember", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.taMember", "taMember")
                        .WithMany("trRoleMembers")
                        .HasForeignKey("MID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.trRole", "trRole")
                        .WithMany("trRoleMembers")
                        .HasForeignKey("RID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("taMember");

                    b.Navigation("trRole");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trRolePrivilegeItem", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.mtPrivilegeItem", "mtPrivilegeItem")
                        .WithMany()
                        .HasForeignKey("PTID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.trRole", "trRole")
                        .WithMany("trRolePrivilagesItem")
                        .HasForeignKey("RID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("mtPrivilegeItem");

                    b.Navigation("trRole");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trSchedulePlan", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.trActivityProcedure", "trActivityProcedure")
                        .WithMany()
                        .HasForeignKey("Route")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("trActivityProcedure");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trSubtaskAction", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.trAction", "trAction")
                        .WithMany()
                        .HasForeignKey("Action")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.trSubtask", "trSubtask")
                        .WithMany("trSubtaskAction")
                        .HasForeignKey("Subtask")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("trAction");

                    b.Navigation("trSubtask");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trTask", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Location", "location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("location");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trTaskSubtask", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.trSubtask", "trSubtask")
                        .WithMany()
                        .HasForeignKey("Subtask")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.trTask", "trTask")
                        .WithMany("trTaskSubtask")
                        .HasForeignKey("Task")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("trSubtask");

                    b.Navigation("trTask");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.SOCUserTanent", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.SOCUser", null)
                        .WithMany("SOCUserTanent")
                        .HasForeignKey("SOCUserSID");

                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.SpotCoordinate", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Location", "Location")
                        .WithMany("SpotCoordinate")
                        .HasForeignKey("LID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Unit", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Location", "Location")
                        .WithMany("Unit")
                        .HasForeignKey("LID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.trRoleSOCUser", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.trRole", "trRole")
                        .WithMany()
                        .HasForeignKey("RID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.SOCUser", "SOCUser")
                        .WithMany("trRoleSOCUser")
                        .HasForeignKey("SID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SOCUser");

                    b.Navigation("trRole");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.SOCUser", b =>
                {
                    b.Navigation("SOCUserTanent");

                    b.Navigation("trRoleSOCUser");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.Tenant", b =>
                {
                    b.Navigation("tenantMembers");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.mtPrivilege", b =>
                {
                    b.Navigation("mtPrivilegeItems");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.taMember", b =>
                {
                    b.Navigation("tenantMembers");

                    b.Navigation("trRoleMembers");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trRole", b =>
                {
                    b.Navigation("trRoleMembers");

                    b.Navigation("trRolePrivilagesItem");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trSubtask", b =>
                {
                    b.Navigation("trSubtaskAction");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trTask", b =>
                {
                    b.Navigation("trTaskSubtask");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Location", b =>
                {
                    b.Navigation("SpotCoordinate");

                    b.Navigation("Unit");
                });
#pragma warning restore 612, 618
        }
    }
}
