// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TCCTOBK.OperationBackend.Infrastructure.Database;

#nullable disable

namespace TCCTOBK.OperationBackend.Infrastructure.Database.Migrations
{
    [DbContext(typeof(TCCTOBKContext))]
    [Migration("20240625100845_AddDatabaseSupportGuardTour")]
    partial class AddDatabaseSupportGuardTour
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.Tenant", b =>
                {
                    b.Property<Guid>("TID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.HasKey("TID");

                    b.ToTable("Tenant");

                    b.HasData(
                        new
                        {
                            TID = new Guid("4199e4de-bdf8-48f8-a8a8-a5b31756a748"),
                            CreatedBy = "00000000-0000-0000-0000-000000000000",
                            CreatedByName = "System",
                            CreatedDate = new DateTime(2024, 6, 25, 17, 8, 44, 646, DateTimeKind.Local).AddTicks(6858),
                            IsActive = true,
                            Name = "OBK CMS",
                            UpdatedBy = "00000000-0000-0000-0000-000000000000",
                            UpdatedByName = "System",
                            UpdatedDate = new DateTime(2024, 6, 25, 17, 8, 44, 647, DateTimeKind.Local).AddTicks(742),
                            description = "One bangkok CMS"
                        },
                        new
                        {
                            TID = new Guid("caa4ebec-15c8-4d6b-9985-6d6b66f94e63"),
                            CreatedBy = "00000000-0000-0000-0000-000000000000",
                            CreatedByName = "System",
                            CreatedDate = new DateTime(2024, 6, 25, 17, 8, 44, 647, DateTimeKind.Local).AddTicks(1181),
                            IsActive = true,
                            Name = "Operation app",
                            UpdatedBy = "00000000-0000-0000-0000-000000000000",
                            UpdatedByName = "System",
                            UpdatedDate = new DateTime(2024, 6, 25, 17, 8, 44, 647, DateTimeKind.Local).AddTicks(1184),
                            description = "Operation app"
                        });
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.TenantMember", b =>
                {
                    b.Property<Guid>("MID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TID")
                        .HasColumnType("uuid");

                    b.HasKey("MID", "TID");

                    b.HasIndex("TID");

                    b.ToTable("TenantMember");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.TimeCardEntries", b =>
                {
                    b.Property<Guid>("CAID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CheckIn")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("CheckOut")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("KCUsername")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TSID")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("CAID");

                    b.ToTable("TimeCardEntries");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.TimeSheet", b =>
                {
                    b.Property<Guid>("TSID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CheckCode")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Location")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("TSID");

                    b.ToTable("TimeSheet");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.mtActionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("mtActionType");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.mtAppConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("mtAppConfig");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.mtHomeContent", b =>
                {
                    b.Property<Guid>("HCID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("RemoteConfigDataJson")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("RemoteConfigResponseDataJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.HasKey("HCID");

                    b.ToTable("HomeContent");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.mtMenu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Breadcrumb")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying");

                    b.Property<string>("Class")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying");

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Header")
                        .HasMaxLength(200)
                        .HasColumnType("character varying");

                    b.Property<string>("IconClass")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying");

                    b.Property<string>("IconName")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .HasMaxLength(200)
                        .HasColumnType("character varying");

                    b.Property<Guid?>("PTID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Separator")
                        .HasColumnType("boolean");

                    b.Property<string>("To")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying");

                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("Url")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying");

                    b.Property<bool>("Visible")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("mtMenu");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.mtPrivilege", b =>
                {
                    b.Property<Guid>("PID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.HasKey("PID");

                    b.ToTable("mtPrivilege");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.mtPrivilegeItem", b =>
                {
                    b.Property<Guid>("PTID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<Guid>("PID")
                        .HasColumnType("uuid");

                    b.HasKey("PTID");

                    b.HasIndex("PID");

                    b.ToTable("mtPrivilegeItem");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.taMember", b =>
                {
                    b.Property<Guid>("MID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DataJson")
                        .HasColumnType("character varying");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("KeyCloakUserId")
                        .HasColumnType("character varying");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("MID");

                    b.ToTable("taMember");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ActionType")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying");

                    b.Property<string>("MetaData")
                        .HasColumnType("json");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("trSubtaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("trTaskId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ActionType");

                    b.HasIndex("trSubtaskId");

                    b.HasIndex("trTaskId");

                    b.ToTable("trAction");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trInviteMember", b =>
                {
                    b.Property<Guid>("IMID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("InviteCode")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MID")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("IMID");

                    b.HasIndex("MID");

                    b.ToTable("trInviteMember");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trResetPassword", b =>
                {
                    b.Property<Guid>("RPID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MID")
                        .HasColumnType("uuid");

                    b.Property<string>("ResetPasswordCode")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("RPID");

                    b.HasIndex("MID");

                    b.ToTable("trResetPassword");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trRole", b =>
                {
                    b.Property<Guid>("RID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("RID");

                    b.ToTable("trRole");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trRoleMember", b =>
                {
                    b.Property<Guid>("RID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MID")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("RID", "MID");

                    b.HasIndex("MID");

                    b.ToTable("trRoleMember");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trRolePrivilegeItem", b =>
                {
                    b.Property<Guid>("RID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PTID")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("RID", "PTID");

                    b.HasIndex("PTID");

                    b.ToTable("trRolePrivilegeItem");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trSubtask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("trSubtask");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trSubtaskAction", b =>
                {
                    b.Property<Guid>("Subtask")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Action")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Subtask", "Action");

                    b.HasIndex("Action");

                    b.ToTable("trSubtaskAction");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("StartDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("trTask");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trTaskSubtask", b =>
                {
                    b.Property<Guid>("Task")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Subtask")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Task", "Subtask");

                    b.HasIndex("Subtask");

                    b.ToTable("trTaskSubtask");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.TenantMember", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.taMember", "taMember")
                        .WithMany("tenantMembers")
                        .HasForeignKey("MID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.Tenant", "Tenant")
                        .WithMany("tenantMembers")
                        .HasForeignKey("TID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");

                    b.Navigation("taMember");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.mtMenu", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.mtMenu", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.mtPrivilegeItem", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.mtPrivilege", "mtPrivilege")
                        .WithMany("mtPrivilegeItems")
                        .HasForeignKey("PID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("mtPrivilege");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trAction", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.mtActionType", "mtActionType")
                        .WithMany()
                        .HasForeignKey("ActionType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.trSubtask", null)
                        .WithMany("trAction")
                        .HasForeignKey("trSubtaskId");

                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.trTask", null)
                        .WithMany("trAction")
                        .HasForeignKey("trTaskId");

                    b.Navigation("mtActionType");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trInviteMember", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.taMember", "taMember")
                        .WithMany()
                        .HasForeignKey("MID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("taMember");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trResetPassword", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.taMember", "taMember")
                        .WithMany()
                        .HasForeignKey("MID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("taMember");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trRoleMember", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.taMember", "taMember")
                        .WithMany("trRoleMembers")
                        .HasForeignKey("MID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.trRole", "trRole")
                        .WithMany("trRoleMembers")
                        .HasForeignKey("RID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("taMember");

                    b.Navigation("trRole");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trRolePrivilegeItem", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.mtPrivilegeItem", "mtPrivilegeItem")
                        .WithMany()
                        .HasForeignKey("PTID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.trRole", "trRole")
                        .WithMany("trRolePrivilagesItem")
                        .HasForeignKey("RID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("mtPrivilegeItem");

                    b.Navigation("trRole");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trSubtaskAction", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.trAction", "trAction")
                        .WithMany()
                        .HasForeignKey("Action")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.trSubtask", "trSubtask")
                        .WithMany()
                        .HasForeignKey("Subtask")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("trAction");

                    b.Navigation("trSubtask");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trTaskSubtask", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.trSubtask", "trSubtask")
                        .WithMany()
                        .HasForeignKey("Subtask")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.trTask", "trTask")
                        .WithMany()
                        .HasForeignKey("Task")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("trSubtask");

                    b.Navigation("trTask");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.Tenant", b =>
                {
                    b.Navigation("tenantMembers");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.mtPrivilege", b =>
                {
                    b.Navigation("mtPrivilegeItems");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.taMember", b =>
                {
                    b.Navigation("tenantMembers");

                    b.Navigation("trRoleMembers");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trRole", b =>
                {
                    b.Navigation("trRoleMembers");

                    b.Navigation("trRolePrivilagesItem");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trSubtask", b =>
                {
                    b.Navigation("trAction");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trTask", b =>
                {
                    b.Navigation("trAction");
                });
#pragma warning restore 612, 618
        }
    }
}
