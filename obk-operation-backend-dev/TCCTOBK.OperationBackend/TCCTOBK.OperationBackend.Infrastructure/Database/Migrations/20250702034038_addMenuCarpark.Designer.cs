// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TCCTOBK.OperationBackend.Infrastructure.Database;

#nullable disable

namespace TCCTOBK.OperationBackend.Infrastructure.Database.Migrations
{
    [DbContext(typeof(TCCTOBKContext))]
    [Migration("20250702034038_addMenuCarpark")]
    partial class addMenuCarpark
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.ClientMember", b =>
                {
                    b.Property<Guid>("CSMID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CSID")
                        .HasColumnType("uuid");

                    b.Property<string>("DataJson")
                        .HasColumnType("character varying");

                    b.Property<Guid>("MID")
                        .HasColumnType("uuid");

                    b.Property<int?>("StaffId")
                        .HasColumnType("integer");

                    b.HasKey("CSMID");

                    b.HasIndex("MID");

                    b.ToTable("ClientMember");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.ClientSite", b =>
                {
                    b.Property<Guid>("CSID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying");

                    b.HasKey("CSID");

                    b.ToTable("ClientSite");

                    b.HasData(
                        new
                        {
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Name = "One Bangkok"
                        },
                        new
                        {
                            CSID = new Guid("9b84961b-1de6-445b-bd19-12430950d226"),
                            Name = "The PARQ"
                        });
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.EventsLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CSID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("3075169a-bb4c-463f-a602-dac99228ceac"));

                    b.Property<string>("ClientAuthMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GrantType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RefreshTokenId")
                        .HasColumnType("uuid");

                    b.Property<string>("RefreshTokenType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("TokenId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying");

                    b.Property<Guid>("Username")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("EventsLog");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.OpsAppNotification", b =>
                {
                    b.Property<Guid>("OANID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CSID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("3075169a-bb4c-463f-a602-dac99228ceac"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FCMResult")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("FromUser")
                        .HasColumnType("uuid");

                    b.Property<string>("FromUserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSendSuccess")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MessageEn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MessageType")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ToUser")
                        .HasColumnType("uuid");

                    b.Property<string>("ToUserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.Property<int>("WorkId")
                        .HasColumnType("integer");

                    b.HasKey("OANID");

                    b.ToTable("OpsAppNotifications");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.SOCUser", b =>
                {
                    b.Property<Guid>("SID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DataJson")
                        .HasColumnType("character varying");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("FirstNameEn")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("IdentifyNumber")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<int>("IdentifyType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("KeyCloakUserId")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("LastNameEn")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int?>("StaffId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("SID");

                    b.ToTable("SOCUser");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.Tenant", b =>
                {
                    b.Property<Guid>("TID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.HasKey("TID");

                    b.ToTable("Tenant");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.TenantMember", b =>
                {
                    b.Property<Guid?>("CSID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("3075169a-bb4c-463f-a602-dac99228ceac"));

                    b.Property<Guid>("MID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TID")
                        .HasColumnType("uuid");

                    b.HasKey("CSID", "MID", "TID");

                    b.HasIndex("MID");

                    b.HasIndex("TID");

                    b.ToTable("TenantMember");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.TimeCardEntries", b =>
                {
                    b.Property<Guid>("CAID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CheckIn")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("CheckOut")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("KCUsername")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TSID")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("CAID");

                    b.ToTable("TimeCardEntries");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.TimeSheet", b =>
                {
                    b.Property<Guid>("TSID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CheckCode")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Location")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("TSID");

                    b.ToTable("TimeSheet");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.UsageLogMonitoring", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AllStaff")
                        .HasColumnType("character varying");

                    b.Property<int?>("AtcualActiveDailyUser")
                        .HasColumnType("integer");

                    b.Property<Guid?>("CSID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("3075169a-bb4c-463f-a602-dac99228ceac"));

                    b.Property<string>("Component")
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("FixedDailyUserTarget")
                        .HasColumnType("integer");

                    b.Property<string>("Statistics")
                        .HasColumnType("character varying");

                    b.Property<int?>("SumWeekDay")
                        .HasColumnType("integer");

                    b.Property<int?>("SumWeekEnd")
                        .HasColumnType("integer");

                    b.Property<string>("SyncDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TotalDalilyOnGroundStaffMustUseOpsAppWithOutRegister")
                        .HasColumnType("integer");

                    b.Property<int?>("TotalDalilyOnGroundStaffMustUseOpsAppWithRegister")
                        .HasColumnType("integer");

                    b.Property<int?>("TotlaOnGroundStaffMustUseOpsApp")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("UsageLogMonitoring");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.mtActionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("mtActionType");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.mtAppConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CSID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("3075169a-bb4c-463f-a602-dac99228ceac"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("mtAppConfig");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.mtBeacon", b =>
                {
                    b.Property<Guid>("BID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FloorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<int>("Major")
                        .HasColumnType("integer");

                    b.Property<int>("Minor")
                        .HasColumnType("integer");

                    b.Property<string>("ParkName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("SpaceNo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("SpaceType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("UUID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ZoneName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("BID");

                    b.ToTable("mtBeacon");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.mtHomeContent", b =>
                {
                    b.Property<Guid>("HCID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("RemoteConfigDataJson")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("RemoteConfigResponseDataJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.HasKey("HCID");

                    b.ToTable("HomeContent");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.mtMenu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Breadcrumb")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying");

                    b.Property<Guid?>("CSID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("3075169a-bb4c-463f-a602-dac99228ceac"));

                    b.Property<string>("Class")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying");

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Header")
                        .HasMaxLength(200)
                        .HasColumnType("character varying");

                    b.Property<string>("IconClass")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying");

                    b.Property<string>("IconName")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .HasMaxLength(200)
                        .HasColumnType("character varying");

                    b.Property<Guid?>("PTID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Separator")
                        .HasColumnType("boolean");

                    b.Property<string>("To")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying");

                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("Url")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying");

                    b.Property<bool>("Visible")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("mtMenu");

                    b.HasData(
                        new
                        {
                            Id = new Guid("15156413-ca2d-4b3a-8c1e-e7019ca2ca35"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 100,
                            IsActive = true,
                            Label = "",
                            Separator = false,
                            Type = "GROUP",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("b1b3907e-503c-408d-911b-32d7f6450694"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 101,
                            IconName = "SvgUser",
                            IsActive = true,
                            Label = "Users",
                            PTID = new Guid("187050f0-ff0e-4767-b37e-2755f0de169a"),
                            ParentId = new Guid("15156413-ca2d-4b3a-8c1e-e7019ca2ca35"),
                            Separator = false,
                            Type = "GROUP",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("20104da5-004f-4fdb-9987-8603cf49959a"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 102,
                            IsActive = true,
                            Label = "All Users",
                            PTID = new Guid("f92a3d95-a360-455f-a5df-1534e6fec172"),
                            ParentId = new Guid("b1b3907e-503c-408d-911b-32d7f6450694"),
                            Separator = false,
                            To = "/users/all",
                            Type = "LIST",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("31038a00-a731-4e91-b1e1-2de9e9479a56"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 150,
                            IsActive = true,
                            Label = "",
                            Separator = false,
                            Type = "GROUP",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("34481ce3-583e-4ad3-9411-dbe319f7ba3e"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 152,
                            Header = "Marcom",
                            IconName = "SvgContent",
                            IsActive = true,
                            Label = "Marcom",
                            PTID = new Guid("fad4a7fc-8076-40c0-93bb-1404558549e0"),
                            ParentId = new Guid("31038a00-a731-4e91-b1e1-2de9e9479a56"),
                            Separator = false,
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("5b5be629-2886-4c70-8864-ad4fa650df0a"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 161,
                            IsActive = true,
                            Label = "Hero Banner",
                            PTID = new Guid("a6f07bc9-51d4-4fdd-8215-2aa68383dbfc"),
                            ParentId = new Guid("34481ce3-583e-4ad3-9411-dbe319f7ba3e"),
                            Separator = false,
                            To = "/marcom/hero",
                            Type = "LIST",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("e3bfce6b-dc41-4dbe-a9e8-d43cbe69cae6"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 162,
                            IsActive = true,
                            Label = "Create Hero Banner",
                            PTID = new Guid("c9453aea-fbc3-4559-84a9-103a532c998a"),
                            ParentId = new Guid("5b5be629-2886-4c70-8864-ad4fa650df0a"),
                            Separator = false,
                            To = "/marcom/hero/create",
                            Type = "CREATE",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("95c3bef9-94aa-40e7-858b-c0d1a4e26b48"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 163,
                            IsActive = true,
                            Label = "Edit Hero Banner",
                            PTID = new Guid("65d83597-f3db-4037-acbe-24bf8e01672b"),
                            ParentId = new Guid("5b5be629-2886-4c70-8864-ad4fa650df0a"),
                            Separator = false,
                            To = "/marcom/hero/edit/:id",
                            Type = "EDIT",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("c0a62684-d85a-4b8a-bbb7-8d7d55b3c049"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 171,
                            IsActive = true,
                            Label = "What's Happening",
                            PTID = new Guid("05a8f11e-d1ed-4eb5-8430-4907967eb301"),
                            ParentId = new Guid("34481ce3-583e-4ad3-9411-dbe319f7ba3e"),
                            Separator = false,
                            To = "/marcom/happening",
                            Type = "LIST",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("56f8419c-e36e-4dc9-8ac9-25261174f50b"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 174,
                            IsActive = true,
                            Label = "Article What's Happening",
                            PTID = new Guid("0e82ceb7-6c37-44a3-83a7-ba700be6e5d9"),
                            ParentId = new Guid("c0a62684-d85a-4b8a-bbb7-8d7d55b3c049"),
                            Separator = false,
                            To = "/marcom/happening/show/:id",
                            Type = "SHOW",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("292462da-4d95-4189-94f0-8414fc42d303"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 172,
                            IsActive = true,
                            Label = "Create What's Happening",
                            PTID = new Guid("3a11067d-c22f-40d6-b2c9-8ba1e00e0cce"),
                            ParentId = new Guid("c0a62684-d85a-4b8a-bbb7-8d7d55b3c049"),
                            Separator = false,
                            To = "/marcom/happening/create",
                            Type = "CREATE",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("bfef882e-682b-4753-b9f3-c7ec3f3acb46"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 173,
                            IsActive = true,
                            Label = "Edit What's Happening",
                            PTID = new Guid("a037a451-0db5-4832-9fae-9111c89d1cfc"),
                            ParentId = new Guid("c0a62684-d85a-4b8a-bbb7-8d7d55b3c049"),
                            Separator = false,
                            To = "/marcom/happening/edit/:id",
                            Type = "EDIT",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("d234f890-4b27-45d8-9fa7-9c8b014b5f4b"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 182,
                            IsActive = true,
                            Label = "Explore One Bangkok",
                            PTID = new Guid("456dcf29-047e-4482-9f91-74ddf7b10594"),
                            ParentId = new Guid("34481ce3-583e-4ad3-9411-dbe319f7ba3e"),
                            Separator = false,
                            To = "/marcom/explore",
                            Type = "LIST",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("7f03b134-cc4a-475b-84f3-a3ebc6521103"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 184,
                            IsActive = true,
                            Label = "Create Explore One Bangkok",
                            PTID = new Guid("a02b32ea-8db3-4e71-9b97-6dd1fb8828b8"),
                            ParentId = new Guid("d234f890-4b27-45d8-9fa7-9c8b014b5f4b"),
                            Separator = false,
                            To = "/marcom/explore/create",
                            Type = "CREATE",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("054dac0c-1636-40f3-9120-4996b5c7c65e"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 185,
                            IsActive = true,
                            Label = "Edit Explore One Bangkok",
                            PTID = new Guid("9a4eeb91-3a8e-4a8a-80e7-bdc9ac36a88a"),
                            ParentId = new Guid("d234f890-4b27-45d8-9fa7-9c8b014b5f4b"),
                            Separator = false,
                            To = "/marcom/explore/edit/:id",
                            Type = "EDIT",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("0ea4b40d-2bce-4e9b-8ec2-13de9e36a228"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 182,
                            IsActive = true,
                            Label = "Special Event",
                            PTID = new Guid("b8b117ba-18da-4f73-b67f-7db1581a1b30"),
                            ParentId = new Guid("34481ce3-583e-4ad3-9411-dbe319f7ba3e"),
                            Separator = false,
                            To = "/marcom/event",
                            Type = "LIST",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("4eeaf585-c62c-4e44-8e49-0f58daa6b6d1"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 184,
                            IsActive = true,
                            Label = "Special Event",
                            PTID = new Guid("ddfd5827-7610-401f-891f-0fee217f811d"),
                            ParentId = new Guid("0ea4b40d-2bce-4e9b-8ec2-13de9e36a228"),
                            Separator = false,
                            To = "/marcom/event/create",
                            Type = "CREATE",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("54f6ea7d-cc01-45a2-a68e-48d22dfdf01d"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 185,
                            IsActive = true,
                            Label = "Special Event",
                            PTID = new Guid("4ed288f3-11d9-4181-86ae-5684d4c9ebbd"),
                            ParentId = new Guid("0ea4b40d-2bce-4e9b-8ec2-13de9e36a228"),
                            Separator = false,
                            To = "/marcom/event/edit/:id",
                            Type = "EDIT",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("3d1cf108-2efd-4dcc-bb67-13b054e72a18"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 200,
                            IsActive = true,
                            Label = "",
                            Separator = false,
                            Type = "GROUP",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("994bbf11-10bf-411f-b395-27c3561ade9b"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 201,
                            Header = "Office",
                            IconName = "SvgOffice",
                            IsActive = true,
                            Label = "Office",
                            PTID = new Guid("3611e967-5cb7-40c6-aa18-ba5189084d80"),
                            ParentId = new Guid("3d1cf108-2efd-4dcc-bb67-13b054e72a18"),
                            Separator = false,
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("27801834-36e4-4fec-9750-aa4ff498063a"),
                            Breadcrumb = "[\"Home content\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 202,
                            Header = "Home content",
                            IsActive = true,
                            Label = "Home content",
                            PTID = new Guid("5ee02541-2657-41e1-92e2-6f3b31c5057b"),
                            ParentId = new Guid("994bbf11-10bf-411f-b395-27c3561ade9b"),
                            Separator = false,
                            To = "/home-content/edit-content",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("74a9aaf6-32d6-431f-a1e7-68d041dc1f1f"),
                            Breadcrumb = "[\"Office\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 203,
                            Header = "What's Happening",
                            IsActive = true,
                            Label = "What's Happening",
                            PTID = new Guid("f231f8e0-5f4f-41bd-9826-91718cef9fe7"),
                            ParentId = new Guid("994bbf11-10bf-411f-b395-27c3561ade9b"),
                            Separator = false,
                            To = "/what-happening",
                            Type = "LIST",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("dc0b252a-e9b2-458c-b2be-23d6a063e882"),
                            Breadcrumb = "[\"Office\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 204,
                            Header = "Emergency Contact",
                            IsActive = true,
                            Label = "Emergency Contact",
                            PTID = new Guid("f231f8e0-5f4f-41bd-9826-91718cef9fe7"),
                            ParentId = new Guid("74a9aaf6-32d6-431f-a1e7-68d041dc1f1f"),
                            Separator = false,
                            To = "/emergency-contact",
                            Type = "CREATE",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("cd06d2c3-a8e1-4c10-b70e-8bb7348a1d7f"),
                            Breadcrumb = "[\"Office\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 205,
                            Header = "Emergency Contact",
                            IsActive = true,
                            Label = "Emergency Contact",
                            PTID = new Guid("a90545c0-4ad1-49d5-be20-21f53a21e52b"),
                            ParentId = new Guid("74a9aaf6-32d6-431f-a1e7-68d041dc1f1f"),
                            Separator = false,
                            To = "/emergency-contact",
                            Type = "EDIT",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("41587cf4-5588-46c7-bd79-5f04bc337b80"),
                            Breadcrumb = "[\"Office\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 206,
                            Header = "Emergency Contact",
                            IsActive = true,
                            Label = "Emergency Contact",
                            PTID = new Guid("f231f8e0-5f4f-41bd-9826-91718cef9fe7"),
                            ParentId = new Guid("74a9aaf6-32d6-431f-a1e7-68d041dc1f1f"),
                            Separator = false,
                            To = "/emergency-contact",
                            Type = "SHOW",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("d65f958d-a3ab-45f9-9b34-99c362376eb5"),
                            Breadcrumb = "[\"Home content\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 207,
                            Header = "Home content",
                            IsActive = true,
                            Label = "Version history",
                            PTID = new Guid("5c3de96d-3d67-4d4c-9c1b-1c9d5f191283"),
                            ParentId = new Guid("994bbf11-10bf-411f-b395-27c3561ade9b"),
                            Separator = false,
                            To = "/home-content/version-history",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("8ad532c7-1cdd-4f35-8a40-4a13cf0bb60c"),
                            Breadcrumb = "[\"Home content\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 208,
                            Header = "History Log",
                            IsActive = true,
                            Label = "Version history",
                            PTID = new Guid("5c3de96d-3d67-4d4c-9c1b-1c9d5f191283"),
                            ParentId = new Guid("d65f958d-a3ab-45f9-9b34-99c362376eb5"),
                            Separator = false,
                            To = "/home-content/version-history/show/:id",
                            Type = "SHOW",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("85dbfe62-ca8c-472c-a33c-3f2dd43fe3d9"),
                            Breadcrumb = "[\"Office\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 209,
                            Header = "Directory Contact",
                            IsActive = true,
                            Label = "Directory Contact",
                            PTID = new Guid("8f4a9416-e067-4834-a613-dd882b0693dc"),
                            ParentId = new Guid("994bbf11-10bf-411f-b395-27c3561ade9b"),
                            Separator = false,
                            To = "/directory-contact",
                            Type = "LIST",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("e856099a-4ef5-4b2d-8fe1-df5f5c975b3a"),
                            Breadcrumb = "[\"Office\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 210,
                            Header = "Directory Contact",
                            IsActive = true,
                            Label = "Directory Contact",
                            PTID = new Guid("8f4a9416-e067-4834-a613-dd882b0693dc"),
                            ParentId = new Guid("85dbfe62-ca8c-472c-a33c-3f2dd43fe3d9"),
                            Separator = false,
                            To = "/directory-contact/show",
                            Type = "SHOW",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("fec611d1-a66e-4193-8f73-d7a982f89edb"),
                            Breadcrumb = "[\"Office\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 211,
                            Header = "Directory Contact",
                            IsActive = true,
                            Label = "Directory Contact",
                            PTID = new Guid("8f4a9416-e067-4834-a613-dd882b0693dc"),
                            ParentId = new Guid("85dbfe62-ca8c-472c-a33c-3f2dd43fe3d9"),
                            Separator = false,
                            To = "/directory-contact/create",
                            Type = "CREATE",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("c078d178-96f5-4aee-b6b9-a64d339ee6aa"),
                            Breadcrumb = "[\"Office\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 212,
                            Header = "Directory Contact",
                            IsActive = true,
                            Label = "Directory Contact",
                            PTID = new Guid("8f4a9416-e067-4834-a613-dd882b0693dc"),
                            ParentId = new Guid("85dbfe62-ca8c-472c-a33c-3f2dd43fe3d9"),
                            Separator = false,
                            To = "/directory-contact/edit/:id",
                            Type = "EDIT",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("62ff1523-5536-4baa-87b0-9d702d65ce48"),
                            Breadcrumb = "[\"Office\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 213,
                            Header = "Personal Escort",
                            IsActive = true,
                            Label = "Personal Escort",
                            PTID = new Guid("a90545c0-4ad1-49d5-be20-21f53a21e52b"),
                            ParentId = new Guid("994bbf11-10bf-411f-b395-27c3561ade9b"),
                            Separator = false,
                            To = "/personal-escort",
                            Type = "LIST",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("84bf146b-86c5-4b51-8829-226a3dd475c1"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 300,
                            IsActive = true,
                            Label = "",
                            Separator = false,
                            Type = "GROUP",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("119e8afe-263c-4219-9d33-67825b221dd5"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 301,
                            Header = "Notifications",
                            IconName = "SvgBell",
                            IsActive = true,
                            Label = "Notifications",
                            PTID = new Guid("c7caf3cc-9130-4035-ba54-bb7dd418f1ae"),
                            ParentId = new Guid("84bf146b-86c5-4b51-8829-226a3dd475c1"),
                            Separator = false,
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("c3038f9f-7742-4b1e-9287-f540e208b586"),
                            Breadcrumb = "[\"Notifications\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 302,
                            Header = "In-apps notifications",
                            IsActive = true,
                            Label = "In-apps notifications",
                            PTID = new Guid("499b184b-a44b-4d0c-953a-9204c4c07ddd"),
                            ParentId = new Guid("119e8afe-263c-4219-9d33-67825b221dd5"),
                            Separator = false,
                            To = "/notifications/inapp",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("c6328155-2278-4e0c-8765-f6e6ca951055"),
                            Breadcrumb = "[\"Notifications\",\"In-apps notifications\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 303,
                            Header = "View in-app notification",
                            IsActive = true,
                            Label = "In-apps notifications",
                            PTID = new Guid("499b184b-a44b-4d0c-953a-9204c4c07ddd"),
                            ParentId = new Guid("c3038f9f-7742-4b1e-9287-f540e208b586"),
                            Separator = false,
                            To = "/notifications/inapp/show/:id",
                            Type = "SHOW",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("dfb26e2d-336e-49cb-9162-bd933453c67c"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 304,
                            Header = "Create new in-app notification",
                            IsActive = true,
                            Label = "In-apps notifications",
                            PTID = new Guid("9bfe9f97-205d-4a4d-8b7b-c0a75e3485dd"),
                            ParentId = new Guid("c3038f9f-7742-4b1e-9287-f540e208b586"),
                            Separator = false,
                            To = "/notifications/inapp/create-inapp",
                            Type = "CREATE",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("e5e64ccf-7f86-4896-9e4c-e5ef6720732e"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 304,
                            Header = "Create new in-app notification",
                            IsActive = true,
                            Label = "In-apps notifications",
                            PTID = new Guid("9bfe9f97-205d-4a4d-8b7b-c0a75e3485dd"),
                            ParentId = new Guid("c3038f9f-7742-4b1e-9287-f540e208b586"),
                            Separator = false,
                            To = "/notifications/inapp/create-inapp/duplicate/:id",
                            Type = "CREATE",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("25136f0a-b0b1-4b56-a8e7-0cccefa8025b"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 304,
                            Header = "Create new Announcement",
                            IsActive = true,
                            Label = "In-apps notifications",
                            PTID = new Guid("9bfe9f97-205d-4a4d-8b7b-c0a75e3485dd"),
                            ParentId = new Guid("c3038f9f-7742-4b1e-9287-f540e208b586"),
                            Separator = false,
                            To = "/notifications/inapp/create-announcement/duplicate/:id",
                            Type = "CREATE",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("40f7997c-a807-4dd5-9207-5a37d5894175"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 304,
                            Header = "Create new Announcement",
                            IsActive = true,
                            Label = "In-apps notifications",
                            PTID = new Guid("9bfe9f97-205d-4a4d-8b7b-c0a75e3485dd"),
                            ParentId = new Guid("c3038f9f-7742-4b1e-9287-f540e208b586"),
                            Separator = false,
                            To = "/notifications/inapp/create-announcement",
                            Type = "CREATE",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("cecdbe9e-639f-40cc-abd1-7fa588904d2e"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 304,
                            Header = "Create new in-app notification",
                            IsActive = true,
                            Label = "In-apps notifications",
                            PTID = new Guid("9bfe9f97-205d-4a4d-8b7b-c0a75e3485dd"),
                            ParentId = new Guid("c3038f9f-7742-4b1e-9287-f540e208b586"),
                            Separator = false,
                            To = "/notifications/inapp/create-inapp/template/:id",
                            Type = "CREATE",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("72178f6f-99b2-4a32-9e45-a296dcdb025e"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 304,
                            Header = "Create new announcement",
                            IsActive = true,
                            Label = "In-apps notifications",
                            PTID = new Guid("9bfe9f97-205d-4a4d-8b7b-c0a75e3485dd"),
                            ParentId = new Guid("c3038f9f-7742-4b1e-9287-f540e208b586"),
                            Separator = false,
                            To = "/notifications/inapp/create-announcement/template/:id",
                            Type = "CREATE",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("e5afae2f-6fa5-4bfb-a5bc-963c9c3713fb"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 305,
                            Header = "In-apps notifications",
                            IsActive = true,
                            Label = "In-apps notifications",
                            ParentId = new Guid("c3038f9f-7742-4b1e-9287-f540e208b586"),
                            Separator = false,
                            To = "/notifications/inapp/edit/:id",
                            Type = "EDIT",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("b15a2f26-0cc2-44a8-9fea-52a43a20ca29"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 305,
                            Header = "Edit announcement",
                            IsActive = true,
                            Label = "Edit announcement",
                            ParentId = new Guid("c3038f9f-7742-4b1e-9287-f540e208b586"),
                            Separator = false,
                            To = "/notifications/inapp/edit-announcement/:id",
                            Type = "EDIT",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("293a2e71-278a-4c95-bdd4-a3b9dbd8e13c"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 306,
                            Header = "Draft(s)",
                            IsActive = true,
                            Label = "Draft(s)",
                            PTID = new Guid("18f96e4a-d5ed-41c3-b733-ca8f08fca318"),
                            ParentId = new Guid("119e8afe-263c-4219-9d33-67825b221dd5"),
                            Separator = false,
                            To = "/notifications/draft",
                            Type = "LIST",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("9715e820-19ca-48fc-b4a4-5e5c6d193bc1"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 307,
                            Header = "Templates",
                            IsActive = true,
                            Label = "Templates",
                            PTID = new Guid("560af02b-45da-428c-8aa8-aaf4b6201048"),
                            ParentId = new Guid("119e8afe-263c-4219-9d33-67825b221dd5"),
                            Separator = false,
                            To = "/notifications/template",
                            Type = "LIST",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("f340108d-2384-409a-b3ae-80d21ba6134c"),
                            Breadcrumb = "[\"Notifications\",\"In-apps template notifications\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 308,
                            Header = "View in-app template notification template",
                            IsActive = true,
                            Label = "View in-app template notification template",
                            PTID = new Guid("560af02b-45da-428c-8aa8-aaf4b6201048"),
                            ParentId = new Guid("9715e820-19ca-48fc-b4a4-5e5c6d193bc1"),
                            Separator = false,
                            To = "/notifications/template/show/:id",
                            Type = "SHOW",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("b1411131-4f55-4d9d-8910-3daf76c26dc1"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 309,
                            Header = "Create new in-apps notification template",
                            IsActive = true,
                            Label = "Create new in-apps notification template",
                            PTID = new Guid("c545119b-7587-4a16-a71d-ad6c189a9106"),
                            ParentId = new Guid("9715e820-19ca-48fc-b4a4-5e5c6d193bc1"),
                            Separator = false,
                            To = "/notifications/template/create-inapp",
                            Type = "CREATE",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("e7806d02-a603-47f0-9bb6-2b0aaa852869"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 310,
                            Header = "Create new announcement template",
                            IsActive = true,
                            Label = "Create new announcement template",
                            ParentId = new Guid("9715e820-19ca-48fc-b4a4-5e5c6d193bc1"),
                            Separator = false,
                            To = "/notifications/template/create-announcement",
                            Type = "LIST",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("c965d9bd-6f96-4fa6-9422-3b4c6d0930d8"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 309,
                            Header = "Create new in-apps notification template",
                            IsActive = true,
                            Label = "Create new in-apps notification template",
                            PTID = new Guid("c545119b-7587-4a16-a71d-ad6c189a9106"),
                            ParentId = new Guid("9715e820-19ca-48fc-b4a4-5e5c6d193bc1"),
                            Separator = false,
                            To = "/notifications/template/create-inapp/campaign/:id",
                            Type = "CREATE",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("9debbc29-17a3-4753-9edd-edda1292a340"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 310,
                            Header = "Create new announcement template",
                            IsActive = true,
                            Label = "Create new announcement template",
                            ParentId = new Guid("9715e820-19ca-48fc-b4a4-5e5c6d193bc1"),
                            Separator = false,
                            To = "/notifications/template/create-announcement/campaign/:id",
                            Type = "LIST",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("9c16bb6a-2798-4da7-916d-ef91a917dcd1"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 311,
                            Header = "In-apps edit template notifications",
                            IsActive = true,
                            Label = "In-apps edit template notifications",
                            PTID = new Guid("c545119b-7587-4a16-a71d-ad6c189a9106"),
                            ParentId = new Guid("9715e820-19ca-48fc-b4a4-5e5c6d193bc1"),
                            Separator = false,
                            To = "/notifications/template/edit/:id",
                            Type = "EDIT",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("1a920071-d382-4a87-9626-7ca1c78ead44"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 311,
                            Header = "Edit Announcement template",
                            IsActive = true,
                            Label = "Edit Announcement template",
                            PTID = new Guid("c545119b-7587-4a16-a71d-ad6c189a9106"),
                            ParentId = new Guid("9715e820-19ca-48fc-b4a4-5e5c6d193bc1"),
                            Separator = false,
                            To = "/notifications/template/edit-announcement/:id",
                            Type = "EDIT",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("88874de1-34c6-40b5-895b-b8c68e0455bb"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 311,
                            Header = "Categories",
                            IsActive = true,
                            Label = "Categories",
                            PTID = new Guid("e70e6e8f-3267-4e53-a5af-797e9d96ccce"),
                            ParentId = new Guid("119e8afe-263c-4219-9d33-67825b221dd5"),
                            Separator = false,
                            To = "/notifications/categories",
                            Type = "LIST",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("9b49ddba-1b9d-445b-a2c9-168dd1903dde"),
                            Breadcrumb = "[\"Notification\",\"Category\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 313,
                            Header = "Categories",
                            IsActive = true,
                            Label = "Categories",
                            PTID = new Guid("e70e6e8f-3267-4e53-a5af-797e9d96ccce"),
                            ParentId = new Guid("88874de1-34c6-40b5-895b-b8c68e0455bb"),
                            Separator = false,
                            To = "/notifications/categories/show/:id",
                            Type = "SHOW",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("6f9dcead-e770-476a-943f-c4606b3f36a8"),
                            Breadcrumb = "[\"Notification\",\"Create new category\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 314,
                            Header = "Create new category",
                            IsActive = true,
                            Label = "Create new category",
                            PTID = new Guid("4d7b12d5-0a19-48d2-b524-669ca35acedc"),
                            ParentId = new Guid("88874de1-34c6-40b5-895b-b8c68e0455bb"),
                            Separator = false,
                            To = "/notifications/categories/create",
                            Type = "CREATE",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("234a02c1-b447-4e41-aa6f-64ce26e1d77c"),
                            Breadcrumb = "[\"Notification\",\"Edit category\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 315,
                            Header = "Edit category",
                            IsActive = true,
                            Label = "Edit category",
                            PTID = new Guid("4d7b12d5-0a19-48d2-b524-669ca35acedc"),
                            ParentId = new Guid("88874de1-34c6-40b5-895b-b8c68e0455bb"),
                            Separator = false,
                            To = "/notifications/categories/edit/:id",
                            Type = "EDIT",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("441badea-bd50-4bf1-908a-b5ca06235d75"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 400,
                            IsActive = true,
                            Label = "",
                            Separator = false,
                            Type = "GROUP",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("ffb61799-f008-4dee-9645-b6ba162224d2"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 401,
                            Header = "Building Access",
                            IconName = "SvgBuilding",
                            IsActive = true,
                            Label = "Building Access",
                            PTID = new Guid("25461bf1-ac46-4ed5-b6f4-170b7ee70bb5"),
                            ParentId = new Guid("441badea-bd50-4bf1-908a-b5ca06235d75"),
                            Separator = false,
                            Type = "GROUP",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("599d3c7a-3a17-427a-8641-68db20dc0042"),
                            Breadcrumb = "[\"Building Access\",\"Visitors\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 411,
                            Header = "Visitors access",
                            IsActive = true,
                            Label = "Visitors access",
                            ParentId = new Guid("ffb61799-f008-4dee-9645-b6ba162224d2"),
                            Separator = false,
                            To = "/buildingaccess/visitors",
                            Type = "LIST",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("a1558dca-7677-4749-a2f4-71d79779b3ab"),
                            Breadcrumb = "[\"Building Access\",\"Tenant\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 410,
                            Header = "Tenant access",
                            IsActive = true,
                            Label = "Tenant access",
                            ParentId = new Guid("ffb61799-f008-4dee-9645-b6ba162224d2"),
                            Separator = false,
                            To = "/buildingaccess/tenant",
                            Type = "LIST",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("d4b81ede-36b6-4561-b59a-a15d874c28cf"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 500,
                            IsActive = true,
                            Label = "",
                            Separator = false,
                            Type = "GROUP",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("1c6b105b-cca1-42ec-9fdc-8ca03b1ef978"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 501,
                            Header = "Building Service",
                            IconName = "SvgUser",
                            IsActive = true,
                            Label = "Building Service",
                            PTID = new Guid("25461bf1-ac46-4ed5-b6f4-170b7ee70bb5"),
                            ParentId = new Guid("d4b81ede-36b6-4561-b59a-a15d874c28cf"),
                            Separator = false,
                            Type = "GROUP",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("245b2e4a-6e4b-4e1b-8dd8-9c46d0438cda"),
                            Breadcrumb = "[\"Building Service\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 502,
                            Header = "Service Request",
                            IsActive = true,
                            Label = "Service Request",
                            PTID = new Guid("cf3a9564-b228-4ca2-858c-66d5c2b35185"),
                            ParentId = new Guid("1c6b105b-cca1-42ec-9fdc-8ca03b1ef978"),
                            Separator = false,
                            To = "/building/servicerequest",
                            Type = "LIST",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("5c7b655b-0d9d-4676-83a4-a3fc160bd078"),
                            Breadcrumb = "[\"Building Service\",\"Service Request\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 503,
                            Header = "Service Request",
                            IsActive = true,
                            Label = "Service Request",
                            PTID = new Guid("cf3a9564-b228-4ca2-858c-66d5c2b35185"),
                            ParentId = new Guid("245b2e4a-6e4b-4e1b-8dd8-9c46d0438cda"),
                            Separator = false,
                            To = "/building/servicerequest/show/:id",
                            Type = "SHOW",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("ed1aae97-4614-4a27-822d-d3d0dec4d26a"),
                            Breadcrumb = "[\"Building Service\",\"After-hour Air Condition Requests\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 504,
                            Header = "After-hour Air Condition Requests",
                            IsActive = true,
                            Label = "AC Request",
                            PTID = new Guid("575e3781-e3e9-4b98-b1cf-8f347b2cf065"),
                            ParentId = new Guid("1c6b105b-cca1-42ec-9fdc-8ca03b1ef978"),
                            Separator = false,
                            To = "/building/acrequest",
                            Type = "LIST",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("1dd4cd55-7ac5-46cf-ad6b-461b32254abb"),
                            Breadcrumb = "[\"Building Service\",\"After-hour Air Condition Requests\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 505,
                            Header = "After-hour Air Condition Requests",
                            IsActive = true,
                            Label = "AC Request",
                            PTID = new Guid("575e3781-e3e9-4b98-b1cf-8f347b2cf065"),
                            ParentId = new Guid("ed1aae97-4614-4a27-822d-d3d0dec4d26a"),
                            Separator = false,
                            To = "/building/acrequest/show/:id",
                            Type = "SHOW",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("1e62d86d-129a-45c4-bb42-d3a0d0fddc96"),
                            Breadcrumb = "[\"Building Service\",\"After-hour Air Condition Requests\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 506,
                            Header = "After-hour Air Condition Requests",
                            IsActive = true,
                            Label = "AC Request",
                            ParentId = new Guid("ed1aae97-4614-4a27-822d-d3d0dec4d26a"),
                            Separator = false,
                            To = "/building/acrequest/create",
                            Type = "CREATE",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("7cc7ea3f-b216-40af-973f-58734ea4b5ea"),
                            Breadcrumb = "[\"Building Service\",\"After-hour Air Condition Requests\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 507,
                            Header = "After-hour Air Condition Requests",
                            IsActive = true,
                            Label = "AC Request",
                            ParentId = new Guid("ed1aae97-4614-4a27-822d-d3d0dec4d26a"),
                            Separator = false,
                            To = "/building/acrequest/edit/:id",
                            Type = "EDIT",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("75eaf43e-b878-4d95-b668-d6b419100f8f"),
                            Breadcrumb = "[\"Building Service\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 508,
                            Header = "Issue type",
                            IsActive = true,
                            Label = "Issue type",
                            PTID = new Guid("86f4b1ab-c705-4893-a6e7-0c86e287c89b"),
                            ParentId = new Guid("1c6b105b-cca1-42ec-9fdc-8ca03b1ef978"),
                            Separator = false,
                            To = "/building/issuetype",
                            Type = "LIST",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("1b6827e0-3272-4cf1-8b6b-4313e0fa6632"),
                            Breadcrumb = "[\"Building Service\",\"Issue type\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 509,
                            Header = "Issue type",
                            IsActive = true,
                            Label = "Issue type",
                            ParentId = new Guid("75eaf43e-b878-4d95-b668-d6b419100f8f"),
                            Separator = false,
                            To = "/building/servicerequest/edit/:id",
                            Type = "EDIT",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("1b6827e0-3272-4cf1-8b6b-4313e0fa6532"),
                            Breadcrumb = "[\"Building Service\",\"Urgent Service Request\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 510,
                            Header = "Urgent Service Request",
                            IsActive = true,
                            Label = "Urgent Service Request",
                            ParentId = new Guid("1c6b105b-cca1-42ec-9fdc-8ca03b1ef978"),
                            Separator = false,
                            To = "/building/inspectionrequest",
                            Type = "LIST",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("dc712dc0-9a6b-4b35-8c42-e2870deb804c"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 600,
                            IsActive = true,
                            Label = "",
                            Separator = false,
                            Type = "GROUP",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("2ad8b5cc-8189-4be0-ad71-6ae15b23b7e9"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 601,
                            IconName = "SvgSupport",
                            IsActive = true,
                            Label = "Support",
                            PTID = new Guid("108e481f-c36f-43ef-af5d-eae802d4499b"),
                            ParentId = new Guid("dc712dc0-9a6b-4b35-8c42-e2870deb804c"),
                            Separator = false,
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("05ab1003-7561-44d9-8721-c1117799e4ef"),
                            Breadcrumb = "[\"Dashboard\",\"Support\",\"Access Local Information\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 602,
                            IsActive = true,
                            Label = "Access Local Information",
                            PTID = new Guid("6b87dcbe-ed47-421c-bd0c-f1007f430a5a"),
                            ParentId = new Guid("2ad8b5cc-8189-4be0-ad71-6ae15b23b7e9"),
                            Separator = false,
                            To = "/support/access-information",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("13b65779-5c92-4b76-9d46-41b743a585aa"),
                            Breadcrumb = "[\"Dashboard\",\"Support\",\"FAQs\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 603,
                            IsActive = true,
                            Label = "FAQs",
                            PTID = new Guid("6b87dcbe-ed47-421c-bd0c-f1007f430a5a"),
                            ParentId = new Guid("2ad8b5cc-8189-4be0-ad71-6ae15b23b7e9"),
                            Separator = false,
                            To = "/support/faqs",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("f2291ac0-0469-488a-9f9c-d5596dd1ed7f"),
                            Breadcrumb = "[\"Dashboard\",\"Support\",\"ContactCenter\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 604,
                            IsActive = true,
                            Label = "Contact Center",
                            PTID = new Guid("5647c352-0c08-4982-806e-b764ff061ba4"),
                            ParentId = new Guid("2ad8b5cc-8189-4be0-ad71-6ae15b23b7e9"),
                            Separator = false,
                            To = "/support/contact-center",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("8911cdf9-71ec-49aa-ad3b-716c966a54df"),
                            Breadcrumb = "[\"Dashboard\",\"Support\",\"App Version\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 605,
                            IsActive = true,
                            Label = "App Version",
                            PTID = new Guid("55c4ada7-e1cf-43e2-8770-5102c03f8a8e"),
                            ParentId = new Guid("2ad8b5cc-8189-4be0-ad71-6ae15b23b7e9"),
                            Separator = false,
                            To = "/support/app-version",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("16383f7a-aed4-4b92-ac83-2d602aa2d508"),
                            Breadcrumb = "[\"Dashboard\",\"Support\",\"App Maintenance\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 606,
                            IsActive = true,
                            Label = "App Maintenance",
                            PTID = new Guid("e3776352-3511-4b75-b1f3-1b46c9fb1d57"),
                            ParentId = new Guid("2ad8b5cc-8189-4be0-ad71-6ae15b23b7e9"),
                            Separator = false,
                            To = "/support/app-maintenance",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("35924bcd-d085-4c3a-8026-37ea2ca82482"),
                            Breadcrumb = "[\"Legal\",\"Legal Content\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 607,
                            IsActive = true,
                            Label = "Legal Content",
                            PTID = new Guid("ae4f3bcc-ed43-4abb-a082-a1b2cba6bea3"),
                            ParentId = new Guid("2ad8b5cc-8189-4be0-ad71-6ae15b23b7e9"),
                            Separator = false,
                            To = "/legal/legal-content",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("1072eee8-2707-49e4-8131-83457b8edce8"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 700,
                            IsActive = true,
                            Label = "",
                            Separator = false,
                            Type = "GROUP",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("22743885-cf89-4009-8ca6-01049a2dba36"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 701,
                            Header = "Members & Roles",
                            IconName = "SvgRole",
                            IsActive = true,
                            Label = "Members & Roles",
                            PTID = new Guid("ecc622f9-b411-4286-8a50-df2100277210"),
                            ParentId = new Guid("1072eee8-2707-49e4-8131-83457b8edce8"),
                            Separator = false,
                            Type = "GROUP",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("f9720e30-bc8f-49aa-a31a-d51ef69422a3"),
                            Breadcrumb = "[\"Members & Roles\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 702,
                            Header = "Member management",
                            IsActive = true,
                            Label = "Member management",
                            PTID = new Guid("a04722d6-0fc2-4144-b77a-2a67e838f2f1"),
                            ParentId = new Guid("22743885-cf89-4009-8ca6-01049a2dba36"),
                            Separator = false,
                            To = "/roles/member",
                            Type = "LIST",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("d0fbe2f6-2973-4cba-91a1-680dd86d72bc"),
                            Breadcrumb = "[\"Members & Roles\",\"Member management\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 703,
                            Header = "Invite member",
                            IsActive = true,
                            Label = "Invite Member",
                            PTID = new Guid("d34c2f62-b729-47fa-a1a9-19a6acbb52cb"),
                            ParentId = new Guid("f9720e30-bc8f-49aa-a31a-d51ef69422a3"),
                            Separator = false,
                            To = "/roles/member/create",
                            Type = "CREATE",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("699415f6-01a2-4556-9734-2e918c2748d7"),
                            Breadcrumb = "[\"Members & Roles\",\"Member management\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 704,
                            Header = "Edit Member",
                            IsActive = true,
                            Label = "Edit Member",
                            PTID = new Guid("d34c2f62-b729-47fa-a1a9-19a6acbb52cb"),
                            ParentId = new Guid("f9720e30-bc8f-49aa-a31a-d51ef69422a3"),
                            Separator = false,
                            To = "/roles/member/edit/:id",
                            Type = "EDIT",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("274ca920-c069-4c41-9ee1-dcd499713e3d"),
                            Breadcrumb = "[\"Members & Roles\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 705,
                            Header = "Role management",
                            IsActive = true,
                            Label = "Role management",
                            PTID = new Guid("65d83597-f3db-4037-acbe-24bf8e01672b"),
                            ParentId = new Guid("22743885-cf89-4009-8ca6-01049a2dba36"),
                            Separator = false,
                            To = "/roles/role",
                            Type = "LIST",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("d4f29776-3f01-4dde-8c47-3f06735fe01b"),
                            Breadcrumb = "[\"Members & Roles\",\"Role management\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 706,
                            Header = "Create new role",
                            IsActive = true,
                            Label = "Create new role",
                            PTID = new Guid("9ff4e790-dfdb-401c-b450-0e3cc6fa008f"),
                            ParentId = new Guid("274ca920-c069-4c41-9ee1-dcd499713e3d"),
                            Separator = false,
                            To = "/roles/role/create",
                            Type = "CREATE",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("6e0777ec-4958-402b-a374-b8e604fa8da7"),
                            Breadcrumb = "[\"Members & Roles\",\"Role management\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 707,
                            Header = "Edit role privileges",
                            IsActive = true,
                            Label = "Edit role privileges",
                            PTID = new Guid("9ff4e790-dfdb-401c-b450-0e3cc6fa008f"),
                            ParentId = new Guid("274ca920-c069-4c41-9ee1-dcd499713e3d"),
                            Separator = false,
                            To = "/roles/role/edit/:id",
                            Type = "EDIT",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("468c162a-ea3f-4aa8-84c0-69c04ce0c883"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 800,
                            IsActive = true,
                            Label = "",
                            Separator = false,
                            Type = "GROUP",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("ed8b89d9-aa36-4fa2-bc23-5e5cdf8fd85e"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 801,
                            Header = "My account",
                            IconName = "SvgUser",
                            IsActive = true,
                            Label = "My account",
                            ParentId = new Guid("468c162a-ea3f-4aa8-84c0-69c04ce0c883"),
                            Separator = false,
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("d3a532d7-c625-4d48-8699-e8b6f915da71"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 802,
                            Header = "Personal information",
                            IsActive = true,
                            Label = "Personal Information",
                            ParentId = new Guid("ed8b89d9-aa36-4fa2-bc23-5e5cdf8fd85e"),
                            Separator = false,
                            To = "/account/personal-information",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("cc6f542c-7572-4bc0-b1d7-cedf08b37342"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 800,
                            IsActive = true,
                            Label = "",
                            Separator = false,
                            Type = "GROUP",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("0885f38e-0f44-44fa-90b4-82467b270faa"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 801,
                            Header = "Car access activities",
                            IconName = "SvgCar",
                            IsActive = true,
                            Label = "Car park",
                            PTID = new Guid("6319d36b-09cc-4304-842f-a5dac90cb86e"),
                            ParentId = new Guid("cc6f542c-7572-4bc0-b1d7-cedf08b37342"),
                            Separator = false,
                            Type = "GROUP",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("41748bc4-023c-4b1b-adcb-75cdfbdafc27"),
                            Breadcrumb = "[\"Car park\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 802,
                            Header = "Car access activities",
                            IsActive = true,
                            Label = "Car access activities",
                            PTID = new Guid("6319d36b-09cc-4304-842f-a5dac90cb86e"),
                            ParentId = new Guid("0885f38e-0f44-44fa-90b4-82467b270faa"),
                            Separator = false,
                            To = "/car-park/cars-access-activities",
                            Type = "LIST",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("44ee9361-9c44-4435-aece-01204e0374f1"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 803,
                            Header = "Retail Parking: Store Whitelist",
                            IsActive = true,
                            Label = "Retail Parking: Store Whitelist",
                            PTID = new Guid("44ee9361-9c44-4435-aece-01204e0374f1"),
                            ParentId = new Guid("0885f38e-0f44-44fa-90b4-82467b270faa"),
                            Separator = false,
                            To = "/car-park/store-whitelists",
                            Type = "LIST",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("6fa909d3-7419-4dc0-a7bf-0292c9527a01"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 804,
                            Header = "Retail Parking: Mall Property",
                            IsActive = true,
                            Label = "Retail Parking: Mall Property",
                            PTID = new Guid("6fa909d3-7419-4dc0-a7bf-0292c9527a01"),
                            ParentId = new Guid("0885f38e-0f44-44fa-90b4-82467b270faa"),
                            Separator = false,
                            To = "/car-park/property",
                            Type = "LIST",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("137ad989-7a8d-4677-a866-480e944ea68a"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 806,
                            Header = "Retail Parking: Document Type",
                            IsActive = true,
                            Label = "Retail Parking: Document Type",
                            PTID = new Guid("137ad989-7a8d-4677-a866-480e944ea68a"),
                            ParentId = new Guid("0885f38e-0f44-44fa-90b4-82467b270faa"),
                            Separator = false,
                            To = "/car-park/document-type",
                            Type = "LIST",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("b35991e9-961c-4b99-9a93-253d1b37b2eb"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 807,
                            Header = "Retail Parking: Campaign",
                            IsActive = true,
                            Label = "Retail Parking: Campaign",
                            PTID = new Guid("b35991e9-961c-4b99-9a93-253d1b37b2eb"),
                            ParentId = new Guid("0885f38e-0f44-44fa-90b4-82467b270faa"),
                            Separator = false,
                            To = "/car-park/campaign-management",
                            Type = "LIST",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("d9c64711-9d19-4fc0-bb4a-75129dd552bd"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 808,
                            Header = "Self Redemption Record",
                            IsActive = true,
                            Label = "Self Redemption Record",
                            PTID = new Guid("d9c64711-9d19-4fc0-bb4a-75129dd552bd"),
                            ParentId = new Guid("0885f38e-0f44-44fa-90b4-82467b270faa"),
                            Separator = false,
                            To = "/car-park/self-redemption-record",
                            Type = "LIST",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("1a6d14da-6c8f-4962-a445-ef0e8e0c6524"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 809,
                            Header = "Self Redemption Detail",
                            IsActive = true,
                            Label = "Self Redemption Detail",
                            PTID = new Guid("11d5f8ea-5b35-41e0-bc61-97ff9969ed64"),
                            ParentId = new Guid("0885f38e-0f44-44fa-90b4-82467b270faa"),
                            Separator = false,
                            To = "/car-park/self-redemption-record/show/[id]",
                            Type = "EDIT",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("7f7eb8ad-18aa-49f7-9f0d-5f272cb26cb1"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 900,
                            IsActive = true,
                            Label = "",
                            Separator = false,
                            Type = "GROUP",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("2c43fd62-d1d1-4100-a04e-7f08b0046809"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 901,
                            Header = "Art & Culture",
                            IconName = "SvgPaint",
                            IsActive = true,
                            Label = "Art & Culture",
                            PTID = new Guid("c294084f-fd98-48db-ba61-a4daf84cf44b"),
                            ParentId = new Guid("7f7eb8ad-18aa-49f7-9f0d-5f272cb26cb1"),
                            Separator = false,
                            Type = "GROUP",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("d8f12f83-60d0-4d81-ab79-39edd94cad82"),
                            Breadcrumb = "[\"Art & Culture\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 902,
                            IsActive = true,
                            Label = "Landing Page",
                            PTID = new Guid("96ba4acf-1c97-4220-b2ef-6eb655a30a38"),
                            ParentId = new Guid("2c43fd62-d1d1-4100-a04e-7f08b0046809"),
                            Separator = false,
                            To = "/art-and-culture/landing",
                            Type = "LIST",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("efe3a53a-92a7-452e-a541-793782a805c2"),
                            Breadcrumb = "[\"Art & Culture\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 903,
                            IsActive = true,
                            Label = "Art & Culture Category",
                            PTID = new Guid("fec95e97-8767-4139-909b-2cc52c800501"),
                            ParentId = new Guid("2c43fd62-d1d1-4100-a04e-7f08b0046809"),
                            Separator = false,
                            To = "/art-and-culture/art-c",
                            Type = "LIST",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("482f7f4d-aac8-4ef2-90a3-c7178852499f"),
                            Breadcrumb = "[\"Art & Culture\", \"Art+C\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 904,
                            IsActive = true,
                            Label = "Create Art & Culture Category",
                            PTID = new Guid("482f7f4d-aac8-4ef2-90a3-c7178852499f"),
                            ParentId = new Guid("efe3a53a-92a7-452e-a541-793782a805c2"),
                            Separator = false,
                            To = "/art-and-culture/art-c/create",
                            Type = "CREATE",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("15aaa462-e484-4ca4-b355-5b5440f5eef8"),
                            Breadcrumb = "[\"Art & Culture\", \"Art+C\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 905,
                            IsActive = true,
                            Label = "Edit Art & Culture Category",
                            PTID = new Guid("6eb76e1a-b5ba-4a4d-971b-c753c9ee0dd2"),
                            ParentId = new Guid("efe3a53a-92a7-452e-a541-793782a805c2"),
                            Separator = false,
                            To = "/art-and-culture/art-c/edit/:id",
                            Type = "EDIT",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("3d147124-ac5d-42a1-b1e0-7e3a531bbe8b"),
                            Breadcrumb = "[\"Art & Culture\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 906,
                            IsActive = true,
                            Label = "Program",
                            PTID = new Guid("3d147124-ac5d-42a1-b1e0-7e3a531bbe8b"),
                            ParentId = new Guid("2c43fd62-d1d1-4100-a04e-7f08b0046809"),
                            Separator = false,
                            To = "/art-and-culture/programs",
                            Type = "LIST",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("345719dc-c6df-4d65-8a82-752273b9864b"),
                            Breadcrumb = "[\"Art & Culture\", \"Program\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 907,
                            IsActive = true,
                            Label = "Create Program",
                            PTID = new Guid("345719dc-c6df-4d65-8a82-752273b9864b"),
                            ParentId = new Guid("3d147124-ac5d-42a1-b1e0-7e3a531bbe8b"),
                            Separator = false,
                            To = "/art-and-culture/programs/create",
                            Type = "CREATE",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("7bfa25e4-7d0f-4fa2-81f4-d464e0888cae"),
                            Breadcrumb = "[\"Art & Culture\", \"Program\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 908,
                            IsActive = true,
                            Label = "Edit Program",
                            PTID = new Guid("7bfa25e4-7d0f-4fa2-81f4-d464e0888cae"),
                            ParentId = new Guid("3d147124-ac5d-42a1-b1e0-7e3a531bbe8b"),
                            Separator = false,
                            To = "/art-and-culture/programs/edit/:id",
                            Type = "EDIT",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("e63e87c3-9ab2-4d21-9b0b-435ce7ca3206"),
                            Breadcrumb = "[\"Art & Culture\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 909,
                            IsActive = true,
                            Label = "Add-On",
                            PTID = new Guid("e63e87c3-9ab2-4d21-9b0b-435ce7ca3206"),
                            ParentId = new Guid("2c43fd62-d1d1-4100-a04e-7f08b0046809"),
                            Separator = false,
                            To = "/art-and-culture/add-on",
                            Type = "LIST",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("b28c71e1-ac54-4706-8b9e-e435139a8ea3"),
                            Breadcrumb = "[\"Art & Culture\", \"Add-On\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 910,
                            IsActive = true,
                            Label = "Create Add-On",
                            PTID = new Guid("b28c71e1-ac54-4706-8b9e-e435139a8ea3"),
                            ParentId = new Guid("e63e87c3-9ab2-4d21-9b0b-435ce7ca3206"),
                            Separator = false,
                            To = "/art-and-culture/add-on/create",
                            Type = "CREATE",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("4411d520-34ac-4f32-9275-5158b3d14d3f"),
                            Breadcrumb = "[\"Art & Culture\", \"Add-On\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 911,
                            IsActive = true,
                            Label = "Edit Add-On",
                            PTID = new Guid("4411d520-34ac-4f32-9275-5158b3d14d3f"),
                            ParentId = new Guid("e63e87c3-9ab2-4d21-9b0b-435ce7ca3206"),
                            Separator = false,
                            To = "/art-and-culture/add-on/edit/:id",
                            Type = "EDIT",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("ffd40f99-f1c4-4e6e-b2b8-5cd9d6c6fccc"),
                            Breadcrumb = "[\"Art & Culture\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 912,
                            IsActive = true,
                            Label = "Playlist",
                            PTID = new Guid("ffd40f99-f1c4-4e6e-b2b8-5cd9d6c6fccc"),
                            ParentId = new Guid("2c43fd62-d1d1-4100-a04e-7f08b0046809"),
                            Separator = false,
                            To = "/art-and-culture/playlist",
                            Type = "LIST",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("de9a81e1-3454-4570-aa6b-ca9cae6545d1"),
                            Breadcrumb = "[\"Art & Culture\", \"Playlist\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 913,
                            IsActive = true,
                            Label = "Create Playlist",
                            PTID = new Guid("de9a81e1-3454-4570-aa6b-ca9cae6545d1"),
                            ParentId = new Guid("ffd40f99-f1c4-4e6e-b2b8-5cd9d6c6fccc"),
                            Separator = false,
                            To = "/art-and-culture/playlist/create",
                            Type = "CREATE",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("f270445f-018e-4f68-b9f9-b8b10e7350fe"),
                            Breadcrumb = "[\"Art & Culture\", \"Playlist\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 914,
                            IsActive = true,
                            Label = "Edit Playlist",
                            PTID = new Guid("f270445f-018e-4f68-b9f9-b8b10e7350fe"),
                            ParentId = new Guid("ffd40f99-f1c4-4e6e-b2b8-5cd9d6c6fccc"),
                            Separator = false,
                            To = "/art-and-culture/playlist/edit/:id",
                            Type = "EDIT",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("4d163844-5319-4a18-ab91-3538c6bbcb29"),
                            Breadcrumb = "[\"Art & Culture\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 915,
                            IsActive = true,
                            Label = "Partners",
                            PTID = new Guid("9bdf8ca3-b588-410a-8284-db61ff581256"),
                            ParentId = new Guid("2c43fd62-d1d1-4100-a04e-7f08b0046809"),
                            Separator = false,
                            To = "/art-and-culture/partners",
                            Type = "LIST",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("cb77ab47-4d4f-453a-91e1-a42fb2d9a20e"),
                            Breadcrumb = "[\"Art & Culture\", \"Partners\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 916,
                            IsActive = true,
                            Label = "Create Partners",
                            PTID = new Guid("5018e9ef-80e7-480a-9afc-c0234b7dc776"),
                            ParentId = new Guid("4d163844-5319-4a18-ab91-3538c6bbcb29"),
                            Separator = false,
                            To = "/art-and-culture/partners/create",
                            Type = "CREATE",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("8e3379a0-fa55-48a0-a873-19726a50f003"),
                            Breadcrumb = "[\"Art & Culture\", \"Partners\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 917,
                            IsActive = true,
                            Label = "Edit Partners",
                            PTID = new Guid("6a3e6352-94e5-4f6b-b165-0959e00a4dec"),
                            ParentId = new Guid("4d163844-5319-4a18-ab91-3538c6bbcb29"),
                            Separator = false,
                            To = "/art-and-culture/partners/edit/:id",
                            Type = "EDIT",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("a74ad063-a576-4834-bf3b-f7fba194dd81"),
                            Breadcrumb = "[\"Art & Culture\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 918,
                            IsActive = true,
                            Label = "Faqs",
                            PTID = new Guid("28a8193f-a616-48ca-ac04-b421da2111d1"),
                            ParentId = new Guid("2c43fd62-d1d1-4100-a04e-7f08b0046809"),
                            Separator = false,
                            To = "/art-and-culture/faqs",
                            Type = "LIST",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("9f66e2a4-fe19-42a9-a98f-65b2ebce2856"),
                            Breadcrumb = "[\"Art & Culture\", \"Faqs\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 919,
                            IsActive = true,
                            Label = "Create Faqs",
                            PTID = new Guid("37ea6ba3-8622-4884-be61-d665ded8c6ae"),
                            ParentId = new Guid("a74ad063-a576-4834-bf3b-f7fba194dd81"),
                            Separator = false,
                            To = "/art-and-culture/faqs/create",
                            Type = "CREATE",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("d5ffc30d-aeb4-4b08-bb4b-4b8e29b7a4a9"),
                            Breadcrumb = "[\"Art & Culture\", \"Faqs\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 920,
                            IsActive = true,
                            Label = "Edit Faqs",
                            PTID = new Guid("d25bdc92-1a9b-4222-b07d-b9d32b40678d"),
                            ParentId = new Guid("a74ad063-a576-4834-bf3b-f7fba194dd81"),
                            Separator = false,
                            To = "/art-and-culture/faqs/edit/:id",
                            Type = "EDIT",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("291f47ff-2783-48cc-a7e1-6242bcb26d2a"),
                            Breadcrumb = "[\"Art & Culture\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 921,
                            IsActive = true,
                            Label = "Order Faqs",
                            PTID = new Guid("32efd3a8-0955-49e4-ad41-2dbeef20e757"),
                            ParentId = new Guid("a74ad063-a576-4834-bf3b-f7fba194dd81"),
                            Separator = false,
                            To = "/art-and-culture/faqs/order",
                            Type = "EDIT",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("2e8b45cb-6288-4744-9231-f92527bfb476"),
                            Breadcrumb = "[\"Art & Culture\", \"Booking Settings\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 922,
                            IsActive = true,
                            Label = "Create Booking Setting",
                            PTID = new Guid("d5f9a1c3-d5a0-4231-b04b-e4dfe9033b85"),
                            ParentId = new Guid("2c43fd62-d1d1-4100-a04e-7f08b0046809"),
                            Separator = false,
                            To = "/art-and-culture/booking/create-setting",
                            Type = "CREATE",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("a3cec3e0-5e22-48d4-b149-bd6a50d6ce58"),
                            Breadcrumb = "[\"Art & Culture\", \"Booking Settings\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 923,
                            IsActive = true,
                            Label = "Edit Booking Setting",
                            PTID = new Guid("44c968b5-3570-4167-8837-1e34c0018f29"),
                            ParentId = new Guid("2c43fd62-d1d1-4100-a04e-7f08b0046809"),
                            Separator = false,
                            To = "/art-and-culture/booking/edit-setting",
                            Type = "EDIT",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("65de772d-7c34-4855-83c3-2b29786ed9ba"),
                            Breadcrumb = "[\"Art & Culture\", \"Booking History\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 924,
                            IsActive = true,
                            Label = "Booking History",
                            PTID = new Guid("c416a919-c795-42f9-a733-a84e63a6b8c4"),
                            ParentId = new Guid("2c43fd62-d1d1-4100-a04e-7f08b0046809"),
                            Separator = false,
                            To = "/art-and-culture/booking/show-history",
                            Type = "LIST",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("a7e4303b-40bc-492b-8cfd-951db9403628"),
                            Breadcrumb = "[\"Art & Culture\", \"Booking Status\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 925,
                            IsActive = true,
                            Label = "Booking Status",
                            PTID = new Guid("9b3ab157-e0b3-4bdb-9aba-1ad99a23a059"),
                            ParentId = new Guid("2c43fd62-d1d1-4100-a04e-7f08b0046809"),
                            Separator = false,
                            To = "/art-and-culture/booking/manage-status",
                            Type = "LIST",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("5622623f-e8b2-4d5f-9d8d-0e9413ada6d4"),
                            Breadcrumb = "[\"Art & Culture\", \"Booking Status\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 926,
                            IsActive = true,
                            Label = "Edit Booking Status",
                            PTID = new Guid("4dcc5462-ef19-4569-8231-faf1725c1f99"),
                            ParentId = new Guid("a7e4303b-40bc-492b-8cfd-951db9403628"),
                            Separator = false,
                            To = "/art-and-culture/booking/manage-status/:id",
                            Type = "EDIT",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("9a2da925-5c65-4d18-a60d-371d8f712b9d"),
                            Breadcrumb = "[\"Art & Culture\", \"Ticket Scanner\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 927,
                            IsActive = true,
                            Label = "Ticket Scanner",
                            PTID = new Guid("812edf62-3850-46e4-bef5-840cb2823816"),
                            ParentId = new Guid("2c43fd62-d1d1-4100-a04e-7f08b0046809"),
                            Separator = false,
                            To = "/art-and-culture/booking/ticket-scanner",
                            Type = "EDIT",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("3fab705d-2e74-47d3-8f20-70378dcb1f38"),
                            Breadcrumb = "[\"Art & Culture\", \"Reset Ticket\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 928,
                            IsActive = true,
                            Label = "Reset Ticket",
                            PTID = new Guid("780e0999-85b0-4b54-b433-918c8ef0298a"),
                            ParentId = new Guid("9a2da925-5c65-4d18-a60d-371d8f712b9d"),
                            Separator = false,
                            To = "/art-and-culture/booking/reset-ticket/:id",
                            Type = "EDIT",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("1c8d8a4f-23f3-4c6c-bb10-948c6e14dc09"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 1000,
                            IsActive = true,
                            Label = "",
                            Separator = false,
                            Type = "GROUP",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("eac1e712-1f6c-4b20-bf47-fdb593c69b36"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 1001,
                            IconName = "SvgSustainability",
                            IsActive = true,
                            Label = "Sustainability",
                            PTID = new Guid("8a2c6484-2f5a-4b84-926a-3b8a5f1a3d12"),
                            ParentId = new Guid("1c8d8a4f-23f3-4c6c-bb10-948c6e14dc09"),
                            Separator = false,
                            Type = "EDIT",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("366e47bb-895a-4157-8d2d-d474fcfcbed6"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 1005,
                            IsActive = true,
                            Label = "Banner Management",
                            PTID = new Guid("92b60d21-5b8f-43a8-9827-6e92c5c3123a"),
                            ParentId = new Guid("eac1e712-1f6c-4b20-bf47-fdb593c69b36"),
                            Separator = false,
                            To = "/sustainability/banner",
                            Type = "LIST",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("6103a7fc-8362-4daf-9d43-ec8c9b39813e"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 1002,
                            IsActive = true,
                            Label = "PR Banner",
                            PTID = new Guid("c7b85f14-e7a3-4d8b-9441-77b8d63f4a29"),
                            ParentId = new Guid("eac1e712-1f6c-4b20-bf47-fdb593c69b36"),
                            Separator = false,
                            To = "/sustainability/prbanner",
                            Type = "LIST",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("5ae35f75-2b89-4ae3-bb85-c3e4b85f7627"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 1009,
                            IsActive = true,
                            Label = "Content Management",
                            PTID = new Guid("f2b67e7c-59f2-4426-812a-678c6d1e3e93"),
                            ParentId = new Guid("eac1e712-1f6c-4b20-bf47-fdb593c69b36"),
                            Separator = false,
                            To = "/sustainability/all",
                            Type = "LIST",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("d3e796c4-54db-4cad-9d15-ebc3d7759dcf"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 1006,
                            IsActive = true,
                            Label = "Digital Library",
                            PTID = new Guid("a4b2394f-2c7a-4b34-b80e-2d1b6a9f1a3c"),
                            ParentId = new Guid("eac1e712-1f6c-4b20-bf47-fdb593c69b36"),
                            Separator = false,
                            To = "/sustainability/library",
                            Type = "LIST",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("b38bd9d0-d315-4bfd-b8c1-c23f38265587"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 1003,
                            IsActive = true,
                            Label = "Create PR Banner",
                            PTID = new Guid("2d1a20dd-df64-4e57-a3ba-5e731534d461"),
                            ParentId = new Guid("6103a7fc-8362-4daf-9d43-ec8c9b39813e"),
                            Separator = false,
                            To = "/sustainability/prbanner/create",
                            Type = "CREATE",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("be549187-a15c-4951-a983-a37a64c195b3"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 1004,
                            IsActive = true,
                            Label = "Edit PR Banner",
                            PTID = new Guid("efa8cbe7-4d54-4bfb-986f-4b7c3c6e7d29"),
                            ParentId = new Guid("6103a7fc-8362-4daf-9d43-ec8c9b39813e"),
                            Separator = false,
                            To = "/sustainability/prbanner/edit/:id",
                            Type = "EDIT",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("169891fe-97c7-4181-83e2-1f2045f66f14"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 1010,
                            IsActive = true,
                            Label = "Create Content Management",
                            PTID = new Guid("b5a7a499-1c12-4c99-9b4a-d5bc882d4bda"),
                            ParentId = new Guid("5ae35f75-2b89-4ae3-bb85-c3e4b85f7627"),
                            Separator = false,
                            To = "/sustainability/all/create",
                            Type = "CREATE",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("ff3680b5-6fc2-4453-af50-733197029825"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 1011,
                            IsActive = true,
                            Label = "Edit Content Management",
                            PTID = new Guid("0e9a80f5-2394-49c3-bf0c-7a8e27b2c4e2"),
                            ParentId = new Guid("5ae35f75-2b89-4ae3-bb85-c3e4b85f7627"),
                            Separator = false,
                            To = "/sustainability/all/edit/:id",
                            Type = "EDIT",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("58aa403f-72d4-41a5-9737-41a686e107bb"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 1012,
                            IsActive = true,
                            Label = "Sub Content Management",
                            PTID = new Guid("21454bdb-2a44-4b39-8df5-cdb703d33180"),
                            ParentId = new Guid("eac1e712-1f6c-4b20-bf47-fdb593c69b36"),
                            Separator = false,
                            To = "/sustainability/all/show/:id",
                            Type = "LIST",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("5b0a2540-56d0-416d-a346-cca2ca96f828"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 1007,
                            IsActive = true,
                            Label = "Create Digital Library",
                            PTID = new Guid("e4972901-3f9c-4b38-aafb-234d43c9d6fc"),
                            ParentId = new Guid("d3e796c4-54db-4cad-9d15-ebc3d7759dcf"),
                            Separator = false,
                            To = "/sustainability/library/create",
                            Type = "CREATE",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("db52ec33-64d6-43d9-a13b-38cf09c1792f"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 1008,
                            IsActive = true,
                            Label = "Edit Digital Library",
                            PTID = new Guid("b7d25f46-5e8a-4db6-ae8c-7f9b5c7d4e1e"),
                            ParentId = new Guid("d3e796c4-54db-4cad-9d15-ebc3d7759dcf"),
                            Separator = false,
                            To = "/sustainability/library/edit/:id",
                            Type = "EDIT",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("55a37615-fab7-49d9-a191-40eaf5f308a2"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 1100,
                            IsActive = true,
                            Label = "",
                            Separator = false,
                            Type = "GROUP",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("9674aef9-f1af-46f5-8457-f920cfdb1600"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 1101,
                            IconName = "SvgContent",
                            IsActive = true,
                            Label = "Guard Tour Config",
                            PTID = new Guid("f1e42cc1-0072-4bf3-b583-300257693ceb"),
                            ParentId = new Guid("55a37615-fab7-49d9-a191-40eaf5f308a2"),
                            Separator = false,
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("29eb488e-e405-416a-a492-b2b433cc2778"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 1102,
                            IsActive = true,
                            Label = "Action Management",
                            PTID = new Guid("87359e39-78e2-4c5b-b8a4-1f907b2859ec"),
                            ParentId = new Guid("9674aef9-f1af-46f5-8457-f920cfdb1600"),
                            Separator = false,
                            To = "/guardtour/action-management",
                            Type = "LIST",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("67221236-b4fb-407d-9fa5-79609e835858"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 1103,
                            IsActive = true,
                            Label = "Action Management",
                            PTID = new Guid("87359e39-78e2-4c5b-b8a4-1f907b2859ec"),
                            ParentId = new Guid("29eb488e-e405-416a-a492-b2b433cc2778"),
                            Separator = false,
                            To = "/guardtour/action-management/create",
                            Type = "CREATE",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("77bb48c9-5609-436b-a574-cb71ba288e2a"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 1104,
                            IsActive = true,
                            Label = "Action Management",
                            PTID = new Guid("87359e39-78e2-4c5b-b8a4-1f907b2859ec"),
                            ParentId = new Guid("29eb488e-e405-416a-a492-b2b433cc2778"),
                            Separator = false,
                            To = "/guardtour/action-management/edit/:id",
                            Type = "EDIT",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("0b033360-e296-41e9-a572-b57abd9fa98b"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 1105,
                            IsActive = true,
                            Label = "Task Management",
                            PTID = new Guid("3148fe4b-2dc5-43c0-a5a1-51b54c29d300"),
                            ParentId = new Guid("9674aef9-f1af-46f5-8457-f920cfdb1600"),
                            Separator = false,
                            To = "/guardtour/task-management",
                            Type = "LIST",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("6089cedc-519e-40c8-a5d0-cf868307e0e7"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 1106,
                            IsActive = true,
                            Label = "Task Management",
                            PTID = new Guid("3148fe4b-2dc5-43c0-a5a1-51b54c29d300"),
                            ParentId = new Guid("0b033360-e296-41e9-a572-b57abd9fa98b"),
                            Separator = false,
                            To = "/guardtour/task-management/create",
                            Type = "CREATE",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("c70c8ed6-9ba2-4fca-a1dc-88dea997f280"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 1107,
                            IsActive = true,
                            Label = "Task Management",
                            PTID = new Guid("3148fe4b-2dc5-43c0-a5a1-51b54c29d300"),
                            ParentId = new Guid("0b033360-e296-41e9-a572-b57abd9fa98b"),
                            Separator = false,
                            To = "/guardtour/task-management/edit/:id",
                            Type = "EDIT",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("92fc160b-46ce-4c83-82c0-e047cd886eda"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 1108,
                            IsActive = true,
                            Label = "Schedule Plan",
                            PTID = new Guid("db9bc3e3-dd23-4b75-bfe0-bae28f165fc9"),
                            ParentId = new Guid("9674aef9-f1af-46f5-8457-f920cfdb1600"),
                            Separator = false,
                            To = "/guardtour/scheduleplan",
                            Type = "LIST",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("f0b65d94-67f7-4429-89dd-def0afa20e5e"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 1109,
                            IsActive = true,
                            Label = "Schedule Plan",
                            PTID = new Guid("db9bc3e3-dd23-4b75-bfe0-bae28f165fc9"),
                            ParentId = new Guid("92fc160b-46ce-4c83-82c0-e047cd886eda"),
                            Separator = false,
                            To = "/guardtour/scheduleplan/create",
                            Type = "CREATE",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("115a8009-9e01-411e-8894-0f8e511924a0"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 1110,
                            IsActive = true,
                            Label = "Schedule Plan",
                            PTID = new Guid("db9bc3e3-dd23-4b75-bfe0-bae28f165fc9"),
                            ParentId = new Guid("92fc160b-46ce-4c83-82c0-e047cd886eda"),
                            Separator = false,
                            To = "/guardtour/scheduleplan/edit/:id",
                            Type = "EDIT",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("1881843c-404b-4fc6-a55b-8923fa409a02"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 1111,
                            IsActive = true,
                            Label = "Activity Procedures",
                            PTID = new Guid("08685195-a06b-42f1-a307-37a51c8aa80f"),
                            ParentId = new Guid("9674aef9-f1af-46f5-8457-f920cfdb1600"),
                            Separator = false,
                            To = "/guardtour/activityprocedures",
                            Type = "LIST",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("8dac7d2f-4761-4e57-8b13-5d9b6cab52ec"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 1112,
                            IsActive = true,
                            Label = "Activity Procedures",
                            PTID = new Guid("08685195-a06b-42f1-a307-37a51c8aa80f"),
                            ParentId = new Guid("1881843c-404b-4fc6-a55b-8923fa409a02"),
                            Separator = false,
                            To = "/guardtour/activityprocedures/create",
                            Type = "CREATE",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("2e48799b-9b5c-482e-8edb-37d419f16793"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 1113,
                            IsActive = true,
                            Label = "Activity Procedures",
                            PTID = new Guid("08685195-a06b-42f1-a307-37a51c8aa80f"),
                            ParentId = new Guid("1881843c-404b-4fc6-a55b-8923fa409a02"),
                            Separator = false,
                            To = "/guardtour/activityprocedures/edit/:id",
                            Type = "EDIT",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("8b3c633c-eb6b-4165-b073-f15142089e07"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 1200,
                            IsActive = true,
                            Label = "",
                            Separator = false,
                            Type = "GROUP",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("70cf0c58-b435-4b3e-91e5-d1b2ccb217bf"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 1201,
                            Header = "Operation app",
                            IconName = "SvgOfficeBlock",
                            IsActive = true,
                            Label = "Operation app",
                            PTID = new Guid("df4f4b00-86e8-4504-b733-39484060a8f5"),
                            ParentId = new Guid("8b3c633c-eb6b-4165-b073-f15142089e07"),
                            Separator = false,
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("01706d92-128e-40d5-98a3-e54f1e66b810"),
                            Breadcrumb = "[\"Operations Onboarding\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 1202,
                            Header = "Operations Onboarding",
                            IsActive = true,
                            Label = "Operations Onboarding",
                            PTID = new Guid("739432c3-02f7-4d86-9adf-2dea1e72b713"),
                            ParentId = new Guid("70cf0c58-b435-4b3e-91e5-d1b2ccb217bf"),
                            Separator = false,
                            To = "/opsapp-register",
                            Type = "LIST",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("67b4b518-80f7-449c-9f17-51e989f5ab90"),
                            Breadcrumb = "[\"Operations Onboarding\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 1203,
                            Header = "Operations Onboarding",
                            IsActive = true,
                            Label = "Operations Onboarding",
                            PTID = new Guid("a151df3a-aa4b-4489-a879-7be2f80e0e40"),
                            ParentId = new Guid("01706d92-128e-40d5-98a3-e54f1e66b810"),
                            Separator = false,
                            To = "/opsapp-register/create",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("cebff353-c600-4ed9-ac4d-e6d6765fc6f0"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 1205,
                            IsActive = true,
                            Label = "",
                            Separator = false,
                            Type = "GROUP",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("70cf0c58-b435-4b3e-91e5-d1b2ccb217ba"),
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 1206,
                            Header = "UsageMonitoring",
                            IconName = "SvgOfficeBlock",
                            IsActive = true,
                            Label = "UsageMonitoring",
                            PTID = new Guid("07fff0ba-3c50-43b8-a269-cef9389b254c"),
                            ParentId = new Guid("cebff353-c600-4ed9-ac4d-e6d6765fc6f0"),
                            Separator = false,
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("01706d92-128e-40d5-98a3-e54f1e66b813"),
                            Breadcrumb = "[\"UsageMonitoring\",\"UsageMonitoring Summary\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 1207,
                            Header = "UsageMonitoring Summary",
                            IsActive = true,
                            Label = "UsageMonitoring Summary",
                            PTID = new Guid("cc05a841-80cd-49e2-b342-e16fd72b3d22"),
                            ParentId = new Guid("70cf0c58-b435-4b3e-91e5-d1b2ccb217ba"),
                            Separator = false,
                            To = "/usagemonitoring",
                            Type = "LIST",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("01706d92-128e-40d5-98a3-e54f1e66b814"),
                            Breadcrumb = "[\"UsageMonitoring\",\"Staff\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 1208,
                            Header = "Staff",
                            IsActive = true,
                            Label = "Staff",
                            PTID = new Guid("7a0d5c2d-04dd-40a1-b3ca-240da580da5f"),
                            ParentId = new Guid("70cf0c58-b435-4b3e-91e5-d1b2ccb217ba"),
                            Separator = false,
                            To = "/usagemonitoring/staff",
                            Type = "LIST",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("01706d92-128e-40d5-98a3-e54f1e66b815"),
                            Breadcrumb = "[\"Usage Monitoring\",\"Roster\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 1209,
                            Header = "Roster",
                            IsActive = true,
                            Label = "Roster",
                            PTID = new Guid("f9e1a00c-534a-4644-a9cb-a9ca35940838"),
                            ParentId = new Guid("70cf0c58-b435-4b3e-91e5-d1b2ccb217ba"),
                            Separator = false,
                            To = "/usagemonitoring/roster",
                            Type = "LIST",
                            Visible = true
                        },
                        new
                        {
                            Id = new Guid("01706d92-128e-40d5-98a3-e54f1e66b816"),
                            Breadcrumb = "[\"Usage Monitoring\",\"UsageMonitoring Summary\",\"Staff By Componant\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 1210,
                            Header = "Staff By Componant",
                            IsActive = true,
                            Label = "staff-by-compopnant",
                            PTID = new Guid("f9e1a00c-534a-4644-a9cb-a9ca35940838"),
                            ParentId = new Guid("01706d92-128e-40d5-98a3-e54f1e66b813"),
                            Separator = false,
                            To = "/usagemonitoring/staff-by-componant",
                            Visible = false
                        },
                        new
                        {
                            Id = new Guid("01706d92-128e-40d5-98a3-e54f1e66b817"),
                            Breadcrumb = "[\"Usage Monitoring\",\"Usage Monitoring Summary\",\"All Staff\"]",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            Disabled = false,
                            DisplayOrder = 1211,
                            Header = "All Staff",
                            IsActive = true,
                            Label = "all-staff",
                            PTID = new Guid("f9e1a00c-534a-4644-a9cb-a9ca35940838"),
                            ParentId = new Guid("01706d92-128e-40d5-98a3-e54f1e66b813"),
                            Separator = false,
                            To = "/usagemonitoring/component",
                            Visible = false
                        });
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.mtPrivilege", b =>
                {
                    b.Property<Guid>("PID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CSID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("3075169a-bb4c-463f-a602-dac99228ceac"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.HasKey("PID");

                    b.ToTable("mtPrivilege");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.mtPrivilegeItem", b =>
                {
                    b.Property<Guid>("PTID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<Guid>("PID")
                        .HasColumnType("uuid");

                    b.HasKey("PTID");

                    b.HasIndex("PID");

                    b.ToTable("mtPrivilegeItem");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.mtSREvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name_en")
                        .HasMaxLength(255)
                        .HasColumnType("character varying");

                    b.Property<string>("Name_th")
                        .HasMaxLength(255)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("mtSREvent");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.mtSRProblem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name_en")
                        .HasMaxLength(255)
                        .HasColumnType("character varying");

                    b.Property<string>("Name_th")
                        .HasMaxLength(255)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("mtSRProblem");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.mtShift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("AllowCheckInEnd")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("AllowCheckInStart")
                        .HasColumnType("interval");

                    b.Property<Guid?>("CSID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("3075169a-bb4c-463f-a602-dac99228ceac"));

                    b.Property<TimeSpan>("CheckoutTimeEnd")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("interval");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval");

                    b.Property<int>("isOverNight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("mtShift");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.mtShiftManPowerRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BaseLocation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying");

                    b.Property<Guid?>("CSID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("3075169a-bb4c-463f-a602-dac99228ceac"));

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Demand")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndDateTime")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying");

                    b.Property<string>("Shift")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("StartDateTime")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("mtShiftManPowerRequest");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.mtStaff", b =>
                {
                    b.Property<Guid>("Sfid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CSID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("3075169a-bb4c-463f-a602-dac99228ceac"));

                    b.Property<string>("Company")
                        .HasMaxLength(255)
                        .HasColumnType("character varying");

                    b.Property<string>("Component")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("KeyCloakUserId")
                        .HasColumnType("character varying");

                    b.Property<string>("Location")
                        .HasColumnType("character varying");

                    b.Property<bool>("MustUseOpsApp")
                        .HasColumnType("boolean");

                    b.Property<string>("Position")
                        .HasMaxLength(255)
                        .HasColumnType("character varying");

                    b.Property<int?>("Seq")
                        .HasColumnType("integer");

                    b.Property<string>("StaffName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("isDelete")
                        .HasColumnType("integer");

                    b.HasKey("Sfid");

                    b.ToTable("mtStaff");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.taFCMDevice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AppLanguest")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AppVersion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("CSID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("3075169a-bb4c-463f-a602-dac99228ceac"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FcmToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.ToTable("FCMDevice");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.taMember", b =>
                {
                    b.Property<Guid>("MID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DataJson")
                        .HasColumnType("character varying");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<int>("FailAttempt")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("KeyCloakUserId")
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("LastLoginDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("LastLogoutDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<int?>("StaffId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("MID");

                    b.ToTable("taMember");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ActionType")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CSID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("3075169a-bb4c-463f-a602-dac99228ceac"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying");

                    b.Property<int>("IsRequired")
                        .HasColumnType("integer");

                    b.Property<string>("MetaData")
                        .HasColumnType("json");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ActionType");

                    b.ToTable("trAction");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trActivityProcedure", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<Guid>("CSID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("3075169a-bb4c-463f-a602-dac99228ceac"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<string>("SubtaskActions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Code", "CSID");

                    b.HasIndex("LocationId");

                    b.ToTable("trActivityProcedure");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trAttendance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BaseLocation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying");

                    b.Property<Guid?>("CSID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("3075169a-bb4c-463f-a602-dac99228ceac"));

                    b.Property<DateTime?>("CheckInDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("CheckOutDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying");

                    b.Property<string>("DeviceKey")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying");

                    b.Property<string>("IdentifyDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IndentifyType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying");

                    b.Property<int>("LateTime")
                        .HasColumnType("integer");

                    b.Property<string>("MetaData")
                        .HasColumnType("json");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying");

                    b.Property<string>("Shift")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("trAttendance");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trCWOs", b =>
                {
                    b.Property<Guid>("CSID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("3075169a-bb4c-463f-a602-dac99228ceac"));

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("AckedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("AckedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("AcknowledgementSignature")
                        .HasColumnType("text");

                    b.Property<string>("AcknowledgementVerifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ActualCompletionDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ActualStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("AssetId")
                        .HasColumnType("integer");

                    b.Property<string>("ClientVerificationComment")
                        .HasColumnType("text");

                    b.Property<string>("ClientVerificationSignature")
                        .HasColumnType("text");

                    b.Property<string>("ClientVerificationSubmittedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ClientVerificationSubmittedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ClientVerifiedUser")
                        .HasColumnType("text");

                    b.Property<string>("ClosedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ClosedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ClosureComment")
                        .HasColumnType("text");

                    b.Property<string>("ClosureSignature")
                        .HasColumnType("text");

                    b.Property<string>("CompletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CompletionAckedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CompletionComment")
                        .HasColumnType("text");

                    b.Property<string>("CompletionSignature")
                        .HasColumnType("text");

                    b.Property<string>("CompletionVerifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CwoTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EstimatedCompletion")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("EstimatedTotalDuration")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsCancelled")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsPaused")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsPrevSupervisorRejected")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsPrevTechnicianRejected")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsReworkRequested")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsSynced")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsTaskCompletionConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsWorkingOffline")
                        .HasColumnType("boolean");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OperatorNote")
                        .HasColumnType("text");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<string>("PausedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("PausedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PausedReason")
                        .HasColumnType("text");

                    b.Property<string>("PrevRejectedSupervisorId")
                        .HasColumnType("text");

                    b.Property<string>("PrevRejectedTechnicianId")
                        .HasColumnType("text");

                    b.Property<int>("PriorityId")
                        .HasColumnType("integer");

                    b.Property<int>("ProblemTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("ReasonToRework")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RequestedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("RequesterId")
                        .HasColumnType("integer");

                    b.Property<string>("ResumedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ResumedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ReworkRequestedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ReworkRequestedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ServiceCategoryId")
                        .HasColumnType("integer");

                    b.Property<int?>("ServiceProviderId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SlaStartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("SlaTriggerPoint")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SlatoResolve")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("SlatoRespond")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("StatusId")
                        .HasColumnType("integer");

                    b.Property<string>("SupervisorAssignedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("SupervisorAssignedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SupervisorId")
                        .HasColumnType("text");

                    b.Property<int>("SyncStatus")
                        .HasColumnType("integer");

                    b.Property<int>("SyncUtcTs")
                        .HasColumnType("integer");

                    b.Property<string>("TaskCompletionConfirmedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("TaskCompletionConfirmedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TechnicianAssignedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("TechnicianAssignedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TechnicianId")
                        .HasColumnType("text");

                    b.Property<string>("WorkOfflineBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("WorkOfflineOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("CSID", "Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("SupervisorId");

                    b.HasIndex("TechnicianId");

                    b.ToTable("trCWOs");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trCases", b =>
                {
                    b.Property<Guid>("CSID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("3075169a-bb4c-463f-a602-dac99228ceac"));

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("CaseNo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("CaseTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("EquipmentTag")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("EventTypeCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("EventTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("ExternalRefNo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool?>("IsCritical")
                        .HasColumnType("boolean");

                    b.Property<string>("LocationCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.Property<string>("LocationName")
                        .HasColumnType("text");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PriorityLevelId")
                        .HasColumnType("integer");

                    b.Property<string>("PriorityText")
                        .HasColumnType("text");

                    b.Property<string>("Requester")
                        .HasColumnType("text");

                    b.Property<string>("ShortDesc")
                        .HasColumnType("text");

                    b.Property<int?>("SiteHandler")
                        .HasColumnType("integer");

                    b.Property<int?>("SlaConfigId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SlaDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("SlaFailed")
                        .HasColumnType("boolean");

                    b.Property<int?>("StatusCode")
                        .HasColumnType("integer");

                    b.Property<int>("SyncStatus")
                        .HasColumnType("integer");

                    b.Property<int>("SyncUtcTs")
                        .HasColumnType("integer");

                    b.Property<string>("Timestamp")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("CSID", "Id");

                    b.HasIndex("CaseNo");

                    b.HasIndex("CreatedOn")
                        .IsDescending();

                    b.HasIndex("StatusCode");

                    b.HasIndex("SyncStatus");

                    b.HasIndex("CreatedOn", "Id")
                        .IsDescending(true, false);

                    b.ToTable("trCases");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trInviteMember", b =>
                {
                    b.Property<Guid>("IMID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CSID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("3075169a-bb4c-463f-a602-dac99228ceac"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("InviteCode")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MID")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("IMID");

                    b.HasIndex("MID");

                    b.ToTable("trInviteMember");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trMarcomCMSExplore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CoverFileNameCN")
                        .HasColumnType("character varying");

                    b.Property<string>("CoverFileNameEN")
                        .HasColumnType("character varying");

                    b.Property<string>("CoverFileNameTH")
                        .HasColumnType("character varying");

                    b.Property<string>("CoverImageURLCN")
                        .HasColumnType("character varying");

                    b.Property<string>("CoverImageURLEN")
                        .HasColumnType("character varying");

                    b.Property<string>("CoverImageURLTH")
                        .HasColumnType("character varying");

                    b.Property<string>("CoverOriginalFileNameCN")
                        .HasColumnType("character varying");

                    b.Property<string>("CoverOriginalFileNameEN")
                        .HasColumnType("character varying");

                    b.Property<string>("CoverOriginalFileNameTH")
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("HeadFileNameCN")
                        .HasColumnType("character varying");

                    b.Property<string>("HeadFileNameEN")
                        .HasColumnType("character varying");

                    b.Property<string>("HeadFileNameTH")
                        .HasColumnType("character varying");

                    b.Property<string>("HeadImageURLCN")
                        .HasColumnType("character varying");

                    b.Property<string>("HeadImageURLEN")
                        .HasColumnType("character varying");

                    b.Property<string>("HeadImageURLTH")
                        .HasColumnType("character varying");

                    b.Property<string>("HeadOriginalFileNameCN")
                        .HasColumnType("character varying");

                    b.Property<string>("HeadOriginalFileNameEN")
                        .HasColumnType("character varying");

                    b.Property<string>("HeadOriginalFileNameTH")
                        .HasColumnType("character varying");

                    b.Property<string>("IntroduceCN")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying");

                    b.Property<string>("IntroduceEN")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying");

                    b.Property<string>("IntroduceTH")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsShowRelatedLink")
                        .HasColumnType("boolean");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("SubTitleRelatedCN")
                        .HasMaxLength(200)
                        .HasColumnType("character varying");

                    b.Property<string>("SubTitleRelatedEN")
                        .HasMaxLength(200)
                        .HasColumnType("character varying");

                    b.Property<string>("SubTitleRelatedTH")
                        .HasMaxLength(200)
                        .HasColumnType("character varying");

                    b.Property<string>("TitleCN")
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<string>("TitleRelatedCN")
                        .HasMaxLength(200)
                        .HasColumnType("character varying");

                    b.Property<string>("TitleRelatedEN")
                        .HasMaxLength(200)
                        .HasColumnType("character varying");

                    b.Property<string>("TitleRelatedTH")
                        .HasMaxLength(200)
                        .HasColumnType("character varying");

                    b.Property<string>("TitleTH")
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("trMarcomCMSExplore");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trMarcomCMSExploreContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContentId")
                        .HasColumnType("uuid");

                    b.Property<int>("ContentType")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FileName")
                        .HasColumnType("character varying");

                    b.Property<string>("ImageURL")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("OriginalFileName")
                        .HasColumnType("character varying");

                    b.Property<string>("Text")
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("YoutubeURL")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("trMarcomCMSExploreContent");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trMarcomCMSTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContentId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("trMarcomCMSTag");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trMarcomCMSWhatHappenCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CategoryNameCN")
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<string>("CategoryNameEn")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<string>("CategoryNameTH")
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("IntroduceCN")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying");

                    b.Property<string>("IntroduceEN")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying");

                    b.Property<string>("IntroduceTH")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsArtAndCulture")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("SystemType")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("trMarcomCMSWhatHappenCategory");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trMarcomCMSWhatHappenContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ContentType")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FileName")
                        .HasColumnType("character varying");

                    b.Property<string>("ImageURL")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("OriginalFileName")
                        .HasColumnType("character varying");

                    b.Property<Guid>("SubContentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("YoutubeURL")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("trMarcomCMSWhatHappenContent");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trMarcomCMSWhatHappenSub", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("ArtAndCultureInternalLinkType")
                        .HasColumnType("integer");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("CoverFileNameCN")
                        .HasColumnType("character varying");

                    b.Property<string>("CoverFileNameEN")
                        .HasColumnType("character varying");

                    b.Property<string>("CoverFileNameTH")
                        .HasColumnType("character varying");

                    b.Property<string>("CoverImageURLCN")
                        .HasColumnType("character varying");

                    b.Property<string>("CoverImageURLEN")
                        .HasColumnType("character varying");

                    b.Property<string>("CoverImageURLTH")
                        .HasColumnType("character varying");

                    b.Property<string>("CoverOriginalFileNameCN")
                        .HasColumnType("character varying");

                    b.Property<string>("CoverOriginalFileNameEN")
                        .HasColumnType("character varying");

                    b.Property<string>("CoverOriginalFileNameTH")
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DetailLink")
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("EventTimeEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EventTimeStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("HeadFileNameCN")
                        .HasColumnType("character varying");

                    b.Property<string>("HeadFileNameEN")
                        .HasColumnType("character varying");

                    b.Property<string>("HeadFileNameTH")
                        .HasColumnType("character varying");

                    b.Property<string>("HeadImageURLCN")
                        .HasColumnType("character varying");

                    b.Property<string>("HeadImageURLEN")
                        .HasColumnType("character varying");

                    b.Property<string>("HeadImageURLTH")
                        .HasColumnType("character varying");

                    b.Property<string>("HeadOriginalFileNameCN")
                        .HasColumnType("character varying");

                    b.Property<string>("HeadOriginalFileNameEN")
                        .HasColumnType("character varying");

                    b.Property<string>("HeadOriginalFileNameTH")
                        .HasColumnType("character varying");

                    b.Property<string>("IntroduceCN")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying");

                    b.Property<string>("IntroduceEN")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying");

                    b.Property<string>("IntroduceTH")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNotSpecify")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsShowRelatedLink")
                        .HasColumnType("boolean");

                    b.Property<string>("LocationCN")
                        .HasColumnType("character varying");

                    b.Property<string>("LocationEN")
                        .HasColumnType("character varying");

                    b.Property<string>("LocationTH")
                        .HasColumnType("character varying");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int?>("OrderPin")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ShowTimeEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ShowTimeStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SubTitleRelatedCN")
                        .HasMaxLength(200)
                        .HasColumnType("character varying");

                    b.Property<string>("SubTitleRelatedEN")
                        .HasMaxLength(200)
                        .HasColumnType("character varying");

                    b.Property<string>("SubTitleRelatedTH")
                        .HasMaxLength(200)
                        .HasColumnType("character varying");

                    b.Property<string>("TextImageCN")
                        .HasColumnType("text");

                    b.Property<string>("TextImageEN")
                        .HasColumnType("character varying");

                    b.Property<string>("TextImageTH")
                        .HasColumnType("text");

                    b.Property<string>("TitleCN")
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<string>("TitleRelatedCN")
                        .HasMaxLength(200)
                        .HasColumnType("character varying");

                    b.Property<string>("TitleRelatedEN")
                        .HasMaxLength(200)
                        .HasColumnType("character varying");

                    b.Property<string>("TitleRelatedTH")
                        .HasMaxLength(200)
                        .HasColumnType("character varying");

                    b.Property<string>("TitleTH")
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<int>("TypeLink")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("trMarcomCMSWhatHappenSub");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trMarcomConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ValueInt")
                        .HasColumnType("integer");

                    b.Property<string>("ValueString")
                        .HasMaxLength(250)
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("trMarcomConfig");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trMarcomPRBanner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BannerName")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FileNameCN")
                        .HasColumnType("character varying");

                    b.Property<string>("FileNameEN")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("FileNameTH")
                        .HasColumnType("character varying");

                    b.Property<string>("HeaderFileNameCN")
                        .HasColumnType("character varying");

                    b.Property<string>("HeaderFileNameEN")
                        .HasColumnType("character varying");

                    b.Property<string>("HeaderFileNameTH")
                        .HasColumnType("character varying");

                    b.Property<string>("HeaderImageURLCN")
                        .HasColumnType("character varying");

                    b.Property<string>("HeaderImageURLEN")
                        .HasColumnType("character varying");

                    b.Property<string>("HeaderImageURLTH")
                        .HasColumnType("character varying");

                    b.Property<string>("HeaderOriginalFileNameCN")
                        .HasColumnType("character varying");

                    b.Property<string>("HeaderOriginalFileNameEN")
                        .HasColumnType("character varying");

                    b.Property<string>("HeaderOriginalFileNameTH")
                        .HasColumnType("character varying");

                    b.Property<string>("ImageURLCN")
                        .HasColumnType("character varying");

                    b.Property<string>("ImageURLEN")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("ImageURLTH")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsImageCN")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsImageEN")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsImageTH")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNotSpecify")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsShowRelatedLink")
                        .HasColumnType("boolean");

                    b.Property<string>("LinkToURL")
                        .HasColumnType("character varying");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("OriginalFileNameCN")
                        .HasColumnType("character varying");

                    b.Property<string>("OriginalFileNameEN")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("OriginalFileNameTH")
                        .HasColumnType("character varying");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TextCN")
                        .HasColumnType("character varying");

                    b.Property<string>("TextEN")
                        .HasColumnType("character varying");

                    b.Property<string>("TextTH")
                        .HasColumnType("character varying");

                    b.Property<string>("TitleCN")
                        .HasColumnType("character varying");

                    b.Property<string>("TitleEN")
                        .HasColumnType("character varying");

                    b.Property<string>("TitleTH")
                        .HasColumnType("character varying");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("trMarcomPRBanner");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trMarcomSpecialEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("FileNameCN")
                        .HasColumnType("character varying");

                    b.Property<string>("FileNameEN")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("FileNameTH")
                        .HasColumnType("character varying");

                    b.Property<string>("ImageURLCN")
                        .HasColumnType("character varying");

                    b.Property<string>("ImageURLEN")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("ImageURLTH")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNotSpecify")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsShowDontShowAgain")
                        .HasColumnType("boolean");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("OriginalFileNameCN")
                        .HasColumnType("character varying");

                    b.Property<string>("OriginalFileNameEN")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("OriginalFileNameTH")
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("ShowTimeEndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ShowTimeStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("trMarcomSpecialEvent");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trMarcomSurvey", b =>
                {
                    b.Property<Guid>("MSID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BannerImage")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<string>("DurationUnit")
                        .HasColumnType("text");

                    b.Property<DateTime?>("FormDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("MSID");

                    b.ToTable("trMarcomSurvey");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trMarcomSurveyAnswer", b =>
                {
                    b.Property<Guid>("MSAID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("MSID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SubmitDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.Property<Guid?>("trMarcomSurveyMSID")
                        .HasColumnType("uuid");

                    b.HasKey("MSAID");

                    b.HasIndex("trMarcomSurveyMSID");

                    b.ToTable("trMarcomSurveyAnswer");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trMarcomSurveyAnswerDetail", b =>
                {
                    b.Property<Guid>("MSADID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("MSAID")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("trMarcomSurveyAnswerMSAID")
                        .HasColumnType("uuid");

                    b.HasKey("MSADID");

                    b.HasIndex("trMarcomSurveyAnswerMSAID");

                    b.ToTable("trMarcomSurveyAnswerDetail");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trMarcomSurveyQuestion", b =>
                {
                    b.Property<Guid>("MSQID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DataJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("MSQTID")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("trMarcomSurveySectionMSSID")
                        .HasColumnType("uuid");

                    b.HasKey("MSQID");

                    b.HasIndex("MSQTID");

                    b.HasIndex("trMarcomSurveySectionMSSID");

                    b.ToTable("trMarcomSurveyQuestion");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trMarcomSurveyQuestionSection", b =>
                {
                    b.Property<Guid>("MSQID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MSSID")
                        .HasColumnType("uuid");

                    b.HasKey("MSQID", "MSSID");

                    b.HasIndex("MSSID");

                    b.ToTable("trMarcomSurveyQuestionSection");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trMarcomSurveyQuestionType", b =>
                {
                    b.Property<Guid>("MSQID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("TypeConfig")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("MSQID");

                    b.ToTable("trMarcomSurveyQuestionType");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trMarcomSurveySection", b =>
                {
                    b.Property<Guid>("MSSID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BannerImage")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("trMarcomSurveyMSID")
                        .HasColumnType("uuid");

                    b.HasKey("MSSID");

                    b.HasIndex("trMarcomSurveyMSID");

                    b.ToTable("trMarcomSurveySection");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trMemberUAT", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("MetaData")
                        .HasColumnType("json");

                    b.HasKey("Id");

                    b.ToTable("trMemberUAT");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trPPMs", b =>
                {
                    b.Property<Guid>("CSID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("3075169a-bb4c-463f-a602-dac99228ceac"));

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("AckedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("AckedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("AcknowledgementSignature")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ActualCompletion")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ActualStart")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ChecklistId")
                        .HasColumnType("integer");

                    b.Property<string>("ClientVerificationComment")
                        .HasColumnType("text");

                    b.Property<string>("ClientVerificationSignature")
                        .HasColumnType("text");

                    b.Property<string>("ClientVerificationSubmittedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ClientVerificationSubmittedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ClientVerifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ClosedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ClosedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ClosureComment")
                        .HasColumnType("text");

                    b.Property<string>("ClosureSignature")
                        .HasColumnType("text");

                    b.Property<string>("CompletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CompletionComment")
                        .HasColumnType("text");

                    b.Property<string>("CompletionSignature")
                        .HasColumnType("text");

                    b.Property<string>("CompletionVerifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("EstimatedTotalDuration")
                        .HasColumnType("integer");

                    b.Property<int?>("FrequencyTypeId")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsAdhoc")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsCancelled")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsPrevSupervisorRejected")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsPrevTechnicianRejected")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsReworkRequested")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsTechniciansAssigned")
                        .HasColumnType("boolean");

                    b.Property<int?>("LocationId")
                        .HasColumnType("integer");

                    b.Property<int?>("MWOId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("ServiceCategoryId")
                        .HasColumnType("integer");

                    b.Property<int?>("ServiceProviderId")
                        .HasColumnType("integer");

                    b.Property<int?>("ServicingGroupId")
                        .HasColumnType("integer");

                    b.Property<int?>("StatusId")
                        .HasColumnType("integer");

                    b.Property<string>("SupervisorAssignedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("SupervisorAssignedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SupervisorId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("TargetCompletion")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("TargetStart")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TechniciansAssignedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("TechniciansAssignedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("WorkflowId")
                        .HasColumnType("integer");

                    b.HasKey("CSID", "Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("SupervisorId");

                    b.HasIndex("TechniciansAssignedBy");

                    b.ToTable("trPPMs");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trResetPassword", b =>
                {
                    b.Property<Guid>("RPID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MID")
                        .HasColumnType("uuid");

                    b.Property<string>("ResetPasswordCode")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("RPID");

                    b.HasIndex("MID");

                    b.ToTable("trResetPassword");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trRole", b =>
                {
                    b.Property<Guid>("RID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CSID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("3075169a-bb4c-463f-a602-dac99228ceac"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<int>("RefId")
                        .HasColumnType("integer");

                    b.Property<Guid>("TID")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("RID");

                    b.HasIndex("TID");

                    b.ToTable("trRole");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trRoleMember", b =>
                {
                    b.Property<Guid>("RID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MID")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("RID", "MID");

                    b.HasIndex("MID");

                    b.ToTable("trRoleMember");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trRolePrivilegeItem", b =>
                {
                    b.Property<Guid>("RID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PTID")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("RID", "PTID");

                    b.HasIndex("PTID");

                    b.ToTable("trRolePrivilegeItem");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trRoster", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CSID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("3075169a-bb4c-463f-a602-dac99228ceac"));

                    b.Property<string>("Component")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LocationCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("WeekDay")
                        .HasColumnType("integer");

                    b.Property<int?>("WeekEnd")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("trRoster");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trSchedulePlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CSID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("3075169a-bb4c-463f-a602-dac99228ceac"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<TimeSpan>("EndTime")
                        .HasMaxLength(100)
                        .HasColumnType("TIME");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MID")
                        .HasColumnType("uuid");

                    b.Property<string>("Route")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<TimeSpan>("StartTime")
                        .HasMaxLength(100)
                        .HasColumnType("TIME");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id", "CSID");

                    b.HasIndex("MID");

                    b.HasIndex("Route", "CSID");

                    b.ToTable("trSchedulePlan");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trServiceRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Acc_id")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying");

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("character varying");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("character varying");

                    b.Property<string>("LocationType")
                        .HasColumnType("text");

                    b.Property<string>("Priority")
                        .HasMaxLength(255)
                        .HasColumnType("character varying");

                    b.Property<string>("SREventId")
                        .HasColumnType("text");

                    b.Property<string>("SREventOther")
                        .HasColumnType("text");

                    b.Property<string>("SRProblemId")
                        .HasColumnType("text");

                    b.Property<string>("SRProblemOther")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("trServiceRequest");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trSubtask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<int>("Seq")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("trSubtask");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trSubtaskAction", b =>
                {
                    b.Property<Guid>("Subtask")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Action")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("MetaData")
                        .HasColumnType("json");

                    b.Property<string>("Reading")
                        .HasColumnType("text");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<int>("Seq")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Subtask", "Action");

                    b.HasIndex("Action");

                    b.ToTable("trSubtaskAction");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trSustainabilityBanner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<string>("LabelIntroduce")
                        .HasMaxLength(50)
                        .HasColumnType("character varying");

                    b.Property<string>("LabelIntroduceCN")
                        .HasMaxLength(50)
                        .HasColumnType("character varying");

                    b.Property<string>("LabelIntroduceTH")
                        .HasMaxLength(50)
                        .HasColumnType("character varying");

                    b.Property<string>("LabelLevel1")
                        .HasMaxLength(50)
                        .HasColumnType("character varying");

                    b.Property<string>("LabelLevel1CN")
                        .HasMaxLength(50)
                        .HasColumnType("character varying");

                    b.Property<string>("LabelLevel1TH")
                        .HasMaxLength(50)
                        .HasColumnType("character varying");

                    b.Property<string>("LabelLevel2")
                        .HasMaxLength(50)
                        .HasColumnType("character varying");

                    b.Property<string>("LabelLevel2CN")
                        .HasMaxLength(50)
                        .HasColumnType("character varying");

                    b.Property<string>("LabelLevel2TH")
                        .HasMaxLength(50)
                        .HasColumnType("character varying");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("trSustainabilityBanner");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trSustainabilityCMS", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CoverFileNameCN")
                        .HasColumnType("character varying");

                    b.Property<string>("CoverFileNameEN")
                        .HasColumnType("character varying");

                    b.Property<string>("CoverFileNameTH")
                        .HasColumnType("character varying");

                    b.Property<string>("CoverImageURLCN")
                        .HasColumnType("character varying");

                    b.Property<string>("CoverImageURLEN")
                        .HasColumnType("character varying");

                    b.Property<string>("CoverImageURLTH")
                        .HasColumnType("character varying");

                    b.Property<string>("CoverOriginalFileNameCN")
                        .HasColumnType("character varying");

                    b.Property<string>("CoverOriginalFileNameEN")
                        .HasColumnType("character varying");

                    b.Property<string>("CoverOriginalFileNameTH")
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("HeadFileNameCN")
                        .HasColumnType("character varying");

                    b.Property<string>("HeadFileNameEN")
                        .HasColumnType("character varying");

                    b.Property<string>("HeadFileNameTH")
                        .HasColumnType("character varying");

                    b.Property<string>("HeadImageURLCN")
                        .HasColumnType("character varying");

                    b.Property<string>("HeadImageURLEN")
                        .HasColumnType("character varying");

                    b.Property<string>("HeadImageURLTH")
                        .HasColumnType("character varying");

                    b.Property<string>("HeadOriginalFileNameCN")
                        .HasColumnType("character varying");

                    b.Property<string>("HeadOriginalFileNameEN")
                        .HasColumnType("character varying");

                    b.Property<string>("HeadOriginalFileNameTH")
                        .HasColumnType("character varying");

                    b.Property<string>("IntroduceCN")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying");

                    b.Property<string>("IntroduceEN")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying");

                    b.Property<string>("IntroduceTH")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsShowRelatedLink")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSubMenu")
                        .HasColumnType("boolean");

                    b.Property<int?>("LayoutType")
                        .HasColumnType("integer");

                    b.Property<string>("MenuNameCN")
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<string>("MenuNameEn")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<string>("MenuNameTH")
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("TitleRelatedCN")
                        .HasMaxLength(200)
                        .HasColumnType("character varying");

                    b.Property<string>("TitleRelatedEN")
                        .HasMaxLength(200)
                        .HasColumnType("character varying");

                    b.Property<string>("TitleRelatedTH")
                        .HasMaxLength(200)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("trSustainabilityCMS");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trSustainabilityCMSContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ContentType")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FileName")
                        .HasColumnType("character varying");

                    b.Property<string>("ImageURL")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("OriginalFileName")
                        .HasColumnType("character varying");

                    b.Property<string>("Text")
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("YoutubeURL")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("trSustainabilityCMSContent");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trSustainabilityConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ValueInt")
                        .HasColumnType("integer");

                    b.Property<string>("ValueString")
                        .HasMaxLength(250)
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("trSustainabilityConfig");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trSustainabilityLibrary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("IntroduceCN")
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<string>("IntroduceEN")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<string>("IntroduceTH")
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("TopicCN")
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<string>("TopicEN")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<string>("TopicTH")
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("trSustainabilityLibrary");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trSustainabilityLibraryFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AttachFileName")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("AttachFileSize")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying");

                    b.Property<string>("AttachFileType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying");

                    b.Property<string>("AttachFileURL")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("AttachOriginalFileName")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("CoverFileName")
                        .HasColumnType("character varying");

                    b.Property<string>("CoverImageURL")
                        .HasColumnType("character varying");

                    b.Property<string>("CoverOriginalFileName")
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uuid");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("trSustainabilityLibraryFile");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trSustainabilityPRBanner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BannerName")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FileNameCN")
                        .HasColumnType("character varying");

                    b.Property<string>("FileNameEN")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("FileNameTH")
                        .HasColumnType("character varying");

                    b.Property<string>("HeaderFileNameCN")
                        .HasColumnType("character varying");

                    b.Property<string>("HeaderFileNameEN")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("HeaderFileNameTH")
                        .HasColumnType("character varying");

                    b.Property<string>("HeaderImageURLCN")
                        .HasColumnType("character varying");

                    b.Property<string>("HeaderImageURLEN")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("HeaderImageURLTH")
                        .HasColumnType("character varying");

                    b.Property<string>("HeaderOriginalFileNameCN")
                        .HasColumnType("character varying");

                    b.Property<string>("HeaderOriginalFileNameEN")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("HeaderOriginalFileNameTH")
                        .HasColumnType("character varying");

                    b.Property<string>("ImageURLCN")
                        .HasColumnType("character varying");

                    b.Property<string>("ImageURLEN")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("ImageURLTH")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsShowRelatedLink")
                        .HasColumnType("boolean");

                    b.Property<string>("LinkToURL")
                        .HasColumnType("character varying");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("OriginalFileNameCN")
                        .HasColumnType("character varying");

                    b.Property<string>("OriginalFileNameEN")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("OriginalFileNameTH")
                        .HasColumnType("character varying");

                    b.Property<string>("TextCN")
                        .HasColumnType("character varying");

                    b.Property<string>("TextEN")
                        .HasColumnType("character varying");

                    b.Property<string>("TextTH")
                        .HasColumnType("character varying");

                    b.Property<string>("TitleCN")
                        .HasColumnType("character varying");

                    b.Property<string>("TitleEN")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("TitleTH")
                        .HasColumnType("character varying");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("trSustainabilityPRBanner");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AcknowledgeDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("CSID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("3075169a-bb4c-463f-a602-dac99228ceac"));

                    b.Property<string>("CancelReason")
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("CompleteDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("IsLate")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("trTask");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trTaskSubtask", b =>
                {
                    b.Property<Guid>("Task")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Subtask")
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Seq")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Task", "Subtask");

                    b.HasIndex("Subtask");

                    b.ToTable("trTaskSubtask");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Location", b =>
                {
                    b.Property<Guid>("LID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BuildingName")
                        .HasColumnType("text");

                    b.Property<string>("BuildingZoneName")
                        .HasColumnType("text");

                    b.Property<Guid?>("CSID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("3075169a-bb4c-463f-a602-dac99228ceac"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FloorName")
                        .HasColumnType("text");

                    b.Property<string>("LocationCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ParentLocationId")
                        .HasColumnType("integer");

                    b.Property<int?>("RefId")
                        .HasColumnType("integer");

                    b.Property<string>("SiteName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Space")
                        .HasColumnType("text");

                    b.Property<string>("Subspace")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<int?>("TypeId")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ZoneName")
                        .HasColumnType("text");

                    b.HasKey("LID");

                    b.ToTable("Location");

                    b.HasData(
                        new
                        {
                            LID = new Guid("2c055101-2271-44e0-95fe-bcf2c59a459a"),
                            BuildingName = "O2",
                            BuildingZoneName = "O2T1",
                            CSID = new Guid("3075169a-bb4c-463f-a602-dac99228ceac"),
                            CreatedBy = "00000000-0000-0000-0000-000000000000",
                            CreatedByName = "System",
                            CreatedDate = new DateTime(2025, 7, 2, 10, 40, 38, 149, DateTimeKind.Local).AddTicks(3450),
                            FloorName = "1B",
                            LocationCode = "",
                            SiteName = "OBK",
                            Type = "floor",
                            UpdatedBy = "00000000-0000-0000-0000-000000000000",
                            UpdatedByName = "System",
                            UpdatedDate = new DateTime(2025, 7, 2, 10, 40, 38, 149, DateTimeKind.Local).AddTicks(3450),
                            ZoneName = "R1"
                        });
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.SOCUserTanent", b =>
                {
                    b.Property<Guid>("SID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SOCUserSID")
                        .HasColumnType("uuid");

                    b.HasKey("SID", "TID");

                    b.HasIndex("SOCUserSID");

                    b.HasIndex("TID");

                    b.ToTable("SOCUserTanent");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.SpotCoordinate", b =>
                {
                    b.Property<Guid>("CID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LID")
                        .HasColumnType("uuid");

                    b.Property<float>("Lat")
                        .HasColumnType("real");

                    b.Property<float>("Long")
                        .HasColumnType("real");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("CID");

                    b.HasIndex("LID");

                    b.ToTable("SpotCoordinate");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Unit", b =>
                {
                    b.Property<Guid>("UID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float?>("Area")
                        .HasColumnType("real");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("IndoorSpillOutSeating")
                        .HasColumnType("integer");

                    b.Property<float?>("InlineAreaIndoorZone")
                        .HasColumnType("real");

                    b.Property<float?>("InlineAreaOutdoorZone")
                        .HasColumnType("real");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LID")
                        .HasColumnType("uuid");

                    b.Property<float?>("Lat")
                        .HasColumnType("real");

                    b.Property<float?>("Long")
                        .HasColumnType("real");

                    b.Property<string>("UnitNo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UnitType")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("UID");

                    b.HasIndex("LID");

                    b.ToTable("Unit");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.WorkTransaction", b =>
                {
                    b.Property<Guid>("TID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CheckIn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("CheckOut")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("HoneywellResponeDataJson")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SID")
                        .HasColumnType("uuid");

                    b.Property<int>("Transactiontype")
                        .HasColumnType("integer");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<string>("UpdatedByName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying");

                    b.Property<DateTime>("UpdatedDate")
                        .HasMaxLength(100)
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("TID");

                    b.ToTable("WorkTransaction");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.trCaseMedias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CaseId")
                        .HasColumnType("integer");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("trCasesCSID")
                        .HasColumnType("uuid");

                    b.Property<int?>("trCasesId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("trCasesCSID", "trCasesId");

                    b.ToTable("trCaseMedias");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.trCaseTasks", b =>
                {
                    b.Property<Guid>("CSID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("3075169a-bb4c-463f-a602-dac99228ceac"));

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("AssignedStaffDisplayName")
                        .HasColumnType("text");

                    b.Property<int?>("AssignedStaffId")
                        .HasColumnType("integer");

                    b.Property<int>("CaseId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsCritical")
                        .HasColumnType("boolean");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Sequence")
                        .HasColumnType("integer");

                    b.Property<int>("StatusCode")
                        .HasColumnType("integer");

                    b.Property<int>("TaskCategoryId")
                        .HasColumnType("integer");

                    b.HasKey("CSID", "Id");

                    b.HasIndex("AssignedStaffId");

                    b.HasIndex("StatusCode");

                    b.HasIndex("CSID", "CaseId");

                    b.HasIndex("CaseId", "AssignedStaffId");

                    b.ToTable("trCaseTasks");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.trFunctionRoleLocationMember", b =>
                {
                    b.Property<Guid>("FRLID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CSID")
                        .HasColumnType("uuid");

                    b.Property<int>("FunctionRoleId")
                        .HasColumnType("integer");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.Property<Guid>("MID")
                        .HasColumnType("uuid");

                    b.HasKey("FRLID");

                    b.HasIndex("MID");

                    b.ToTable("trFunctionRoleLocationMember");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.trFunctionRoleLocationSOC", b =>
                {
                    b.Property<Guid>("FRLID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("FunctionRoleId")
                        .HasColumnType("integer");

                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.Property<Guid>("SID")
                        .HasColumnType("uuid");

                    b.HasKey("FRLID");

                    b.HasIndex("SID");

                    b.ToTable("trFunctionRoleLocationSOC");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.trRoleSOCUser", b =>
                {
                    b.Property<Guid>("RID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SID")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("RID", "SID");

                    b.HasIndex("SID");

                    b.ToTable("trRoleSOCUser");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.ClientMember", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.taMember", "taMember")
                        .WithMany("ClientMember")
                        .HasForeignKey("MID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("taMember");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.TenantMember", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.ClientSite", "ClientSite")
                        .WithMany()
                        .HasForeignKey("CSID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.taMember", "taMember")
                        .WithMany("tenantMembers")
                        .HasForeignKey("MID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.Tenant", "Tenant")
                        .WithMany("tenantMembers")
                        .HasForeignKey("TID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClientSite");

                    b.Navigation("Tenant");

                    b.Navigation("taMember");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.mtMenu", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.mtMenu", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.mtPrivilegeItem", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.mtPrivilege", "mtPrivilege")
                        .WithMany("mtPrivilegeItems")
                        .HasForeignKey("PID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("mtPrivilege");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trAction", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.mtActionType", "mtActionType")
                        .WithMany()
                        .HasForeignKey("ActionType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("mtActionType");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trActivityProcedure", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Location", "location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("location");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trInviteMember", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.taMember", "taMember")
                        .WithMany()
                        .HasForeignKey("MID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("taMember");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trMarcomSurveyAnswer", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.trMarcomSurvey", null)
                        .WithMany("trMarcomSurveyAnswer")
                        .HasForeignKey("trMarcomSurveyMSID");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trMarcomSurveyAnswerDetail", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.trMarcomSurveyAnswer", null)
                        .WithMany("trMarcomSurveyAnswerDetails")
                        .HasForeignKey("trMarcomSurveyAnswerMSAID");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trMarcomSurveyQuestion", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.trMarcomSurveyQuestionType", "trMarcomSurveyQuestionType")
                        .WithMany()
                        .HasForeignKey("MSQTID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.trMarcomSurveySection", null)
                        .WithMany("trMarcomSurveyQuestion")
                        .HasForeignKey("trMarcomSurveySectionMSSID");

                    b.Navigation("trMarcomSurveyQuestionType");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trMarcomSurveyQuestionSection", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.trMarcomSurveyQuestion", "trMarcomSurveyQuestion")
                        .WithMany()
                        .HasForeignKey("MSQID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.trMarcomSurveySection", "trMarcomSurveySection")
                        .WithMany()
                        .HasForeignKey("MSSID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("trMarcomSurveyQuestion");

                    b.Navigation("trMarcomSurveySection");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trMarcomSurveySection", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.trMarcomSurvey", null)
                        .WithMany("trMarcomSurveySection")
                        .HasForeignKey("trMarcomSurveyMSID");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trResetPassword", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.taMember", "taMember")
                        .WithMany()
                        .HasForeignKey("MID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("taMember");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trRole", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trRoleMember", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.taMember", "taMember")
                        .WithMany("trRoleMembers")
                        .HasForeignKey("MID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.trRole", "trRole")
                        .WithMany("trRoleMembers")
                        .HasForeignKey("RID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("taMember");

                    b.Navigation("trRole");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trRolePrivilegeItem", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.mtPrivilegeItem", "mtPrivilegeItem")
                        .WithMany()
                        .HasForeignKey("PTID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.trRole", "trRole")
                        .WithMany("trRolePrivilagesItem")
                        .HasForeignKey("RID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("mtPrivilegeItem");

                    b.Navigation("trRole");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trSchedulePlan", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.taMember", "taMember")
                        .WithMany()
                        .HasForeignKey("MID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.trActivityProcedure", "trActivityProcedure")
                        .WithMany("trSchedulePlans")
                        .HasForeignKey("Route", "CSID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("taMember");

                    b.Navigation("trActivityProcedure");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trSubtaskAction", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.trAction", "trAction")
                        .WithMany()
                        .HasForeignKey("Action")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.trSubtask", "trSubtask")
                        .WithMany("trSubtaskAction")
                        .HasForeignKey("Subtask")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("trAction");

                    b.Navigation("trSubtask");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trTask", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Location", "location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("location");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trTaskSubtask", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.trSubtask", "trSubtask")
                        .WithMany()
                        .HasForeignKey("Subtask")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.trTask", "trTask")
                        .WithMany("trTaskSubtask")
                        .HasForeignKey("Task")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("trSubtask");

                    b.Navigation("trTask");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.SOCUserTanent", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.SOCUser", null)
                        .WithMany("SOCUserTanent")
                        .HasForeignKey("SOCUserSID");

                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.SpotCoordinate", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Location", "Location")
                        .WithMany("SpotCoordinate")
                        .HasForeignKey("LID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Unit", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Location", "Location")
                        .WithMany("Unit")
                        .HasForeignKey("LID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.trCaseMedias", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.trCases", null)
                        .WithMany("trCaseMedias")
                        .HasForeignKey("trCasesCSID", "trCasesId");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.trCaseTasks", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.trCases", "trCases")
                        .WithMany("trCaseTasks")
                        .HasForeignKey("CSID", "CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("trCases");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.trFunctionRoleLocationMember", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.taMember", "taMember")
                        .WithMany("FunctionRoleLocation")
                        .HasForeignKey("MID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("taMember");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.trFunctionRoleLocationSOC", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.SOCUser", "SOCUser")
                        .WithMany("FunctionRoleLocation")
                        .HasForeignKey("SID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SOCUser");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.trRoleSOCUser", b =>
                {
                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.trRole", "trRole")
                        .WithMany()
                        .HasForeignKey("RID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TCCTOBK.OperationBackend.Domain.Entities.SOCUser", "SOCUser")
                        .WithMany("trRoleSOCUser")
                        .HasForeignKey("SID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SOCUser");

                    b.Navigation("trRole");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.SOCUser", b =>
                {
                    b.Navigation("FunctionRoleLocation");

                    b.Navigation("SOCUserTanent");

                    b.Navigation("trRoleSOCUser");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.Tenant", b =>
                {
                    b.Navigation("tenantMembers");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.mtPrivilege", b =>
                {
                    b.Navigation("mtPrivilegeItems");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.taMember", b =>
                {
                    b.Navigation("ClientMember");

                    b.Navigation("FunctionRoleLocation");

                    b.Navigation("tenantMembers");

                    b.Navigation("trRoleMembers");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trActivityProcedure", b =>
                {
                    b.Navigation("trSchedulePlans");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trCases", b =>
                {
                    b.Navigation("trCaseMedias");

                    b.Navigation("trCaseTasks");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trMarcomSurvey", b =>
                {
                    b.Navigation("trMarcomSurveyAnswer");

                    b.Navigation("trMarcomSurveySection");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trMarcomSurveyAnswer", b =>
                {
                    b.Navigation("trMarcomSurveyAnswerDetails");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trMarcomSurveySection", b =>
                {
                    b.Navigation("trMarcomSurveyQuestion");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trRole", b =>
                {
                    b.Navigation("trRoleMembers");

                    b.Navigation("trRolePrivilagesItem");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trSubtask", b =>
                {
                    b.Navigation("trSubtaskAction");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Entities.trTask", b =>
                {
                    b.Navigation("trTaskSubtask");
                });

            modelBuilder.Entity("TCCTOBK.OperationBackend.Domain.Location", b =>
                {
                    b.Navigation("SpotCoordinate");

                    b.Navigation("Unit");
                });
#pragma warning restore 612, 618
        }
    }
}
