using TCCT.ServiceAbstraction.Application.Features.FinedayResidence.Residence.AddResidence;
using TCCT.ServiceAbstraction.Application.Features.FinedayResidence.Residence.AddResidenceMember;
using TCCT.ServiceAbstraction.Application.Features.FinedayResidence.Residence.CheckFrontalFaceImage;
using TCCT.ServiceAbstraction.Application.Features.FinedayResidence.Residence.UpdateResidenceMember;
using TCCT.ServiceAbstraction.Application.Features.FinedayResidence.Residence.GetDataResidenceMember;
using TCCT.ServiceAbstraction.Application.Features.FinedayResidence.Residence.CheckStatusMember;
using TCCT.ServiceAbstraction.Application.Features.FinedayResidence.AuthorizeFloor.ChangeDefaultFloor;
using TCCT.ServiceAbstraction.Application.Features.FinedayResidence.LocationMapping.GetResidenceLocationMapping;
using TCCT.ServiceAbstraction.Application.Features.FinedayResidence.Cards.GetCardsAccessGroups;
using TCCT.ServiceAbstraction.Application.Features.FinedayResidence.Carpark.GetParkingDetailByQRCode;
using TCCT.ServiceAbstraction.Application.Features.FinedayResidence.Carpark.GetParkingDetail;
using TCCT.ServiceAbstraction.Application.Features.FinedayResidence.PreRegister.Invite;
using TCCT.ServiceAbstraction.Application.Features.FinedayResidence.PreRegister.CancelInvite;
using TCCT.ServiceAbstraction.Application.Features.FinedayResidence.PreRegister.GetDataInviteVisitorTransaction;
using TCCT.ServiceAbstraction.Application.Features.FinedayResidence.Redemption.RedeemParking;
using TCCT.ServiceAbstraction.Application.Features.FinedayResidence.Redemption.GetDataRateCodeListByTenantID;
using TCCT.ServiceAbstraction.Application.Features.FinedayResidence.Residence.GetDetailResidenceMemberByPersonID;
using TCCT.ServiceAbstraction.Application.Features.FinedayResidence.Residence.InactiveResidenceByResidenceID;
using TCCT.ServiceAbstraction.Application.Features.FinedayResidence.AuthorizeFloor.GetQueueCallLift;
using TCCT.ServiceAbstraction.Application.Features.FinedayResidence.PreRegister.SetApproveInviteResidenceVisitor;
using TCCT.ServiceAbstraction.Application.Features.FinedayResidence.Residence.GetDataResidenceAuthorizeFloorMaster;
using TCCT.ServiceAbstraction.Application.Features.FinedayResidence.Redemption.GetDataDepartment;
using TCCT.ServiceAbstraction.Application.Features.FinedayResidence.Redemption.GetDataMemberType;
using TCCT.ServiceAbstraction.Application.Features.FinedayResidence.Redemption.GetDataTerminal;
using TCCT.ServiceAbstraction.Application.Features.FinedayResidence.Redemption.GetDataVehicleType;
using TCCT.ServiceAbstraction.Application.Features.FinedayResidence.Residence.GetMasServiceType;
using TCCT.ServiceAbstraction.Application.Features.FinedayResidence.Booking.GetFacilities;
using TCCT.ServiceAbstraction.Application.Features.FinedayResidence.Booking.ReservationSearchQuery;
using TCCT.ServiceAbstraction.Application.Features.FinedayResidence.Booking.ReservationCreate;
using TCCT.ServiceAbstraction.Application.Features.FinedayResidence.Booking.GetReservationByID;
using TCCT.ServiceAbstraction.Application.Features.FinedayResidence.Booking.ReservationUpdate;
using TCCT.ServiceAbstraction.Application.Features.FinedayResidence.Carpark.GetParkingDetailByPersonId;
using TCCT.ServiceAbstraction.Application.Features.FinedayResidence.Cards.CancelCardResidenceByCardNumber;
using TCCT.ServiceAbstraction.Application.Features.FinedayResidence.Cards.GetDataResidenceCardByPersonId;
using TCCT.ServiceAbstraction.Application.Features.FinedayResidence.PreRegister.CancelInvite;
using TCCT.ServiceAbstraction.Application.Features.FinedayResidence.Redemption.CheckRedemptionStatusByEmail;
using TCCT.ServiceAbstraction.Application.Features.FinedayResidence.Booking.Facilities;
using TCCT.ServiceAbstraction.Application.Features.FinedayResidence.Booking.ReservationFacilitiesUpdate;
using TCCT.ServiceAbstraction.Application.Features.FinedayResidence.Booking.ReservationFacilitiesCreate;
using TCCT.ServiceAbstraction.Application.Features.FinedayResidence.Booking.GetReservationFacilitiesByID;
using TCCT.ServiceAbstraction.Application.Features.FinedayResidence.Booking.ReservationSearchFacilitiesQuery;
using TCCT.ServiceAbstraction.Application.Features.MinioImageResponse;
using TCCT.ServiceAbstraction.Application.Features.FinedayResidence.AuthorizeFloor.CheckQueueLift;

namespace TCCT.ServiceAbstraction.Application.Contracts.FinedayResidence;
public interface IFinedayResidenceService
{
	Task<AddResidenceResult> AddResidence(AddResidenceCommand data);
	Task<AddResidenceMemberResult> AddResidenceMember(AddResidenceMemberCommand data);
	Task<CheckFrontalFaceImageResult> CheckFrontalFaceImage(CheckFrontalFaceImageCommand data);
	Task<UpdateResidenceMemberResult> UpdateResidenceMember(UpdateResidenceMemberCommand data);
	Task<GetDataResidenceMemberResult> GetDataResidenceMember(GetDataResidenceMemberCommand data);
	Task<CheckStatusMemberResult> CheckStatusMember(CheckStatusMemberCommand data);
	Task<ChangeDefaultFloorResult> ChangeDefaultFloor(int floorID, int zoneID, Guid personID);
	Task<List<GetResidenceLocationMappingResult>> GetResidenceLocationMapping(int zoneID,int floorID);
	Task<List<GetCardsAccessGroupsResult>> GetCardsAccessGroups();
	Task<GetParkingDetailByQRCodeResult> GetParkingDetailByQRCode(string logCarparkID,bool lostCard);
	Task<GetParkingDetailResult> GetParkingDetail(string search,bool lostCard);
	Task<GetParkingDetailByPersonIdResult> GetParkingDetailByPersonId(Guid personID, bool lostCard);
	Task<InviteResidenceVisitorResult> InviteResidenceVisitor(string guestInviteName,int residenceID,int locationID,Guid personID,List<InviteSchedule> inviteSchedule);
	Task<CancelInviteResidenceVisitorResult> CancelInviteResidenceVisitor(Guid inviteID,Guid personID);
	Task<GetDataInviteVisitorTransactionResult> GetDataInviteVisitorTransaction(Guid personID);
	Task<RedeemParkingResult> RedeemParking(string logCarparkID, int terminalID, string datetimeIn, string runningNumber, string plateNumber, int memberType, int carType, int tenantID, int rateCode, int userID, string remark);
	Task<List<GetDataRateCodeListByTenantIDResult>> GetDataRateCodeListByTenantID(int tenantID,int memberType,int vehicleType,int departmentID);
	Task<GetDetailResidenceMemberByPersonIDResult> GetDetailResidenceMemberByPersonID(Guid personID);
	Task<InactiveResidenceByResidenceIDResult> InactiveResidenceByResidenceID(int residenceID);
	Task<GetQueueCallLiftResult> GetQueueCallLift(GetQueueCallLiftCommand data);
	Task<SetApproveInviteResidenceVisitorResult> SetApproveInviteResidenceVisitor(SetApproveInviteResidenceVisitorCommand data);
	Task<List<ReservationSearchQueryResult>> ReservationSearchQuery(ReservationSearchQuery data);
	Task<GetReservationByIDResult> GetReservationByID(string reserveId);
	Task<ReservationCreateResult> ReservationCreate(string reserveId, ReservationCreateCommand data);
	Task<ReservationUpdateResult> ReservationUpdate(string reserveId, ReservationUpdateCommand data);
	Task<GetFacilitiesResult> GetFacilities(GetFacilitiesQuery data);
	Task<List<GetDataResidenceAuthorizeFloorMasterResult>> GetDataResidenceAuthorizeFloorMaster(GetDataResidenceAuthorizeFloorMasterCommand data);
	Task<List<GetDataVehicleTypeResult>> GetDataVehicleType(GetDataVehicleTypeQuery data);
	Task<List<GetDataDepartmentResult>> GetDataDepartment(GetDataDepartmentQuery data);
	Task<List<GetDataTerminalResult>> GetDataTerminal(GetDataTerminalQuery data);
	Task<List<GetMasServiceTypeResult>> GetMasServiceType(GetMasServiceTypeQuery data);
	Task<List<GetDataMemberTypeResult>> GetDataMemberType(GetDataMemberTypeQuery data);
	Task<CancelCardResidenceByCardNumberResult> CancelCardResidenceByCardNumber(CancelCardResidenceByCardNumberCommand data);
	Task<List<GetDataResidenceCardByPersonIdResult>> GetDataResidenceCardByPersonId(GetDataResidenceCardByPersonIdCommand data);
	Task<CheckPreRegisterIsPassResult> CheckPreRegisterIsPass(CheckPreRegisterIsPassCommand data);
	Task<CheckRedemptionStatusByEmailResult> CheckRedemptionStatusByEmail(CheckRedemptionStatusByEmailCommand data);
	Task<FacilitiesResult> Facilities(FacilitiesQuery data);
	Task<ReservationFacilitiesCreateResult> ReservationFacilitiesCreate(string reserveId, ReservationFacilitiesCreateCommand data);
	Task<ReservationFacilitiesUpdateResult> ReservationFacilitiesUpdate(string reserveId, ReservationFacilitiesUpdateCommand data);
	Task<List<ReservationSearchFacilitiesQueryResult>> ReservationSearchFacilitiesQuery(ReservationSearchFacilitiesQuery data);
	Task<GetReservationFacilitiesByIDResult> GetReservationFacilitiesByID(string reserveId);
	Task<List<MinioImageResponse>> GetImageUrl();
	Task<CheckQueueLiftResult> CheckQueueLift(CheckQueueLiftCommand data);
	Task<int?> ReservationSearchFacilitiesQueryCount(ReservationSearchFacilitiesQuery data);
} 