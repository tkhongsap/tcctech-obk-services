---
apiVersion: secrets.hashicorp.com/v1beta1
kind: VaultStaticSecret
metadata:
  name: ${CI_PROJECT_NAME}-vss
  namespace: ${K8S_NAMESPACE}
spec:
  namespace: ${K8S_NAMESPACE}
  type: kv-v2
  mount: ${K8S_PROJECT}
  path: ${CI_ENVIRONMENT_NAME}/${CI_PROJECT_NAME}
  destination:
    name: ${CI_PROJECT_PATH_SLUG}-config-${CI_ENVIRONMENT_SLUG}
    create: true
  refreshAfter: 2m
  vaultAuthRef: static-auth
  syncConfig:
    instantUpdates: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${CI_PROJECT_PATH_SLUG}-${CI_ENVIRONMENT_SLUG}
  labels:
    app: ${CI_PROJECT_PATH_SLUG}-${CI_ENVIRONMENT_SLUG}
spec:
  replicas: ${K8S_REPLICAS}
  selector:
    matchLabels:
      app: ${CI_PROJECT_PATH_SLUG}-${CI_ENVIRONMENT_SLUG}
  template:
    metadata:
      labels:
        app: ${CI_PROJECT_PATH_SLUG}-${CI_ENVIRONMENT_SLUG}
    spec:
      containers:
      - name: ${CI_PROJECT_PATH_SLUG}-${CI_ENVIRONMENT_SLUG}
        image: ${CI_REGISTRY}/${CI_PROJECT_PATH}:${CI_COMMIT_TAG}-${CI_COMMIT_SHORT_SHA}
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: ${SERVICE_PORT}
        envFrom:
        - secretRef:
            name: ${CI_PROJECT_PATH_SLUG}-config-${CI_ENVIRONMENT_SLUG}
        resources:
          requests:
            memory: ${K8S_REQ_MEM}
            cpu: ${K8S_REQ_CPU}
          limits:
            memory: ${K8S_LIMIT_MEM}
            cpu: ${K8S_LIMIT_CPU}
#         volumeMounts:
# # START 2 # Map PVC        
# #          - name: service-persistent-storage
# #            mountPath: /store
# # END 2 # จบการ Map PVC            
#           - name: tz-config
#             mountPath: /etc/localtime            
#       volumes:
#         - name: service-persistent-storage
#           persistentVolumeClaim:
#             claimName: ${PROJECT_NAME}-pvc-${CI_ENVIRONMENT_SLUG}
#         - name: tz-config
#           hostPath:
#              path: /usr/share/zoneinfo/Asia/Bangkok  
      imagePullSecrets:
      - name: ${K8S_NAMESPACE}-registry-secret
      
---
apiVersion: v1
kind: Service
metadata:
  name: ${CI_PROJECT_PATH_SLUG}-${CI_ENVIRONMENT_SLUG}
spec:  
  ipFamilies:
  - IPv4
  selector:
    app: ${CI_PROJECT_PATH_SLUG}-${CI_ENVIRONMENT_SLUG}
  ports:
    - protocol: TCP
      port: 80
      targetPort: ${SERVICE_PORT}
  type: ClusterIP

## Nginx Ingress - Pipeline จะใช้ Master/Minion ในการทำ routing สำหรับ service 
#1.Service ใช้ domain แยก
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ${CI_PROJECT_PATH_SLUG}-${CI_ENVIRONMENT_SLUG}-minion
  annotations:
    nginx.org/mergeable-ingress-type: "minion"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.org/client-max-body-size: "100m"
spec:
  ingressClassName: nginx
  rules:
  - host: ${FQDN}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: ${CI_PROJECT_PATH_SLUG}-${CI_ENVIRONMENT_SLUG}
            port:
              number: 80  

#---
# 2.Service ใช้ domain ร่วมกัน แยกด้วย subpath
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: ${CI_PROJECT_PATH_SLUG}-${CI_ENVIRONMENT_SLUG}-minion
#   annotations:
#     nginx.org/mergeable-ingress-type: "minion"
#     nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
#     nginx.ingress.kubernetes.io/use-regex: "true"
#     nginx.ingress.kubernetes.io/rewrite-target: /$2
# spec:
#   ingressClassName: nginx
#   rules:
#   - host: ${FQDN}
#     http:
#       paths:
#       - path: /${SERVICE_NAME}(/|$)(.*)
#         pathType: ImplementationSpecific
#         backend:
#           service:
#             name: ${CI_PROJECT_PATH_SLUG}-${CI_ENVIRONMENT_SLUG}
#             port:
#               number: 80  

