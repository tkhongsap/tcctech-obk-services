/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/health": {
    /** Check health */
    get: operations["health"];
  };
  "/me/profile": {
    /** Get account profile */
    get: operations["profile_controller.find"];
    /** Update profile */
    put: operations["profile_controller.update"];
  };
  "/me/account": {
    /** Get user account */
    get: operations["account_controller.find"];
    /** Delete user account (soft) */
    delete: operations["account_controller.delete"];
  };
  "/me/account/password": {
    /** Update account password */
    put: operations["account_controller.updatePassword"];
  };
  "/me/account/reset_password": {
    /** Reset account password */
    put: operations["account_controller.resetPassword"];
  };
  "/me/account/verify_password": {
    /** Verify current password */
    post: operations["account_controller.verifyPassword"];
  };
  "/me/setting": {
    /** Get account setting */
    get: operations["setting_controller.find"];
    /** Update account setting */
    put: operations["setting_controller.update"];
  };
  "/task/{task_name}": {
    /** Job for create task */
    post: operations["task_controller.create"];
  };
  "/auth/register": {
    /** Register */
    post: operations["auth_controller.register"];
  };
  "/auth/login": {
    /** Login */
    post: operations["auth_controller.login"];
  };
  "/auth/logout": {
    /** Logout */
    delete: operations["auth_controller.logout"];
  };
  "/auth/reactivate": {
    /** Re activate account */
    put: operations["auth_controller.reactivate"];
  };
  "/otp/request": {
    /** Request OTP */
    post: operations["otp_controller.request"];
  };
  "/otp/verify": {
    /** Verify OTP */
    post: operations["otp_controller.verify"];
  };
  "/identity/validate": {
    /** Validate identity */
    get: operations["identity_controller.validate"];
  };
  "/identity": {
    /** get all Identities */
    get: operations["identity_controller.findAll"];
    /** create new email or phone to account */
    post: operations["identity_controller.create"];
  };
  "/identity/{id}": {
    /** delete email or phone */
    delete: operations["identity_controller.delete"];
  };
  "/identity/{id}/default": {
    /** update default identity */
    put: operations["identity_controller.default"];
  };
  "/external_identity/link": {
    /** check extenal identity exist */
    post: operations["external_identity_controller.link"];
  };
  "/me/qr_token": {
    /** get active qr token */
    get: operations["qr_token_controller.show"];
    /** get active qr token */
    post: operations["qr_token_controller.create"];
  };
  "/integration/tokens/{id}": {
    /** get encrypted data from token id */
    get: operations["qr_token_controller.getEncryptedData"];
  };
  "/account/{id}": {
    /** get account detail */
    get: operations["accounts_controller.find"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Profile: {
      first_name: string;
      middle_name?: string | null;
      last_name: string;
      dob: string;
      /** @enum {string|null} */
      title?: "mr" | "mrs" | "ms" | "dr" | null;
      /** @enum {string|null} */
      gender?: "male" | "female" | "nonbinary" | "prefernottosay" | null;
    };
    Setting: {
      two_factor_authentication_enabled?: boolean;
      password_enabled?: boolean;
    };
    UpdateProfile: {
      first_name?: string;
      middle_name?: string;
      last_name?: string;
      dob?: string;
      /** @enum {string} */
      title?: "mr" | "mrs" | "ms" | "dr";
      /** @enum {string} */
      gender?: "male" | "female" | "nonbinary" | "prefernottosay";
    };
    Result: {
      result: boolean;
    };
    /** @enum {string} */
    Provider: "phone" | "email" | "sso";
    Device: {
      device_id: string;
      os: string;
    };
    Identity: {
      identifier: string;
      provider: components["schemas"]["Provider"];
      country_code?: string;
      type?: (("google" | "apple" | "microsoft" | "fs")[]) | null;
      default?: boolean;
    };
    Error: {
      /**
       * @example INTERNAL_SERVER_ERROR 
       * @enum {string}
       */
      code: "BAD_REQUEST" | "NOT_FOUND" | "USER_NOT_FOUND" | "INTERNAL_SERVER_ERROR" | "UNAUTHORIZED";
      /** @example error message */
      message: string;
    };
    HealthData: {
      health: boolean;
    };
    FindProfileResponse: {
      data: {
        profile: components["schemas"]["FindProfileResponseData"];
      };
    };
    FindProfileResponseData: components["schemas"]["Profile"];
    UpdateProfileRequestBody: components["schemas"]["UpdateProfile"];
    UpdateProfileResponse: {
      data: {
        profile: components["schemas"]["UpdateProfileResponseData"];
      };
    };
    UpdateProfileResponseData: components["schemas"]["Profile"];
    FindSettingResponse: {
      data: {
        setting: components["schemas"]["FindSettingResponseData"];
      };
    };
    FindSettingResponseData: components["schemas"]["Setting"];
    UpdateSettingRequestBody: components["schemas"]["Setting"];
    UpdateSettingResponse: {
      data: {
        setting: components["schemas"]["UpdateSettingResponseData"];
      };
    };
    UpdateSettingResponseData: components["schemas"]["Setting"];
    RequestOtpRequestBody: {
      identity: {
        provider: components["schemas"]["Provider"];
        identifier: string;
        country_code?: string;
      };
    };
    RequestOtpResponse: {
      data: components["schemas"]["RequestOtpResponseData"];
    };
    RequestOtpResponseData: {
      otp: {
        reference: string;
      };
    };
    VerifyOtpRequestBody: {
      otp: {
        reference: string;
        code: string;
      };
    };
    VerifyOtpResponse: {
      data: components["schemas"]["VerifyOtpResponseData"];
    };
    VerifiedOtpId: {
      id: string;
    };
    VerifyOtpResponseData: {
      otp: components["schemas"]["VerifiedOtpId"];
    };
    RegisterAuthRequestBody: {
      profile: components["schemas"]["Profile"];
      identities: {
        provider: components["schemas"]["Provider"];
        identifier: string;
        country_code?: string;
        uid?: string;
        /** @enum {string} */
        provider_type?: "google" | "microsoft" | "apple" | "fs";
        meta?: Record<string, never>;
      };
      password?: string;
      device?: components["schemas"]["Device"];
      push_token: {
        value: string;
        type: string;
      };
    };
    RegisterAuthResponse: {
      data: components["schemas"]["RegisterAuthResponseData"];
    };
    RegisterAuthResponseData: {
      token: {
        value: string;
      };
    };
    LoginAuthRequestBody: {
      identity: {
        provider: components["schemas"]["Provider"];
        identifier: string;
        country_code?: string;
      };
      password?: string;
      device?: components["schemas"]["Device"];
      otp?: {
        id: string;
        reference: string;
      };
    };
    LoginAuthResponse: {
      data: components["schemas"]["LoginAuthResponseData"];
    };
    LoginAuthResponseData: {
      identity?: components["schemas"]["Identity"];
      token?: {
        value: string;
      };
    };
    ReactivateAuthRequestBody: {
      identity: {
        provider: components["schemas"]["Provider"];
        identifier: string;
        country_code?: string;
      };
      password?: string;
      device?: components["schemas"]["Device"];
      otp?: {
        id: string;
        reference: string;
      };
    };
    ReactivateAuthResponse: {
      data: components["schemas"]["ReactivateAuthResponseData"];
    };
    ReactivateAuthResponseData: {
      identity?: components["schemas"]["Identity"];
      token?: {
        value: string;
      };
    };
    LogoutAuthRequestBody: Record<string, unknown> | null;
    LogoutAuthResponse: {
      data: components["schemas"]["LogoutAuthResponseData"];
    };
    LogoutAuthResponseData: components["schemas"]["Result"];
    ValidateIdentityRequestBody: components["schemas"]["Identity"];
    ValidateIdentityResponse: {
      data: components["schemas"]["ValidateIdentityResponseData"];
    };
    ValidateIdentityResponseData: components["schemas"]["Result"];
    LinkExternalIdentityRequestBody: {
      identifier: string;
      uid: string;
      /** @enum {string} */
      provider_type: "google" | "microsoft" | "apple" | "fs";
      meta: Record<string, never>;
    };
    LinkExternalIdentityResponse: {
      data: components["schemas"]["LinkExternalIdentityResponseData"];
    };
    LinkExternalIdentityResponseData: components["schemas"]["Result"];
    AccountResponse: {
      data: components["schemas"]["AccountResponseData"];
    };
    AccountResponseData: {
      account: {
        id: string;
      };
    };
    DeleteAccountResponse: {
      data: components["schemas"]["DeleteAccountData"];
    };
    DeleteAccountData: components["schemas"]["Result"];
    CreateTaskResponse: {
      data: components["schemas"]["CreateTaskData"];
    };
    CreateTaskData: components["schemas"]["Result"];
    CreateIdentityRequestBody: {
      identity: components["schemas"]["Identity"];
      otp: components["schemas"]["VerifiedOtpId"];
    };
    CheckIdentityExistsRequestBody: {
      provider: components["schemas"]["Provider"];
      identifier: string;
      country_code?: string;
    };
    IdentitiesResponseData: (components["schemas"]["Identity"])[];
    IdentityResponse: {
      data: components["schemas"]["IdentitiesResponseData"];
    };
    CreateIdentityResponseData: components["schemas"]["Result"];
    CreateIdentityResponse: {
      data: components["schemas"]["CreateIdentityResponseData"];
    };
    IdentitiesData: (components["schemas"]["Identity"])[];
    GetIdentitiesResponse: {
      data: components["schemas"]["IdentitiesData"];
    };
    DeleteIdentityResponse: {
      data: components["schemas"]["Result"];
    };
    VerifyPasswordRequestBody: {
      password: string;
    };
    VerifyPasswordResponse: {
      data: components["schemas"]["Result"];
    };
    UpdatePasswordRequestBody: {
      password: string;
    };
    UpdatePasswordResponse: {
      data: components["schemas"]["Result"];
    };
    ResetPasswordRequestBody: {
      identity: {
        identifier: string;
        provider: components["schemas"]["Provider"];
        otp: string;
        reference: string;
        country_code?: string;
      };
      otp?: {
        id: string;
        reference: string;
      };
      hashedPassword: string;
    };
    ResetPasswordResponse: {
      data: {
        token?: {
          value: string;
        };
      };
    };
    ShowQRTokenResponse: {
      data: {
        token?: {
          id: string;
          expired_date: string;
        };
      };
    };
    EncryptedDataResponse: {
      data: {
        encrypted_data?: string;
      };
    };
    AccountDataResponse: {
      data: {
        account?: {
          device?: {
            id: string;
          };
        };
      };
    };
  };
  responses: {
    /** @description Health response */
    HealthResponse: {
      content: {
        "application/json": {
          data: components["schemas"]["HealthData"];
        };
      };
    };
    /** @description Unexpected error occurred */
    ErrorResp: {
      content: {
        "application/json": {
          error: components["schemas"]["Error"];
        };
      };
    };
    /** @description Find profile response */
    FindProfileResponse: {
      content: {
        "application/json": components["schemas"]["FindProfileResponse"];
      };
    };
    /** @description Find setting response */
    FindSettingResponse: {
      content: {
        "application/json": components["schemas"]["FindSettingResponse"];
      };
    };
    /** @description Update setting response */
    UpdateSettingResponse: {
      content: {
        "application/json": components["schemas"]["UpdateSettingResponse"];
      };
    };
    /** @description Update profile response */
    UpdateProfileResponse: {
      content: {
        "application/json": components["schemas"]["UpdateProfileResponse"];
      };
    };
    /** @description Register response */
    RegisterAuthResponse: {
      content: {
        "application/json": components["schemas"]["RegisterAuthResponse"];
      };
    };
    /** @description Login response */
    LoginAuthResponse: {
      content: {
        "application/json": components["schemas"]["LoginAuthResponse"];
      };
    };
    /** @description Logout response */
    LogoutAuthResponse: {
      content: {
        "application/json": components["schemas"]["LogoutAuthResponse"];
      };
    };
    /** @description Re activate response */
    ReactivateAuthResponse: {
      content: {
        "application/json": components["schemas"]["ReactivateAuthResponse"];
      };
    };
    /** @description Request OTP response */
    RequestOtpResponse: {
      content: {
        "application/json": components["schemas"]["RequestOtpResponse"];
      };
    };
    /** @description Verify OTP response */
    VerifyOtpResponse: {
      content: {
        "application/json": components["schemas"]["VerifyOtpResponse"];
      };
    };
    /** @description Validate identity response */
    ValidateIdentityResponse: {
      content: {
        "application/json": components["schemas"]["ValidateIdentityResponse"];
      };
    };
    /** @description Link identity response */
    LinkExternalIdentityResponse: {
      content: {
        "application/json": components["schemas"]["LinkExternalIdentityResponse"];
      };
    };
    /** @description Get account response */
    AccountResponse: {
      content: {
        "application/json": components["schemas"]["AccountResponse"];
      };
    };
    /** @description Delete account response */
    DeleteAccountResponse: {
      content: {
        "application/json": components["schemas"]["DeleteAccountResponse"];
      };
    };
    /** @description Delete task response */
    CreateTaskResponse: {
      content: {
        "application/json": components["schemas"]["CreateTaskResponse"];
      };
    };
    /** @description Identity response */
    CreateIdentityResponse: {
      content: {
        "application/json": components["schemas"]["CreateIdentityResponse"];
      };
    };
    /** @description Identities response */
    GetIdentitiesResponse: {
      content: {
        "application/json": components["schemas"]["GetIdentitiesResponse"];
      };
    };
    /** @description delete Identities response */
    DeleteIdentityResponse: {
      content: {
        "application/json": components["schemas"]["DeleteIdentityResponse"];
      };
    };
    /** @description Verify Password response */
    VerifyPasswordResponse: {
      content: {
        "application/json": components["schemas"]["VerifyPasswordResponse"];
      };
    };
    /** @description Update Password response */
    UpdatePasswordResponse: {
      content: {
        "application/json": components["schemas"]["VerifyPasswordResponse"];
      };
    };
    /** @description Reset Password response */
    ResetPasswordResponse: {
      content: {
        "application/json": components["schemas"]["ResetPasswordResponse"];
      };
    };
    /** @description QR Token response */
    ShowQRTokenResponse: {
      content: {
        "application/json": components["schemas"]["ShowQRTokenResponse"];
      };
    };
    /** @description QR Token response */
    EncryptedDataResponse: {
      content: {
        "application/json": components["schemas"]["EncryptedDataResponse"];
      };
    };
    /** @description Account data response */
    AccountDataResponse: {
      content: {
        "application/json": components["schemas"]["AccountDataResponse"];
      };
    };
  };
  parameters: {
    AccessToken?: string;
    RequiredAccessToken: string;
    AccountId?: string;
    RequiredAccountId: string;
    /** @description Task name for create job. */
    CreateTaskName: "delete_deactivate_account" | "delete_expired_otp";
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  /** Check health */
  health: {
    responses: {
      200: components["responses"]["HealthResponse"];
      400: components["responses"]["ErrorResp"];
      500: components["responses"]["ErrorResp"];
    };
  };
  /** Get account profile */
  "profile_controller.find": {
    parameters: {
      header: {
        "X-Access-Token": components["parameters"]["RequiredAccessToken"];
        "X-Account-Id"?: components["parameters"]["AccountId"];
      };
    };
    responses: {
      200: components["responses"]["FindProfileResponse"];
      default: components["responses"]["ErrorResp"];
    };
  };
  /** Update profile */
  "profile_controller.update": {
    parameters: {
      header: {
        "X-Access-Token": components["parameters"]["RequiredAccessToken"];
        "X-Account-Id"?: components["parameters"]["AccountId"];
      };
    };
    /** @description Payload to update profile */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateProfileRequestBody"];
      };
    };
    responses: {
      200: components["responses"]["UpdateProfileResponse"];
      400: components["responses"]["ErrorResp"];
      500: components["responses"]["ErrorResp"];
    };
  };
  /** Get user account */
  "account_controller.find": {
    parameters?: {
      header?: {
        "X-Access-Token"?: components["parameters"]["AccessToken"];
      };
    };
    responses: {
      200: components["responses"]["AccountResponse"];
      default: components["responses"]["ErrorResp"];
    };
  };
  /** Delete user account (soft) */
  "account_controller.delete": {
    parameters: {
      header: {
        "X-Access-Token": components["parameters"]["RequiredAccessToken"];
        "X-Account-Id": components["parameters"]["RequiredAccountId"];
      };
    };
    responses: {
      200: components["responses"]["DeleteAccountResponse"];
      default: components["responses"]["ErrorResp"];
    };
  };
  /** Update account password */
  "account_controller.updatePassword": {
    parameters: {
      header: {
        "X-Access-Token": components["parameters"]["RequiredAccessToken"];
        "X-Account-Id": components["parameters"]["RequiredAccountId"];
      };
    };
    /** @description Payload for update password */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdatePasswordRequestBody"];
      };
    };
    responses: {
      200: components["responses"]["UpdatePasswordResponse"];
      default: components["responses"]["ErrorResp"];
    };
  };
  /** Reset account password */
  "account_controller.resetPassword": {
    /** @description Payload for reset password */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ResetPasswordRequestBody"];
      };
    };
    responses: {
      200: components["responses"]["ResetPasswordResponse"];
      default: components["responses"]["ErrorResp"];
    };
  };
  /** Verify current password */
  "account_controller.verifyPassword": {
    parameters: {
      header: {
        "X-Access-Token": components["parameters"]["RequiredAccessToken"];
        "X-Account-Id": components["parameters"]["RequiredAccountId"];
      };
    };
    /** @description Payload for verify password */
    requestBody: {
      content: {
        "application/json": components["schemas"]["VerifyPasswordRequestBody"];
      };
    };
    responses: {
      200: components["responses"]["VerifyPasswordResponse"];
      default: components["responses"]["ErrorResp"];
    };
  };
  /** Get account setting */
  "setting_controller.find": {
    parameters: {
      header: {
        "X-Access-Token": components["parameters"]["RequiredAccessToken"];
        "X-Account-Id": components["parameters"]["RequiredAccountId"];
      };
    };
    responses: {
      200: components["responses"]["FindSettingResponse"];
      default: components["responses"]["ErrorResp"];
    };
  };
  /** Update account setting */
  "setting_controller.update": {
    parameters: {
      header: {
        "X-Access-Token": components["parameters"]["RequiredAccessToken"];
        "X-Account-Id": components["parameters"]["RequiredAccountId"];
      };
    };
    /** @description Payload to update setting */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateSettingRequestBody"];
      };
    };
    responses: {
      200: components["responses"]["UpdateSettingResponse"];
      default: components["responses"]["ErrorResp"];
    };
  };
  /** Job for create task */
  "task_controller.create": {
    parameters: {
      path: {
        task_name: components["parameters"]["CreateTaskName"];
      };
    };
    responses: {
      200: components["responses"]["CreateTaskResponse"];
      default: components["responses"]["ErrorResp"];
    };
  };
  /** Register */
  "auth_controller.register": {
    /** @description Register */
    requestBody: {
      content: {
        "application/json": components["schemas"]["RegisterAuthRequestBody"];
      };
    };
    responses: {
      200: components["responses"]["RegisterAuthResponse"];
      default: components["responses"]["ErrorResp"];
    };
  };
  /** Login */
  "auth_controller.login": {
    parameters?: {
      header?: {
        "X-Access-Token"?: components["parameters"]["AccessToken"];
      };
    };
    /** @description Login */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["LoginAuthRequestBody"];
      };
    };
    responses: {
      200: components["responses"]["LoginAuthResponse"];
      default: components["responses"]["ErrorResp"];
    };
  };
  /** Logout */
  "auth_controller.logout": {
    parameters: {
      header: {
        "X-Access-Token": components["parameters"]["RequiredAccessToken"];
      };
    };
    responses: {
      200: components["responses"]["LogoutAuthResponse"];
      default: components["responses"]["ErrorResp"];
    };
  };
  /** Re activate account */
  "auth_controller.reactivate": {
    parameters?: {
      header?: {
        "X-Access-Token"?: components["parameters"]["AccessToken"];
      };
    };
    /** @description Reactivate */
    requestBody?: {
      content: {
        "application/json": components["schemas"]["ReactivateAuthRequestBody"];
      };
    };
    responses: {
      200: components["responses"]["ReactivateAuthResponse"];
      default: components["responses"]["ErrorResp"];
    };
  };
  /** Request OTP */
  "otp_controller.request": {
    /** @description identity data (email or phone number) */
    requestBody: {
      content: {
        "application/json": components["schemas"]["RequestOtpRequestBody"];
      };
    };
    responses: {
      200: components["responses"]["RequestOtpResponse"];
      default: components["responses"]["ErrorResp"];
    };
  };
  /** Verify OTP */
  "otp_controller.verify": {
    /** @description Verify OTP */
    requestBody: {
      content: {
        "application/json": components["schemas"]["VerifyOtpRequestBody"];
      };
    };
    responses: {
      200: components["responses"]["VerifyOtpResponse"];
      default: components["responses"]["ErrorResp"];
    };
  };
  /** Validate identity */
  "identity_controller.validate": {
    parameters?: {
      query?: {
        provider?: "email" | "phone" | "sso";
        identifier?: string;
        country_code?: string;
      };
    };
    responses: {
      200: components["responses"]["ValidateIdentityResponse"];
      default: components["responses"]["ErrorResp"];
    };
  };
  /** get all Identities */
  "identity_controller.findAll": {
    parameters: {
      query?: {
        provider?: "email" | "phone" | "sso";
      };
      header: {
        "X-Access-Token": components["parameters"]["RequiredAccessToken"];
        "X-Account-Id": components["parameters"]["RequiredAccountId"];
      };
    };
    responses: {
      200: components["responses"]["GetIdentitiesResponse"];
      400: components["responses"]["ErrorResp"];
      500: components["responses"]["ErrorResp"];
    };
  };
  /** create new email or phone to account */
  "identity_controller.create": {
    parameters: {
      header: {
        "X-Access-Token": components["parameters"]["RequiredAccessToken"];
        "X-Account-Id": components["parameters"]["RequiredAccountId"];
      };
    };
    /** @description new Identity */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateIdentityRequestBody"];
      };
    };
    responses: {
      200: components["responses"]["CreateIdentityResponse"];
      400: components["responses"]["ErrorResp"];
      500: components["responses"]["ErrorResp"];
    };
  };
  /** delete email or phone */
  "identity_controller.delete": {
    parameters: {
      header: {
        "X-Access-Token": components["parameters"]["RequiredAccessToken"];
        "X-Account-Id": components["parameters"]["RequiredAccountId"];
      };
    };
    responses: {
      200: components["responses"]["DeleteIdentityResponse"];
      default: components["responses"]["ErrorResp"];
    };
  };
  /** update default identity */
  "identity_controller.default": {
    parameters: {
      header: {
        "X-Access-Token": components["parameters"]["RequiredAccessToken"];
        "X-Account-Id": components["parameters"]["RequiredAccountId"];
      };
    };
    responses: {
      200: components["responses"]["CreateIdentityResponse"];
      400: components["responses"]["ErrorResp"];
      500: components["responses"]["ErrorResp"];
    };
  };
  /** check extenal identity exist */
  "external_identity_controller.link": {
    /** @description Register */
    requestBody: {
      content: {
        "application/json": components["schemas"]["LinkExternalIdentityRequestBody"];
      };
    };
    responses: {
      200: components["responses"]["LinkExternalIdentityResponse"];
      default: components["responses"]["ErrorResp"];
    };
  };
  /** get active qr token */
  "qr_token_controller.show": {
    parameters: {
      header: {
        "X-Access-Token": components["parameters"]["RequiredAccessToken"];
        "X-Account-Id": components["parameters"]["RequiredAccountId"];
      };
    };
    responses: {
      200: components["responses"]["ShowQRTokenResponse"];
      400: components["responses"]["ErrorResp"];
      500: components["responses"]["ErrorResp"];
    };
  };
  /** get active qr token */
  "qr_token_controller.create": {
    parameters: {
      header: {
        "X-Access-Token": components["parameters"]["RequiredAccessToken"];
        "X-Account-Id": components["parameters"]["RequiredAccountId"];
      };
    };
    responses: {
      200: components["responses"]["ShowQRTokenResponse"];
      400: components["responses"]["ErrorResp"];
      500: components["responses"]["ErrorResp"];
    };
  };
  /** get encrypted data from token id */
  "qr_token_controller.getEncryptedData": {
    parameters: {
      header: {
        "X-Access-Token": components["parameters"]["RequiredAccessToken"];
      };
    };
    responses: {
      200: components["responses"]["EncryptedDataResponse"];
      400: components["responses"]["ErrorResp"];
      500: components["responses"]["ErrorResp"];
    };
  };
  /** get account detail */
  "accounts_controller.find": {
    responses: {
      200: components["responses"]["AccountDataResponse"];
      400: components["responses"]["ErrorResp"];
      500: components["responses"]["ErrorResp"];
    };
  };
}
