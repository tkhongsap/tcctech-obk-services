/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/health": {
    /** Check health */
    get: operations["health_controller.get"];
  };
  "/category": {
    /** Get Category by id */
    get: operations["category_controller.get"];
  };
  "/type": {
    /** Get Type */
    get: operations["type_controller.get"];
  };
  "/documents": {
    /** Get documents */
    get: operations["document_controller.getAll"];
  };
  "/documents/{id}": {
    /** Return a document by id or slug */
    get: operations["document_controller.getByIdOrSlug"];
  };
  "/feedback": {
    /** Return feedback by document_id */
    get: operations["feedback_controller.find"];
    /** create new feedback */
    post: operations["feedback_controller.create"];
  };
  "/feedback/{id}": {
    /** update feedback by id */
    put: operations["feedback_controller.update"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Error: {
      /**
       * @example INTERNAL_SERVER_ERROR 
       * @enum {string}
       */
      code: "BAD_REQUEST" | "NOT_FOUND" | "USER_NOT_FOUND" | "INTERNAL_SERVER_ERROR";
      /** @example error message */
      message: string;
    };
    HealthData: {
      health: boolean;
    };
    HealthResponse: {
      data: components["schemas"]["HealthData"];
    };
    DocumentData: {
      id: string;
      title: string;
      image: string;
    };
    DocumentResponseData: (components["schemas"]["DocumentData"])[];
    /** @description object response data which contains an array of DocumentDatas */
    DocumentResponse: {
      data: components["schemas"]["DocumentResponseData"];
    };
    DocumentTypeData: {
      id: string;
      type: string;
    };
    DocumentTypeResponseData: (components["schemas"]["DocumentTypeData"])[];
    DocumentTypeResponse: {
      data: components["schemas"]["DocumentTypeResponseData"];
    };
    DocumentListsData: {
      id: string;
      title: string;
    };
    DocumentListsResponseData: (components["schemas"]["DocumentListsData"])[];
    DocumentListsResponse: {
      data: components["schemas"]["DocumentListsResponseData"];
    };
    DocumentDetailData: {
      document: {
        id: string;
        title: string;
        body: string;
      };
    };
    DocumentDetailResponseData: components["schemas"]["DocumentDetailData"];
    DocumentDetailResponse: {
      data: components["schemas"]["DocumentDetailResponseData"];
    };
    Feedback: {
      id: string;
      document_id: string;
      account_id: string;
      like: boolean;
      created_at: string | null;
      updated_at: string | null;
    };
    GetFeedbackData: (components["schemas"]["Feedback"])[];
    GetFeedbackResponseData: {
      data: components["schemas"]["GetFeedbackData"];
    };
    CreateFeedbackData: {
      document_id: string;
      like: boolean;
    };
    FeedbackResponseData: {
      data: components["schemas"]["Feedback"];
    };
    UpdateFeedbackData: {
      like: boolean;
    };
  };
  responses: {
    /** @description Health response */
    HealthResponse: {
      content: {
        "application/json": components["schemas"]["HealthResponse"];
      };
    };
    /** @description document response */
    DocumentResponse: {
      content: {
        "application/json": components["schemas"]["DocumentResponse"];
      };
    };
    /** @description document response */
    DocumentTypeResponse: {
      content: {
        "application/json": components["schemas"]["DocumentTypeResponse"];
      };
    };
    /** @description document response */
    DocumentListsResponse: {
      content: {
        "application/json": components["schemas"]["DocumentListsResponse"];
      };
    };
    /** @description document response */
    DocumentDetailResponse: {
      content: {
        "application/json": components["schemas"]["DocumentDetailResponse"];
      };
    };
    /** @description get feedback response */
    GetFeedbackResponse: {
      content: {
        "application/json": components["schemas"]["GetFeedbackResponseData"];
      };
    };
    /** @description create feedback response */
    CreateFeedbackResponse: {
      content: {
        "application/json": components["schemas"]["FeedbackResponseData"];
      };
    };
    /** @description create feedback response */
    UpdateFeedbackResponse: {
      content: {
        "application/json": components["schemas"]["FeedbackResponseData"];
      };
    };
    /** @description Unexpected error occurred */
    ErrorResp: {
      content: {
        "application/json": {
          error: components["schemas"]["Error"];
        };
      };
    };
  };
  parameters: {
    /** @description The unique id of items */
    type?: string;
    /** @description title name of category */
    title?: string;
    /** @description The unique id of document */
    documentId?: string;
    /** @description The unique id of user account */
    accountId?: string;
    AccountId?: string;
    RequiredAccountId: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  /** Check health */
  "health_controller.get": {
    responses: {
      200: components["responses"]["HealthResponse"];
      400: components["responses"]["ErrorResp"];
      500: components["responses"]["ErrorResp"];
    };
  };
  /** Get Category by id */
  "category_controller.get": {
    parameters?: {
      query?: {
        /** @description get by id */
        id?: string;
        /** @description get by type */
        type?: string;
      };
    };
    responses: {
      200: components["responses"]["DocumentResponse"];
      400: components["responses"]["ErrorResp"];
      500: components["responses"]["ErrorResp"];
    };
  };
  /** Get Type */
  "type_controller.get": {
    parameters?: {
      query?: {
        /** @description get type */
        name?: string;
      };
    };
    responses: {
      200: components["responses"]["DocumentTypeResponse"];
      400: components["responses"]["ErrorResp"];
      500: components["responses"]["ErrorResp"];
    };
  };
  /** Get documents */
  "document_controller.getAll": {
    parameters: {
      query: {
        /** @description The unique id of category */
        category_id: string;
        /** @description The active flag */
        active: boolean;
        /** @description The released flag */
        released: boolean;
      };
    };
    responses: {
      200: components["responses"]["DocumentListsResponse"];
      400: components["responses"]["ErrorResp"];
      500: components["responses"]["ErrorResp"];
    };
  };
  /** Return a document by id or slug */
  "document_controller.getByIdOrSlug": {
    parameters: {
      path: {
        /** @description The unique id or slug of document */
        id: string;
      };
    };
    responses: {
      200: components["responses"]["DocumentDetailResponse"];
      400: components["responses"]["ErrorResp"];
      500: components["responses"]["ErrorResp"];
    };
  };
  /** Return feedback by document_id */
  "feedback_controller.find": {
    parameters: {
      query?: {
        document_id?: components["parameters"]["documentId"];
      };
      header: {
        "X-Account-Id": components["parameters"]["RequiredAccountId"];
      };
    };
    responses: {
      200: components["responses"]["GetFeedbackResponse"];
      400: components["responses"]["ErrorResp"];
      500: components["responses"]["ErrorResp"];
    };
  };
  /** create new feedback */
  "feedback_controller.create": {
    parameters: {
      header: {
        "X-Account-Id": components["parameters"]["RequiredAccountId"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateFeedbackData"];
      };
    };
    responses: {
      200: components["responses"]["CreateFeedbackResponse"];
      400: components["responses"]["ErrorResp"];
      500: components["responses"]["ErrorResp"];
    };
  };
  /** update feedback by id */
  "feedback_controller.update": {
    parameters: {
      path: {
        /** @description The unique document id */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateFeedbackData"];
      };
    };
    responses: {
      200: components["responses"]["UpdateFeedbackResponse"];
      400: components["responses"]["ErrorResp"];
      500: components["responses"]["ErrorResp"];
    };
  };
}
