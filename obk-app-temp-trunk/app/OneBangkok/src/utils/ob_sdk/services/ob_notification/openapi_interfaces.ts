/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/health': {
    /** Check health */
    get: operations['health'];
  };
  '/me/recipient': {
    /** Create recipient */
    post: operations['recipient_controller.create'];
  };
  '/message_template': {
    /** Create message template */
    post: operations['message_template_controller.create'];
  };
  '/campaign': {
    /**
     * Create campaign
     * @description Create campaign
     */
    post: operations['campaign_controller.create'];
  };
  '/campaign/{id}/start': {
    /**
     * Start sending a campaign
     * @description Initiates the process of sending a campaign notification.
     */
    post: operations['campaign_controller.start'];
  };
  '/me/message': {
    /** Get message */
    get: operations['message_controller.findAll'];
    /** Delate message */
    delete: operations['message_controller.delete'];
  };
  '/me/message/read': {
    /** Update read message */
    put: operations['message_controller.read'];
  };
  '/me/message/{id}': {
    /** Get message detail */
    get: operations['message_controller.find'];
    /** Update message */
    put: operations['message_controller.update'];
  };
  '/me/category/message/count': {
    /** count message category */
    get: operations['message_category_controller.countMessage'];
  };
  '/message_category': {
    /** Get message category */
    get: operations['message_category_controller.findAll'];
  };
  '/notification_setting': {
    /** Get all notification settings */
    get: operations['notification_setting_controller.findAll'];
    /** Update notification setting */
    put: operations['notification_setting_controller.update'];
  };
  '/notification_setting/deactivate': {
    /** deactivate all notification settings */
    put: operations['notification_setting_controller.deactivateAll'];
  };
  '/notification_group': {
    /** get all notification groups with settings */
    get: operations['notification_group_controller.findAll'];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Error: {
      /**
       * @example INTERNAL_SERVER_ERROR
       * @enum {string}
       */
      code:
        | 'BAD_REQUEST'
        | 'NOT_FOUND'
        | 'USER_NOT_FOUND'
        | 'INTERNAL_SERVER_ERROR';
      /** @example error message */
      message: string;
    };
    Result: {
      result: boolean;
    };
    HealthData: {
      health: boolean;
    };
    PaginationData: {
      total?: number;
      limit: number;
      page: number;
      total_pages?: number;
    };
    CountData: {
      id: string;
      name: string;
      total: number;
    };
    CreateRecipientRequest: {
      token: string;
      /** @enum {string} */
      token_type: 'fcm';
    };
    CreateRecipientResponse: {
      data: components['schemas']['Result'];
    };
    CreateMessageTemplateRequest: {
      template: {
        name: string;
        title: string;
        sub_title: string;
        message_category_id: string;
        deeplink?: string;
        thumbnail?: string;
        data: {
          message_data_template_id: string;
          data: Record<string, never>;
        }[];
      };
    };
    CreateMessageTemplateResponse: {
      data: components['schemas']['Result'];
    };
    SendingCampaignResponse: {
      data: components['schemas']['Result'];
    };
    FindAllMessageResponse: {
      data: components['schemas']['FineAllMessageData'];
      meta?: components['schemas']['PaginationData'];
    };
    FineAllMessageData: {
      id: string;
      read: boolean;
      created_at: string;
      title: string;
      sub_title: string;
      deeplink?: string;
      thumbnail?: string;
      category: string;
      icon_url: string;
      data?: components['schemas']['MessageData'];
    }[];
    MessageData: {
      id: string;
      data: Record<string, never>;
    }[];
    GetMessageCategoryResponse: {
      data: components['schemas']['GetMessageCategoryData'];
    };
    GetMessageCategoryData: {
      id: string;
      name: string;
      sequence: number;
    }[];
    CountMessageCategoryResponse: {
      data: components['schemas']['CountMessageCategoryData'];
    };
    CountMessageCategoryData: components['schemas']['CountData'][];
    UpdateMessageRequest: {
      read?: boolean;
    };
    UpdateMessageResponse: {
      data: components['schemas']['Result'];
    };
    ReadMessageResponse: {
      data: components['schemas']['Result'];
    };
    DeleteMessageResponse: {
      data: components['schemas']['Result'];
    };
    GetMessageResponse: {
      data: components['schemas']['GetMessageData'];
    };
    GetMessageData: {
      id: string;
      read: boolean;
      created_at: string;
      title: string;
      sub_title: string;
      category: string;
      data: components['schemas']['MessageData'];
      deeplink: string | null;
      tag: string[];
      thumbnail: string | null;
    };
    CreateCampaignRequest: {
      message_template_id: string;
      name: string;
    };
    CreateCampaignResponse: {
      data: components['schemas']['Result'];
    };
    DeleteMessageRequestBody: {
      exclude?: string[];
      include?: string[];
    };
    ReadMessageRequestBody: {
      exclude?: string[];
      include?: string[];
    };
    FindAllNotificationSettingResponse: {
      id: string;
      sms_enabled: boolean;
      email_enabled: boolean;
      in_app_enabled: boolean;
      push_enabled: boolean;
    }[];
    UpdateNotificationSettingRequest: {
      id: string;
      sms_enabled: boolean;
      email_enabled: boolean;
      in_app_enabled: boolean;
      push_enabled: boolean;
    };
    UpdateNotificationSettingResponse: {
      data: components['schemas']['Result'];
    };
    FindAllNotificationGroupResponse: {
      groupId: string;
      groupName: string;
      settings: {
        sms_enabled: boolean;
        email_enabled: boolean;
        in_app_enabled: boolean;
        push_enabled: boolean;
      };
    }[];
    DeactivateAllNotificationSettingResponse: {
      data: components['schemas']['Result'];
    };
  };
  responses: {
    /** @description Health response */
    HealthResponse: {
      content: {
        'application/json': {
          data: components['schemas']['HealthData'];
        };
      };
    };
    /** @description Unexpected error occurred */
    ErrorResp: {
      content: {
        'application/json': {
          error: components['schemas']['Error'];
        };
      };
    };
    /** @description Create recipient response */
    CreateRecipientResponse: {
      content: {
        'application/json': components['schemas']['CreateRecipientResponse'];
      };
    };
    /** @description Create message template response */
    CreateMessageTemplateResponse: {
      content: {
        'application/json': {
          data: components['schemas']['CreateMessageTemplateResponse'];
        };
      };
    };
    /** @description Sending campaign response */
    SendingCampaignResponse: {
      content: {
        'application/json': {
          data: components['schemas']['SendingCampaignResponse'];
        };
      };
    };
    /** @description create campaign response */
    CreateCampaignResponse: {
      content: {
        'application/json': {
          data: components['schemas']['CreateCampaignResponse'];
        };
      };
    };
    /** @description Get message response */
    FindAllMessageResponse: {
      content: {
        'application/json': components['schemas']['FindAllMessageResponse'];
      };
    };
    /** @description Get count message category response */
    CountMessageCategoryResponse: {
      content: {
        'application/json': components['schemas']['CountMessageCategoryResponse'];
      };
    };
    /** @description Get message category response */
    GetMessageCategoryResponse: {
      content: {
        'application/json': components['schemas']['GetMessageCategoryResponse'];
      };
    };
    /** @description Update message response */
    UpdateMessageResponse: {
      content: {
        'application/json': components['schemas']['UpdateMessageResponse'];
      };
    };
    /** @description Read all message response */
    ReadMessageResponse: {
      content: {
        'application/json': components['schemas']['ReadMessageResponse'];
      };
    };
    /** @description Delete message response */
    DeleteMessageResponse: {
      content: {
        'application/json': components['schemas']['DeleteMessageResponse'];
      };
    };
    /** @description Get message response */
    GetMessageResponse: {
      content: {
        'application/json': components['schemas']['GetMessageResponse'];
      };
    };
    /** @description Get all notification setting response */
    FindAllNotificationSettingResponse: {
      content: {
        'application/json': components['schemas']['FindAllNotificationSettingResponse'];
      };
    };
    /** @description update notification setting response */
    UpdateNotificationSettingResponse: {
      content: {
        'application/json': components['schemas']['UpdateNotificationSettingResponse'];
      };
    };
    /** @description Get all notification groups and its setting value */
    FindAllNotificationGroupResponse: {
      content: {
        'application/json': components['schemas']['FindAllNotificationGroupResponse'];
      };
    };
    /** @description deactivate all notification settings response */
    DeactivateAllNotificationSettingResponse: {
      content: {
        'application/json': components['schemas']['DeactivateAllNotificationSettingResponse'];
      };
    };
  };
  parameters: {
    /** @description limit of page size */
    PaginationLimit?: number;
    /** @description page number */
    PaginationPage?: number;
    /** @description query order by a ascending or descending */
    PaginationOrder?: 'desc' | 'asc';
    /** @description sort by */
    PaginationSort?: string;
    /** @description count of total record. If count is not provided or value is false, total_pages and total will undefined in response */
    PaginationCount?: boolean;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {
  /** Check health */
  health: {
    responses: {
      200: components['responses']['HealthResponse'];
      400: components['responses']['ErrorResp'];
      500: components['responses']['ErrorResp'];
    };
  };
  /** Create recipient */
  'recipient_controller.create': {
    parameters: {
      header: {
        'X-Account-Id': string;
        'X-Access-Token': string;
      };
    };
    /** @description data for create recipient */
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateRecipientRequest'];
      };
    };
    responses: {
      200: components['responses']['CreateRecipientResponse'];
      default: components['responses']['ErrorResp'];
    };
  };
  /** Create message template */
  'message_template_controller.create': {
    /** @description data for create message template */
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateMessageTemplateRequest'];
      };
    };
    responses: {
      200: components['responses']['CreateMessageTemplateResponse'];
      default: components['responses']['ErrorResp'];
    };
  };
  /**
   * Create campaign
   * @description Create campaign
   */
  'campaign_controller.create': {
    /** @description data for create message template */
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateCampaignRequest'];
      };
    };
    responses: {
      200: components['responses']['CreateCampaignResponse'];
      default: components['responses']['ErrorResp'];
    };
  };
  /**
   * Start sending a campaign
   * @description Initiates the process of sending a campaign notification.
   */
  'campaign_controller.start': {
    parameters: {
      path: {
        /** @description The ID of the campaign. */
        id: string;
      };
    };
    responses: {
      200: components['responses']['SendingCampaignResponse'];
      default: components['responses']['ErrorResp'];
    };
  };
  /** Get message */
  'message_controller.findAll': {
    parameters: {
      query?: {
        /** @description The unique id of category */
        category?: string;
        limit?: components['parameters']['PaginationLimit'];
        page?: components['parameters']['PaginationPage'];
        order?: components['parameters']['PaginationOrder'];
        sort?: components['parameters']['PaginationSort'];
        count?: components['parameters']['PaginationCount'];
      };
      header: {
        'X-Account-Id': string;
        'Accept-Language'?: string;
        'X-Access-Token': string;
      };
    };
    responses: {
      200: components['responses']['FindAllMessageResponse'];
      default: components['responses']['ErrorResp'];
    };
  };
  /** Delate message */
  'message_controller.delete': {
    parameters: {
      header: {
        'X-Account-Id': string;
        'X-Access-Token': string;
      };
    };
    /** @description message ids */
    requestBody: {
      content: {
        'application/json': components['schemas']['DeleteMessageRequestBody'];
      };
    };
    responses: {
      200: components['responses']['DeleteMessageResponse'];
      default: components['responses']['ErrorResp'];
    };
  };
  /** Update read message */
  'message_controller.read': {
    parameters: {
      header: {
        'X-Account-Id': string;
        'X-Access-Token': string;
      };
    };
    /** @description message ids */
    requestBody: {
      content: {
        'application/json': components['schemas']['ReadMessageRequestBody'];
      };
    };
    responses: {
      200: components['responses']['ReadMessageResponse'];
      default: components['responses']['ErrorResp'];
    };
  };
  /** Get message detail */
  'message_controller.find': {
    parameters: {
      header: {
        'X-Account-Id': string;
        'X-Access-Token': string;
      };
      path: {
        /** @description The ID of the message. */
        id: string;
      };
    };
    responses: {
      200: components['responses']['GetMessageResponse'];
      default: components['responses']['ErrorResp'];
    };
  };
  /** Update message */
  'message_controller.update': {
    parameters: {
      header: {
        'X-Account-Id': string;
        'X-Access-Token': string;
      };
      path: {
        /** @description The ID of the message. */
        id: string;
      };
    };
    /** @description data for update message */
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateMessageRequest'];
      };
    };
    responses: {
      200: components['responses']['UpdateMessageResponse'];
      default: components['responses']['ErrorResp'];
    };
  };
  /** count message category */
  'message_category_controller.countMessage': {
    parameters: {
      query?: {
        /** @description The name of category */
        category?: string;
        /** @description return only read message if true and unread message if value is false. If value is undefined, It will response both read and unread. */
        read?: boolean;
      };
      header: {
        'X-Account-Id': string;
        'X-Access-Token': string;
      };
    };
    responses: {
      200: components['responses']['CountMessageCategoryResponse'];
      default: components['responses']['ErrorResp'];
    };
  };
  /** Get message category */
  'message_category_controller.findAll': {
    parameters: {
      header: {
        'X-Account-Id': string;
        'X-Access-Token': string;
      };
    };
    responses: {
      200: components['responses']['GetMessageCategoryResponse'];
      default: components['responses']['ErrorResp'];
    };
  };
  /** Get all notification settings */
  'notification_setting_controller.findAll': {
    parameters: {
      query: {
        /** @description notification group id */
        notification_group_id: string;
      };
      header: {
        'X-Access-Token': string;
        'X-Account-Id': string;
      };
    };
    responses: {
      200: components['responses']['FindAllNotificationSettingResponse'];
      default: components['responses']['ErrorResp'];
    };
  };
  /** Update notification setting */
  'notification_setting_controller.update': {
    parameters: {
      header: {
        'X-Access-Token': string;
        'X-Account-Id': string;
      };
    };
    /** @description data for update notification setting */
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateNotificationSettingRequest'];
      };
    };
    responses: {
      200: components['responses']['UpdateNotificationSettingResponse'];
      default: components['responses']['ErrorResp'];
    };
  };
  /** deactivate all notification settings */
  'notification_setting_controller.deactivateAll': {
    parameters: {
      header: {
        'X-Access-Token': string;
        'X-Account-Id': string;
      };
    };
    responses: {
      200: components['responses']['DeactivateAllNotificationSettingResponse'];
      default: components['responses']['ErrorResp'];
    };
  };
  /** get all notification groups with settings */
  'notification_group_controller.findAll': {
    parameters: {
      header: {
        'X-Access-Token': string;
        'X-Account-Id': string;
      };
    };
    responses: {
      200: components['responses']['FindAllNotificationGroupResponse'];
      default: components['responses']['ErrorResp'];
    };
  };
}
