# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

def cleanup_keychain(name)
  delete_keychain(name: name) if File.exist?(File.expand_path("~/Library/Keychains/#{name}-db"))
end

def process_version(version)
  version = version[1..-1] if version.start_with?('v')  # Remove 'v' if it starts with 'v'
  hyphen_index = version.index('-')
  version = version[0...hyphen_index] unless hyphen_index.nil?  # Remove '-...' suffix
  version
end

platform :ios do
  before_all do |lane|
    Dotenv.overload '../../.env'
    environment = lane_context[SharedValues::ENVIRONMENT]
    unless environment.nil?
        puts "Load .env file of #{environment}"
        Dotenv.overload '../../.env.' + environment

        ENV.each do |key, value|
          puts "#{key}: #{value}"
        end        
    end
  end

  desc "Push an alpha build to App Distribution"
  lane :alpha do
    # app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    app_identifier = "mtel.onebangkok.dev"
    profile_name = "match Development mtel.onebangkok.dev"
    setup_ci

    app_id = "1:300033733234:ios:1ff4855b81db832a2cc8eb"

    firebase_app_distribution_get_udids(
      app: app_id,
      service_credentials_file: "service-account.json",
      output_file: "udids.txt"
    )

    app_store_connect_api_key(
      key_id: ENV["APP_STORE_CONNECT_API_KEY_KEY_ID"],
      issuer_id: ENV["APP_STORE_CONNECT_API_KEY_ISSUER_ID"],
      key_content: ENV["APP_STORE_CONNECT_API_KEY_KEY"],
      in_house: false,
    )

    register_devices(
      devices_file: "./udids.txt"
    )

    match(
      type: 'development',
      git_basic_authorization: ENV["MATCH_GIT_BASIC_AUTHORIZATION"],
      force_for_new_devices: true,
      app_identifier: 'mtel.onebangkok.dev',
      git_url: 'https://github.com/mtel-thailand/one-bangkok-certificates.git',
    )

    latest_release = firebase_app_distribution_get_latest_release(
      app: app_id,
      service_credentials_file: "service-account.json"
    )

    increment_build_number({ 
      build_number: (latest_release ? latest_release[:buildVersion].to_i : 0) + 1
    })
    build_app(
      workspace: "OneBangkok.xcworkspace",
      scheme: "OneBangkok",
      export_options: {
        signingStyle: "manual",
        method: 'development',
        provisioningProfiles: {
          app_identifier => profile_name
        },
      },
      skip_profile_detection: true
    )

    release = firebase_app_distribution(
      app: app_id,
      service_credentials_file: "service-account.json",
      groups: "internal, tcct"
    )

    # Call cleanup_keychain after you're done with the temporary keychain
    cleanup_keychain("fastlane_tmp_keychain")

  end

  desc "Push an bump build to App Distribution"
  lane :bump do
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    profile_name = "match Development mtel.onebangkok.dev"
    setup_ci

    app_id = "1:300033733234:ios:1ff4855b81db832a2cc8eb"

    firebase_app_distribution_get_udids(
      app: app_id,
      service_credentials_file: "service-account.json",
      output_file: "udids.txt"
    )

    app_store_connect_api_key(
      key_id: ENV["APP_STORE_CONNECT_API_KEY_KEY_ID"],
      issuer_id: ENV["APP_STORE_CONNECT_API_KEY_ISSUER_ID"],
      key_content: ENV["APP_STORE_CONNECT_API_KEY_KEY"],
      in_house: false,
    )

    register_devices(
      devices_file: "./udids.txt"
    )

    match(
      type: 'development',
      git_basic_authorization: ENV["MATCH_GIT_BASIC_AUTHORIZATION"],
      force_for_new_devices: true,
      app_identifier: 'mtel.onebangkok.dev',
      git_url: 'https://github.com/mtel-thailand/one-bangkok-certificates.git',
    )

    version_no = ENV["RELEASE_VERSION"]
    increment_version_number(
      version_number: version_no[1..-1]
    )

    latest_release = firebase_app_distribution_get_latest_release(
      app: app_id,
      service_credentials_file: "service-account.json"
    )

    increment_build_number({
      build_number: (latest_release ? latest_release[:buildVersion].to_i : 0) + 1
    })
    build_app(
      workspace: "OneBangkok.xcworkspace",
      scheme: "OneBangkok",
      export_options: {
        signingStyle: "manual",
        method: 'development',
        provisioningProfiles: {
          app_identifier => profile_name
        },
      },
      skip_profile_detection: true
    )

    release = firebase_app_distribution(
      app: app_id,
      service_credentials_file: "service-account.json",
      groups: "internal, tcct"
    )

    # Call cleanup_keychain after you're done with the temporary keychain
    cleanup_keychain("fastlane_tmp_keychain")

  end

  desc "Push a new beta build to TestFlight"
  lane :beta do
    setup_ci

    app_store_connect_api_key(
      key_id: ENV["APP_STORE_CONNECT_API_KEY_KEY_ID"],
      issuer_id: ENV["APP_STORE_CONNECT_API_KEY_ISSUER_ID"],
      key_content: ENV["APP_STORE_CONNECT_API_KEY_KEY"],
      in_house: false,
    )

    match(type: 'appstore', git_basic_authorization: ENV["MATCH_GIT_BASIC_AUTHORIZATION"], force_for_new_devices: true)
    increment_build_number({
      build_number: latest_testflight_build_number + 1
    })
    build_app(workspace: "OneBangkok.xcworkspace", scheme: "OneBangkok")
    upload_to_testflight(skip_waiting_for_build_processing: true)
  end

  desc "Push an SIT build to App Distribution"
  lane :sit do
    app_identifier = "mtel.onebangkok.sit"
    profile_name = "match Development mtel.onebangkok.sit"
    setup_ci

    app_id = "1:300033733234:ios:021f09a359d5cc942cc8eb"

    firebase_app_distribution_get_udids(
      app: app_id,
      service_credentials_file: "service-account.json",
      output_file: "udids.txt"
    )

    app_store_connect_api_key(
      key_id: ENV["APP_STORE_CONNECT_API_KEY_KEY_ID"],
      issuer_id: ENV["APP_STORE_CONNECT_API_KEY_ISSUER_ID"],
      key_content: ENV["APP_STORE_CONNECT_API_KEY_KEY"],
      in_house: false,
    )

    register_devices(
      devices_file: "./udids.txt"
    )

    match(
      type: 'development', 
      git_basic_authorization: ENV["MATCH_GIT_BASIC_AUTHORIZATION"], 
      force_for_new_devices: true, 
      app_identifier: 'mtel.onebangkok.sit', 
      git_url: 'https://github.com/mtel-thailand/one-bangkok-certificates.git',
    )

    version_no = ENV["RELEASE_VERSION"]
    increment_version_number(
      version_number: process_version(version_no)
    )

    latest_release = firebase_app_distribution_get_latest_release(
      app: app_id,
      service_credentials_file: "service-account.json"
    )

    increment_build_number({ 
      build_number: (latest_release ? latest_release[:buildVersion].to_i : 0) + 1
    })
    build_app(
      workspace: "OneBangkok.xcworkspace",
      scheme: "OneBangkokSIT",
      export_options: {
        signingStyle: "manual",
        method: 'development',
        provisioningProfiles: {
          app_identifier => profile_name
        },
      },
      skip_profile_detection: true,
    )

    release = firebase_app_distribution(
      app: app_id,
      service_credentials_file: "service-account.json",
      groups: "internal, tcct"
    )

    # Call cleanup_keychain after you're done with the temporary keychain
    cleanup_keychain("fastlane_tmp_keychain")

  end

  desc "Build IPA UAT"
  lane :build_uat do
    build_app(
      workspace: "OneBangkok.xcworkspace",
      scheme: "OneBangkokUAT",
      export_options: {
        method: 'app-store',
        provisioningProfiles: {
          'com.tcc-technology.one-bangkok.uat' => 'One Bangkok UAT'
        },
      },      
    )
    upload_to_testflight(skip_waiting_for_build_processing: true)
  end

  desc "Build IPA PROD"
  lane :build_prod do
    build_app(
      workspace: "OneBangkok.xcworkspace",
      scheme: "OneBangkokPROD",
      export_options: {
        method: 'app-store',
        provisioningProfiles: {
          'com.tcc-technology.one-bangkok' => 'One Bangkok PROD'
        },
      },      
    )
    upload_to_testflight(skip_waiting_for_build_processing: true)
  end  
end
