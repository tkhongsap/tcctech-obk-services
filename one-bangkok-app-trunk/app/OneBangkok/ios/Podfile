require_relative '../node_modules/react-native/scripts/react_native_pods'
require_relative '../node_modules/@react-native-community/cli-platform-ios/native_modules'
 MIN_IOS_OVERRIDE = '13.0'
 if Gem::Version.new(MIN_IOS_OVERRIDE) > Gem::Version.new(min_ios_version_supported)
     min_ios_version_supported = MIN_IOS_OVERRIDE
 end
 
 platform :ios, min_ios_version_supported
 prepare_react_native_project!
 
 pod 'Firebase', :modular_headers => true 
 pod 'FirebaseAnalytics', :modular_headers => true 
 pod 'FirebaseCore', :modular_headers => true 
 pod 'GoogleUtilities', :modular_headers => true
 pod 'FirebaseSessions', :modular_headers => true
 pod 'FirebaseCoreExtension', :modular_headers => true
 pod 'FirebaseInstallations', :modular_headers => true
 pod 'GoogleDataTransport', :modular_headers => true
 pod 'nanopb', :modular_headers => true
 pod 'FirebaseInAppMessaging', '~> 10.20.0-beta', :modular_headers => true
 pod 'FirebaseABTesting', :modular_headers => true
 pod 'EstimoteProximitySDK'
 pod 'ReachabilitySwift'

 
 # If you are using a `react-native-flipper` your iOS build will fail when `NO_FLIPPER=1` is set.
 # because `react-native-flipper` depends on (FlipperKit,...) that will be excluded
 #
 # To fix this you can also exclude `react-native-flipper` using a `react-native.config.js`
 # ```js
 # module.exports = {
 #   dependencies: {
 #     ...(process.env.NO_FLIPPER ? { 'react-native-flipper': { platforms: { ios: null } } } : {}),
 # ```
flipper_config = ENV['NO_FLIPPER'] == "1" ? FlipperConfiguration.disabled : FlipperConfiguration.enabled

 
 linkage = ENV['USE_FRAMEWORKS']
 if linkage != nil
   Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green
   use_frameworks! :linkage => linkage.to_sym
 end
 
 abstract_target 'OneBangkokCommonPods' do
   target 'OneBangkok' do
   end
  
   target 'OneBangkokSIT' do
   end
 
   target 'OneBangkokUAT' do
   end
 
   target 'OneBangkokPROD' do
   end  
 
   config = use_native_modules!
 
   # Flags change depending on the env values.
   flags = get_default_flags()
 
   # For extensions without React dependencies
   pod 'react-native-config/Extension', :path => '../node_modules/react-native-config'
 
   use_react_native!(
     :path => config[:reactNativePath],
     # Hermes is now enabled by default. Disable by setting this flag to false.
     # Upcoming versions of React Native may rely on get_default_flags(), but
     # we make it explicit here to aid in the React Native upgrade process.
     :hermes_enabled => flags[:hermes_enabled],
     :fabric_enabled => flags[:fabric_enabled],
     # Enables Flipper.
     #
     # Note that if you have use_frameworks! enabled, Flipper will not work and
     # you should disable the next line.
     :flipper_configuration => flipper_config,
     # An absolute path to your application root.
     :app_path => "#{Pod::Config.instance.installation_root}/.."
   )
 
   target 'OneBangkokTests' do
     inherit! :complete
     # Pods for testing
   end
 
   post_install do |installer|
      bitcode_strip_path = `xcrun --find bitcode_strip`.chop!
      def strip_bitcode_from_framework(bitcode_strip_path, framework_relative_path)
        framework_path = File.join(Dir.pwd, framework_relative_path)
        command = "#{bitcode_strip_path} #{framework_path} -r -o #{framework_path}"
        puts "Stripping bitcode: #{command}"
        system(command)
      end
  
      framework_paths = [
        "Pods/LogRocket/LogRocket.xcframework/ios-arm64/LogRocket.framework/LogRocket",
        "Pods/hermes-engine/destroot/Library/Frameworks/macosx/hermes.framework/hermes",
        "Pods/hermes-engine/destroot/Library/Frameworks/macosx/hermes.framework/Versions/Current/hermes",
        "Pods/hermes-engine/destroot/Library/Frameworks/universal/hermes.xcframework/ios-arm64/hermes.framework/hermes",
        "Pods/hermes-engine/destroot/Library/Frameworks/universal/hermes.xcframework/ios-arm64_x86_64-maccatalyst/hermes.framework/hermes"
      ]
  
      framework_paths.each do |framework_relative_path|
        strip_bitcode_from_framework(bitcode_strip_path, framework_relative_path)
      end
     react_native_post_install(
       installer,
       # Set `mac_catalyst_enabled` to `true` in order to apply patches
       # necessary for Mac Catalyst builds
       :mac_catalyst_enabled => false
     )
     __apply_Xcode_12_5_M1_post_install_workaround(installer)
      installer.pods_project.targets.each do |target|
        target.build_configurations.each do |config|
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)', '_LIBCPP_ENABLE_CXX17_REMOVED_UNARY_BINARY_FUNCTION']
          config.build_settings['ENABLE_BITCODE'] = 'NO'
        end
        if target.name == 'Flipper'
          file_path = 'Pods/Flipper/xplat/Flipper/FlipperTransportTypes.h'
          contents = File.read(file_path)
          unless contents.include?('#include <functional>')
            File.chmod(0755, file_path)
            File.open(file_path, 'w') do |file|
              file.puts('#include <functional>')
              file.puts(contents)
            end
          end
        end
      end
   end
 end
 
 def node_require(script)
    # Resolve script with node to allow for hoisting
    require Pod::Executable.execute_command('node', ['-p',
      "require.resolve(
        '#{script}',
        {paths: [process.argv[1]]},
      )", __dir__]).strip
  end
 
 node_require('react-native/scripts/react_native_pods.rb')
 node_require('react-native-permissions/scripts/setup.rb')
 
 setup_permissions([
   # 'AppTrackingTransparency',
   'BluetoothPeripheral',
   # 'Calendars',
   'Camera',
   # 'Contacts',
   # 'FaceID',
   'LocationAccuracy',
   'LocationAlways',
   'LocationWhenInUse',
   # 'MediaLibrary',
   # 'Microphone',
   # 'Motion',
   'Notifications',
   'PhotoLibrary',
   # 'PhotoLibraryAddOnly',
   # 'Reminders',
   # 'Siri',
   # 'SpeechRecognition',
   # 'StoreKit',
 ])
