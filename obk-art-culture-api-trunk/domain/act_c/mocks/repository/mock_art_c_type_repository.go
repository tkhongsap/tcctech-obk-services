// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	entity "example.com/art-culture-api/domain/act_c/entity"
	mock "github.com/stretchr/testify/mock"

	model "example.com/art-culture-api/domain/act_c/model"
)

// MockArtCTypeRepository is an autogenerated mock type for the ArtCTypeRepository type
type MockArtCTypeRepository struct {
	mock.Mock
}

type MockArtCTypeRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockArtCTypeRepository) EXPECT() *MockArtCTypeRepository_Expecter {
	return &MockArtCTypeRepository_Expecter{mock: &_m.Mock}
}

// CreateOrUpdate provides a mock function with given fields: artCType, artCTranslation
func (_m *MockArtCTypeRepository) CreateOrUpdate(artCType entity.ArtCType, artCTranslation entity.ArtCTranslation) (entity.ArtCType, error) {
	ret := _m.Called(artCType, artCTranslation)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdate")
	}

	var r0 entity.ArtCType
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.ArtCType, entity.ArtCTranslation) (entity.ArtCType, error)); ok {
		return rf(artCType, artCTranslation)
	}
	if rf, ok := ret.Get(0).(func(entity.ArtCType, entity.ArtCTranslation) entity.ArtCType); ok {
		r0 = rf(artCType, artCTranslation)
	} else {
		r0 = ret.Get(0).(entity.ArtCType)
	}

	if rf, ok := ret.Get(1).(func(entity.ArtCType, entity.ArtCTranslation) error); ok {
		r1 = rf(artCType, artCTranslation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockArtCTypeRepository_CreateOrUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdate'
type MockArtCTypeRepository_CreateOrUpdate_Call struct {
	*mock.Call
}

// CreateOrUpdate is a helper method to define mock.On call
//   - artCType entity.ArtCType
//   - artCTranslation entity.ArtCTranslation
func (_e *MockArtCTypeRepository_Expecter) CreateOrUpdate(artCType interface{}, artCTranslation interface{}) *MockArtCTypeRepository_CreateOrUpdate_Call {
	return &MockArtCTypeRepository_CreateOrUpdate_Call{Call: _e.mock.On("CreateOrUpdate", artCType, artCTranslation)}
}

func (_c *MockArtCTypeRepository_CreateOrUpdate_Call) Run(run func(artCType entity.ArtCType, artCTranslation entity.ArtCTranslation)) *MockArtCTypeRepository_CreateOrUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entity.ArtCType), args[1].(entity.ArtCTranslation))
	})
	return _c
}

func (_c *MockArtCTypeRepository_CreateOrUpdate_Call) Return(_a0 entity.ArtCType, _a1 error) *MockArtCTypeRepository_CreateOrUpdate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockArtCTypeRepository_CreateOrUpdate_Call) RunAndReturn(run func(entity.ArtCType, entity.ArtCTranslation) (entity.ArtCType, error)) *MockArtCTypeRepository_CreateOrUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByID provides a mock function with given fields: id
func (_m *MockArtCTypeRepository) DeleteByID(id uint) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockArtCTypeRepository_DeleteByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByID'
type MockArtCTypeRepository_DeleteByID_Call struct {
	*mock.Call
}

// DeleteByID is a helper method to define mock.On call
//   - id uint
func (_e *MockArtCTypeRepository_Expecter) DeleteByID(id interface{}) *MockArtCTypeRepository_DeleteByID_Call {
	return &MockArtCTypeRepository_DeleteByID_Call{Call: _e.mock.On("DeleteByID", id)}
}

func (_c *MockArtCTypeRepository_DeleteByID_Call) Run(run func(id uint)) *MockArtCTypeRepository_DeleteByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *MockArtCTypeRepository_DeleteByID_Call) Return(_a0 error) *MockArtCTypeRepository_DeleteByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockArtCTypeRepository_DeleteByID_Call) RunAndReturn(run func(uint) error) *MockArtCTypeRepository_DeleteByID_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function with given fields: id, locale
func (_m *MockArtCTypeRepository) Find(id uint, locale string) (entity.ArtCType, error) {
	ret := _m.Called(id, locale)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 entity.ArtCType
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, string) (entity.ArtCType, error)); ok {
		return rf(id, locale)
	}
	if rf, ok := ret.Get(0).(func(uint, string) entity.ArtCType); ok {
		r0 = rf(id, locale)
	} else {
		r0 = ret.Get(0).(entity.ArtCType)
	}

	if rf, ok := ret.Get(1).(func(uint, string) error); ok {
		r1 = rf(id, locale)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockArtCTypeRepository_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockArtCTypeRepository_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - id uint
//   - locale string
func (_e *MockArtCTypeRepository_Expecter) Find(id interface{}, locale interface{}) *MockArtCTypeRepository_Find_Call {
	return &MockArtCTypeRepository_Find_Call{Call: _e.mock.On("Find", id, locale)}
}

func (_c *MockArtCTypeRepository_Find_Call) Run(run func(id uint, locale string)) *MockArtCTypeRepository_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(string))
	})
	return _c
}

func (_c *MockArtCTypeRepository_Find_Call) Return(_a0 entity.ArtCType, _a1 error) *MockArtCTypeRepository_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockArtCTypeRepository_Find_Call) RunAndReturn(run func(uint, string) (entity.ArtCType, error)) *MockArtCTypeRepository_Find_Call {
	_c.Call.Return(run)
	return _c
}

// FindAll provides a mock function with given fields: locale
func (_m *MockArtCTypeRepository) FindAll(locale string) ([]entity.ArtCType, error) {
	ret := _m.Called(locale)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []entity.ArtCType
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]entity.ArtCType, error)); ok {
		return rf(locale)
	}
	if rf, ok := ret.Get(0).(func(string) []entity.ArtCType); ok {
		r0 = rf(locale)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ArtCType)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(locale)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockArtCTypeRepository_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type MockArtCTypeRepository_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
//   - locale string
func (_e *MockArtCTypeRepository_Expecter) FindAll(locale interface{}) *MockArtCTypeRepository_FindAll_Call {
	return &MockArtCTypeRepository_FindAll_Call{Call: _e.mock.On("FindAll", locale)}
}

func (_c *MockArtCTypeRepository_FindAll_Call) Run(run func(locale string)) *MockArtCTypeRepository_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockArtCTypeRepository_FindAll_Call) Return(_a0 []entity.ArtCType, _a1 error) *MockArtCTypeRepository_FindAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockArtCTypeRepository_FindAll_Call) RunAndReturn(run func(string) ([]entity.ArtCType, error)) *MockArtCTypeRepository_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// OrderItems provides a mock function with given fields: ids
func (_m *MockArtCTypeRepository) OrderItems(ids []uint) error {
	ret := _m.Called(ids)

	if len(ret) == 0 {
		panic("no return value specified for OrderItems")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]uint) error); ok {
		r0 = rf(ids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockArtCTypeRepository_OrderItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrderItems'
type MockArtCTypeRepository_OrderItems_Call struct {
	*mock.Call
}

// OrderItems is a helper method to define mock.On call
//   - ids []uint
func (_e *MockArtCTypeRepository_Expecter) OrderItems(ids interface{}) *MockArtCTypeRepository_OrderItems_Call {
	return &MockArtCTypeRepository_OrderItems_Call{Call: _e.mock.On("OrderItems", ids)}
}

func (_c *MockArtCTypeRepository_OrderItems_Call) Run(run func(ids []uint)) *MockArtCTypeRepository_OrderItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]uint))
	})
	return _c
}

func (_c *MockArtCTypeRepository_OrderItems_Call) Return(_a0 error) *MockArtCTypeRepository_OrderItems_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockArtCTypeRepository_OrderItems_Call) RunAndReturn(run func([]uint) error) *MockArtCTypeRepository_OrderItems_Call {
	_c.Call.Return(run)
	return _c
}

// PageContent provides a mock function with given fields: locale, id
func (_m *MockArtCTypeRepository) PageContent(locale string, id uint) (model.ArtCTypePageContent, error) {
	ret := _m.Called(locale, id)

	if len(ret) == 0 {
		panic("no return value specified for PageContent")
	}

	var r0 model.ArtCTypePageContent
	var r1 error
	if rf, ok := ret.Get(0).(func(string, uint) (model.ArtCTypePageContent, error)); ok {
		return rf(locale, id)
	}
	if rf, ok := ret.Get(0).(func(string, uint) model.ArtCTypePageContent); ok {
		r0 = rf(locale, id)
	} else {
		r0 = ret.Get(0).(model.ArtCTypePageContent)
	}

	if rf, ok := ret.Get(1).(func(string, uint) error); ok {
		r1 = rf(locale, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockArtCTypeRepository_PageContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PageContent'
type MockArtCTypeRepository_PageContent_Call struct {
	*mock.Call
}

// PageContent is a helper method to define mock.On call
//   - locale string
//   - id uint
func (_e *MockArtCTypeRepository_Expecter) PageContent(locale interface{}, id interface{}) *MockArtCTypeRepository_PageContent_Call {
	return &MockArtCTypeRepository_PageContent_Call{Call: _e.mock.On("PageContent", locale, id)}
}

func (_c *MockArtCTypeRepository_PageContent_Call) Run(run func(locale string, id uint)) *MockArtCTypeRepository_PageContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uint))
	})
	return _c
}

func (_c *MockArtCTypeRepository_PageContent_Call) Return(_a0 model.ArtCTypePageContent, _a1 error) *MockArtCTypeRepository_PageContent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockArtCTypeRepository_PageContent_Call) RunAndReturn(run func(string, uint) (model.ArtCTypePageContent, error)) *MockArtCTypeRepository_PageContent_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockArtCTypeRepository creates a new instance of MockArtCTypeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockArtCTypeRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockArtCTypeRepository {
	mock := &MockArtCTypeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
