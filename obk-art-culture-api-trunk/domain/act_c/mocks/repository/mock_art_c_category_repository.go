// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	entity "example.com/art-culture-api/domain/act_c/entity"
	mock "github.com/stretchr/testify/mock"

	model "example.com/art-culture-api/domain/act_c/model"
)

// MockArtCCategoryRepository is an autogenerated mock type for the ArtCCategoryRepository type
type MockArtCCategoryRepository struct {
	mock.Mock
}

type MockArtCCategoryRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockArtCCategoryRepository) EXPECT() *MockArtCCategoryRepository_Expecter {
	return &MockArtCCategoryRepository_Expecter{mock: &_m.Mock}
}

// CreateOrUpdate provides a mock function with given fields: artCCategory, artCTranslation
func (_m *MockArtCCategoryRepository) CreateOrUpdate(artCCategory entity.ArtCCategory, artCTranslation entity.ArtCTranslation) (entity.ArtCCategory, error) {
	ret := _m.Called(artCCategory, artCTranslation)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrUpdate")
	}

	var r0 entity.ArtCCategory
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.ArtCCategory, entity.ArtCTranslation) (entity.ArtCCategory, error)); ok {
		return rf(artCCategory, artCTranslation)
	}
	if rf, ok := ret.Get(0).(func(entity.ArtCCategory, entity.ArtCTranslation) entity.ArtCCategory); ok {
		r0 = rf(artCCategory, artCTranslation)
	} else {
		r0 = ret.Get(0).(entity.ArtCCategory)
	}

	if rf, ok := ret.Get(1).(func(entity.ArtCCategory, entity.ArtCTranslation) error); ok {
		r1 = rf(artCCategory, artCTranslation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockArtCCategoryRepository_CreateOrUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrUpdate'
type MockArtCCategoryRepository_CreateOrUpdate_Call struct {
	*mock.Call
}

// CreateOrUpdate is a helper method to define mock.On call
//   - artCCategory entity.ArtCCategory
//   - artCTranslation entity.ArtCTranslation
func (_e *MockArtCCategoryRepository_Expecter) CreateOrUpdate(artCCategory interface{}, artCTranslation interface{}) *MockArtCCategoryRepository_CreateOrUpdate_Call {
	return &MockArtCCategoryRepository_CreateOrUpdate_Call{Call: _e.mock.On("CreateOrUpdate", artCCategory, artCTranslation)}
}

func (_c *MockArtCCategoryRepository_CreateOrUpdate_Call) Run(run func(artCCategory entity.ArtCCategory, artCTranslation entity.ArtCTranslation)) *MockArtCCategoryRepository_CreateOrUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entity.ArtCCategory), args[1].(entity.ArtCTranslation))
	})
	return _c
}

func (_c *MockArtCCategoryRepository_CreateOrUpdate_Call) Return(_a0 entity.ArtCCategory, _a1 error) *MockArtCCategoryRepository_CreateOrUpdate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockArtCCategoryRepository_CreateOrUpdate_Call) RunAndReturn(run func(entity.ArtCCategory, entity.ArtCTranslation) (entity.ArtCCategory, error)) *MockArtCCategoryRepository_CreateOrUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByID provides a mock function with given fields: typeId, id
func (_m *MockArtCCategoryRepository) DeleteByID(typeId uint, id uint) error {
	ret := _m.Called(typeId, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(typeId, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockArtCCategoryRepository_DeleteByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByID'
type MockArtCCategoryRepository_DeleteByID_Call struct {
	*mock.Call
}

// DeleteByID is a helper method to define mock.On call
//   - typeId uint
//   - id uint
func (_e *MockArtCCategoryRepository_Expecter) DeleteByID(typeId interface{}, id interface{}) *MockArtCCategoryRepository_DeleteByID_Call {
	return &MockArtCCategoryRepository_DeleteByID_Call{Call: _e.mock.On("DeleteByID", typeId, id)}
}

func (_c *MockArtCCategoryRepository_DeleteByID_Call) Run(run func(typeId uint, id uint)) *MockArtCCategoryRepository_DeleteByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(uint))
	})
	return _c
}

func (_c *MockArtCCategoryRepository_DeleteByID_Call) Return(_a0 error) *MockArtCCategoryRepository_DeleteByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockArtCCategoryRepository_DeleteByID_Call) RunAndReturn(run func(uint, uint) error) *MockArtCCategoryRepository_DeleteByID_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function with given fields: typeId, id, locale
func (_m *MockArtCCategoryRepository) Find(typeId uint, id uint, locale string) (entity.ArtCCategory, error) {
	ret := _m.Called(typeId, id, locale)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 entity.ArtCCategory
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint, string) (entity.ArtCCategory, error)); ok {
		return rf(typeId, id, locale)
	}
	if rf, ok := ret.Get(0).(func(uint, uint, string) entity.ArtCCategory); ok {
		r0 = rf(typeId, id, locale)
	} else {
		r0 = ret.Get(0).(entity.ArtCCategory)
	}

	if rf, ok := ret.Get(1).(func(uint, uint, string) error); ok {
		r1 = rf(typeId, id, locale)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockArtCCategoryRepository_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockArtCCategoryRepository_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - typeId uint
//   - id uint
//   - locale string
func (_e *MockArtCCategoryRepository_Expecter) Find(typeId interface{}, id interface{}, locale interface{}) *MockArtCCategoryRepository_Find_Call {
	return &MockArtCCategoryRepository_Find_Call{Call: _e.mock.On("Find", typeId, id, locale)}
}

func (_c *MockArtCCategoryRepository_Find_Call) Run(run func(typeId uint, id uint, locale string)) *MockArtCCategoryRepository_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(uint), args[2].(string))
	})
	return _c
}

func (_c *MockArtCCategoryRepository_Find_Call) Return(_a0 entity.ArtCCategory, _a1 error) *MockArtCCategoryRepository_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockArtCCategoryRepository_Find_Call) RunAndReturn(run func(uint, uint, string) (entity.ArtCCategory, error)) *MockArtCCategoryRepository_Find_Call {
	_c.Call.Return(run)
	return _c
}

// FindAll provides a mock function with given fields: typeId, locale
func (_m *MockArtCCategoryRepository) FindAll(typeId uint, locale string) ([]entity.ArtCCategory, error) {
	ret := _m.Called(typeId, locale)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []entity.ArtCCategory
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, string) ([]entity.ArtCCategory, error)); ok {
		return rf(typeId, locale)
	}
	if rf, ok := ret.Get(0).(func(uint, string) []entity.ArtCCategory); ok {
		r0 = rf(typeId, locale)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ArtCCategory)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, string) error); ok {
		r1 = rf(typeId, locale)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockArtCCategoryRepository_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type MockArtCCategoryRepository_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
//   - typeId uint
//   - locale string
func (_e *MockArtCCategoryRepository_Expecter) FindAll(typeId interface{}, locale interface{}) *MockArtCCategoryRepository_FindAll_Call {
	return &MockArtCCategoryRepository_FindAll_Call{Call: _e.mock.On("FindAll", typeId, locale)}
}

func (_c *MockArtCCategoryRepository_FindAll_Call) Run(run func(typeId uint, locale string)) *MockArtCCategoryRepository_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(string))
	})
	return _c
}

func (_c *MockArtCCategoryRepository_FindAll_Call) Return(_a0 []entity.ArtCCategory, _a1 error) *MockArtCCategoryRepository_FindAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockArtCCategoryRepository_FindAll_Call) RunAndReturn(run func(uint, string) ([]entity.ArtCCategory, error)) *MockArtCCategoryRepository_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// OrderItems provides a mock function with given fields: ids
func (_m *MockArtCCategoryRepository) OrderItems(ids []uint) error {
	ret := _m.Called(ids)

	if len(ret) == 0 {
		panic("no return value specified for OrderItems")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]uint) error); ok {
		r0 = rf(ids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockArtCCategoryRepository_OrderItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OrderItems'
type MockArtCCategoryRepository_OrderItems_Call struct {
	*mock.Call
}

// OrderItems is a helper method to define mock.On call
//   - ids []uint
func (_e *MockArtCCategoryRepository_Expecter) OrderItems(ids interface{}) *MockArtCCategoryRepository_OrderItems_Call {
	return &MockArtCCategoryRepository_OrderItems_Call{Call: _e.mock.On("OrderItems", ids)}
}

func (_c *MockArtCCategoryRepository_OrderItems_Call) Run(run func(ids []uint)) *MockArtCCategoryRepository_OrderItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]uint))
	})
	return _c
}

func (_c *MockArtCCategoryRepository_OrderItems_Call) Return(_a0 error) *MockArtCCategoryRepository_OrderItems_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockArtCCategoryRepository_OrderItems_Call) RunAndReturn(run func([]uint) error) *MockArtCCategoryRepository_OrderItems_Call {
	_c.Call.Return(run)
	return _c
}

// PageContent provides a mock function with given fields: typeId, id, locale
func (_m *MockArtCCategoryRepository) PageContent(typeId uint, id uint, locale string) (model.ArtCCategoryPageContent, error) {
	ret := _m.Called(typeId, id, locale)

	if len(ret) == 0 {
		panic("no return value specified for PageContent")
	}

	var r0 model.ArtCCategoryPageContent
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint, string) (model.ArtCCategoryPageContent, error)); ok {
		return rf(typeId, id, locale)
	}
	if rf, ok := ret.Get(0).(func(uint, uint, string) model.ArtCCategoryPageContent); ok {
		r0 = rf(typeId, id, locale)
	} else {
		r0 = ret.Get(0).(model.ArtCCategoryPageContent)
	}

	if rf, ok := ret.Get(1).(func(uint, uint, string) error); ok {
		r1 = rf(typeId, id, locale)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockArtCCategoryRepository_PageContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PageContent'
type MockArtCCategoryRepository_PageContent_Call struct {
	*mock.Call
}

// PageContent is a helper method to define mock.On call
//   - typeId uint
//   - id uint
//   - locale string
func (_e *MockArtCCategoryRepository_Expecter) PageContent(typeId interface{}, id interface{}, locale interface{}) *MockArtCCategoryRepository_PageContent_Call {
	return &MockArtCCategoryRepository_PageContent_Call{Call: _e.mock.On("PageContent", typeId, id, locale)}
}

func (_c *MockArtCCategoryRepository_PageContent_Call) Run(run func(typeId uint, id uint, locale string)) *MockArtCCategoryRepository_PageContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(uint), args[2].(string))
	})
	return _c
}

func (_c *MockArtCCategoryRepository_PageContent_Call) Return(_a0 model.ArtCCategoryPageContent, _a1 error) *MockArtCCategoryRepository_PageContent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockArtCCategoryRepository_PageContent_Call) RunAndReturn(run func(uint, uint, string) (model.ArtCCategoryPageContent, error)) *MockArtCCategoryRepository_PageContent_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockArtCCategoryRepository creates a new instance of MockArtCCategoryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockArtCCategoryRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockArtCCategoryRepository {
	mock := &MockArtCCategoryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
