// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "example.com/art-culture-api/domain/act_c/entity"
	mock "github.com/stretchr/testify/mock"
)

// MockArtCTranslationRepository is an autogenerated mock type for the ArtCTranslationRepository type
type MockArtCTranslationRepository struct {
	mock.Mock
}

type MockArtCTranslationRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockArtCTranslationRepository) EXPECT() *MockArtCTranslationRepository_Expecter {
	return &MockArtCTranslationRepository_Expecter{mock: &_m.Mock}
}

// FindByArtCTypeIdAndArtCCategoryIdAndLocale provides a mock function with given fields: ctx, artCTypeID, artCCategoryID, locale
func (_m *MockArtCTranslationRepository) FindByArtCTypeIdAndArtCCategoryIdAndLocale(ctx context.Context, artCTypeID *uint, artCCategoryID *uint, locale string) (entity.ArtCTranslation, error) {
	ret := _m.Called(ctx, artCTypeID, artCCategoryID, locale)

	if len(ret) == 0 {
		panic("no return value specified for FindByArtCTypeIdAndArtCCategoryIdAndLocale")
	}

	var r0 entity.ArtCTranslation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *uint, *uint, string) (entity.ArtCTranslation, error)); ok {
		return rf(ctx, artCTypeID, artCCategoryID, locale)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *uint, *uint, string) entity.ArtCTranslation); ok {
		r0 = rf(ctx, artCTypeID, artCCategoryID, locale)
	} else {
		r0 = ret.Get(0).(entity.ArtCTranslation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *uint, *uint, string) error); ok {
		r1 = rf(ctx, artCTypeID, artCCategoryID, locale)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockArtCTranslationRepository_FindByArtCTypeIdAndArtCCategoryIdAndLocale_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByArtCTypeIdAndArtCCategoryIdAndLocale'
type MockArtCTranslationRepository_FindByArtCTypeIdAndArtCCategoryIdAndLocale_Call struct {
	*mock.Call
}

// FindByArtCTypeIdAndArtCCategoryIdAndLocale is a helper method to define mock.On call
//   - ctx context.Context
//   - artCTypeID *uint
//   - artCCategoryID *uint
//   - locale string
func (_e *MockArtCTranslationRepository_Expecter) FindByArtCTypeIdAndArtCCategoryIdAndLocale(ctx interface{}, artCTypeID interface{}, artCCategoryID interface{}, locale interface{}) *MockArtCTranslationRepository_FindByArtCTypeIdAndArtCCategoryIdAndLocale_Call {
	return &MockArtCTranslationRepository_FindByArtCTypeIdAndArtCCategoryIdAndLocale_Call{Call: _e.mock.On("FindByArtCTypeIdAndArtCCategoryIdAndLocale", ctx, artCTypeID, artCCategoryID, locale)}
}

func (_c *MockArtCTranslationRepository_FindByArtCTypeIdAndArtCCategoryIdAndLocale_Call) Run(run func(ctx context.Context, artCTypeID *uint, artCCategoryID *uint, locale string)) *MockArtCTranslationRepository_FindByArtCTypeIdAndArtCCategoryIdAndLocale_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*uint), args[2].(*uint), args[3].(string))
	})
	return _c
}

func (_c *MockArtCTranslationRepository_FindByArtCTypeIdAndArtCCategoryIdAndLocale_Call) Return(_a0 entity.ArtCTranslation, _a1 error) *MockArtCTranslationRepository_FindByArtCTypeIdAndArtCCategoryIdAndLocale_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockArtCTranslationRepository_FindByArtCTypeIdAndArtCCategoryIdAndLocale_Call) RunAndReturn(run func(context.Context, *uint, *uint, string) (entity.ArtCTranslation, error)) *MockArtCTranslationRepository_FindByArtCTypeIdAndArtCCategoryIdAndLocale_Call {
	_c.Call.Return(run)
	return _c
}

// FindByArtCTypeIdAndArtCCategoryIdAndLocaleWithDefault provides a mock function with given fields: ctx, artCTypeID, artCCategoryID, locale
func (_m *MockArtCTranslationRepository) FindByArtCTypeIdAndArtCCategoryIdAndLocaleWithDefault(ctx context.Context, artCTypeID *uint, artCCategoryID *uint, locale string) (entity.ArtCTranslation, error) {
	ret := _m.Called(ctx, artCTypeID, artCCategoryID, locale)

	if len(ret) == 0 {
		panic("no return value specified for FindByArtCTypeIdAndArtCCategoryIdAndLocaleWithDefault")
	}

	var r0 entity.ArtCTranslation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *uint, *uint, string) (entity.ArtCTranslation, error)); ok {
		return rf(ctx, artCTypeID, artCCategoryID, locale)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *uint, *uint, string) entity.ArtCTranslation); ok {
		r0 = rf(ctx, artCTypeID, artCCategoryID, locale)
	} else {
		r0 = ret.Get(0).(entity.ArtCTranslation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *uint, *uint, string) error); ok {
		r1 = rf(ctx, artCTypeID, artCCategoryID, locale)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockArtCTranslationRepository_FindByArtCTypeIdAndArtCCategoryIdAndLocaleWithDefault_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByArtCTypeIdAndArtCCategoryIdAndLocaleWithDefault'
type MockArtCTranslationRepository_FindByArtCTypeIdAndArtCCategoryIdAndLocaleWithDefault_Call struct {
	*mock.Call
}

// FindByArtCTypeIdAndArtCCategoryIdAndLocaleWithDefault is a helper method to define mock.On call
//   - ctx context.Context
//   - artCTypeID *uint
//   - artCCategoryID *uint
//   - locale string
func (_e *MockArtCTranslationRepository_Expecter) FindByArtCTypeIdAndArtCCategoryIdAndLocaleWithDefault(ctx interface{}, artCTypeID interface{}, artCCategoryID interface{}, locale interface{}) *MockArtCTranslationRepository_FindByArtCTypeIdAndArtCCategoryIdAndLocaleWithDefault_Call {
	return &MockArtCTranslationRepository_FindByArtCTypeIdAndArtCCategoryIdAndLocaleWithDefault_Call{Call: _e.mock.On("FindByArtCTypeIdAndArtCCategoryIdAndLocaleWithDefault", ctx, artCTypeID, artCCategoryID, locale)}
}

func (_c *MockArtCTranslationRepository_FindByArtCTypeIdAndArtCCategoryIdAndLocaleWithDefault_Call) Run(run func(ctx context.Context, artCTypeID *uint, artCCategoryID *uint, locale string)) *MockArtCTranslationRepository_FindByArtCTypeIdAndArtCCategoryIdAndLocaleWithDefault_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*uint), args[2].(*uint), args[3].(string))
	})
	return _c
}

func (_c *MockArtCTranslationRepository_FindByArtCTypeIdAndArtCCategoryIdAndLocaleWithDefault_Call) Return(_a0 entity.ArtCTranslation, _a1 error) *MockArtCTranslationRepository_FindByArtCTypeIdAndArtCCategoryIdAndLocaleWithDefault_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockArtCTranslationRepository_FindByArtCTypeIdAndArtCCategoryIdAndLocaleWithDefault_Call) RunAndReturn(run func(context.Context, *uint, *uint, string) (entity.ArtCTranslation, error)) *MockArtCTranslationRepository_FindByArtCTypeIdAndArtCCategoryIdAndLocaleWithDefault_Call {
	_c.Call.Return(run)
	return _c
}

// FindByTuplesOfArtCTypeIdAndArtCCategoryIdAndLocale provides a mock function with given fields: ctx, tuples
func (_m *MockArtCTranslationRepository) FindByTuplesOfArtCTypeIdAndArtCCategoryIdAndLocale(ctx context.Context, tuples [][]interface{}) ([]entity.ArtCTranslation, error) {
	ret := _m.Called(ctx, tuples)

	if len(ret) == 0 {
		panic("no return value specified for FindByTuplesOfArtCTypeIdAndArtCCategoryIdAndLocale")
	}

	var r0 []entity.ArtCTranslation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, [][]interface{}) ([]entity.ArtCTranslation, error)); ok {
		return rf(ctx, tuples)
	}
	if rf, ok := ret.Get(0).(func(context.Context, [][]interface{}) []entity.ArtCTranslation); ok {
		r0 = rf(ctx, tuples)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ArtCTranslation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, [][]interface{}) error); ok {
		r1 = rf(ctx, tuples)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockArtCTranslationRepository_FindByTuplesOfArtCTypeIdAndArtCCategoryIdAndLocale_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByTuplesOfArtCTypeIdAndArtCCategoryIdAndLocale'
type MockArtCTranslationRepository_FindByTuplesOfArtCTypeIdAndArtCCategoryIdAndLocale_Call struct {
	*mock.Call
}

// FindByTuplesOfArtCTypeIdAndArtCCategoryIdAndLocale is a helper method to define mock.On call
//   - ctx context.Context
//   - tuples [][]interface{}
func (_e *MockArtCTranslationRepository_Expecter) FindByTuplesOfArtCTypeIdAndArtCCategoryIdAndLocale(ctx interface{}, tuples interface{}) *MockArtCTranslationRepository_FindByTuplesOfArtCTypeIdAndArtCCategoryIdAndLocale_Call {
	return &MockArtCTranslationRepository_FindByTuplesOfArtCTypeIdAndArtCCategoryIdAndLocale_Call{Call: _e.mock.On("FindByTuplesOfArtCTypeIdAndArtCCategoryIdAndLocale", ctx, tuples)}
}

func (_c *MockArtCTranslationRepository_FindByTuplesOfArtCTypeIdAndArtCCategoryIdAndLocale_Call) Run(run func(ctx context.Context, tuples [][]interface{})) *MockArtCTranslationRepository_FindByTuplesOfArtCTypeIdAndArtCCategoryIdAndLocale_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([][]interface{}))
	})
	return _c
}

func (_c *MockArtCTranslationRepository_FindByTuplesOfArtCTypeIdAndArtCCategoryIdAndLocale_Call) Return(_a0 []entity.ArtCTranslation, _a1 error) *MockArtCTranslationRepository_FindByTuplesOfArtCTypeIdAndArtCCategoryIdAndLocale_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockArtCTranslationRepository_FindByTuplesOfArtCTypeIdAndArtCCategoryIdAndLocale_Call) RunAndReturn(run func(context.Context, [][]interface{}) ([]entity.ArtCTranslation, error)) *MockArtCTranslationRepository_FindByTuplesOfArtCTypeIdAndArtCCategoryIdAndLocale_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockArtCTranslationRepository creates a new instance of MockArtCTranslationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockArtCTranslationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockArtCTranslationRepository {
	mock := &MockArtCTranslationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
