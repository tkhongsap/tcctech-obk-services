// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	entity "example.com/art-culture-api/domain/programs/entity"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockBookingNotificationService is an autogenerated mock type for the BookingNotificationService type
type MockBookingNotificationService struct {
	mock.Mock
}

type MockBookingNotificationService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBookingNotificationService) EXPECT() *MockBookingNotificationService_Expecter {
	return &MockBookingNotificationService_Expecter{mock: &_m.Mock}
}

// SendBookingConfirm provides a mock function with given fields: locale, accountID, program, showTimeDate, showTimeTime
func (_m *MockBookingNotificationService) SendBookingConfirm(locale string, accountID string, program entity.Program, showTimeDate time.Time, showTimeTime time.Time) error {
	ret := _m.Called(locale, accountID, program, showTimeDate, showTimeTime)

	if len(ret) == 0 {
		panic("no return value specified for SendBookingConfirm")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, entity.Program, time.Time, time.Time) error); ok {
		r0 = rf(locale, accountID, program, showTimeDate, showTimeTime)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBookingNotificationService_SendBookingConfirm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendBookingConfirm'
type MockBookingNotificationService_SendBookingConfirm_Call struct {
	*mock.Call
}

// SendBookingConfirm is a helper method to define mock.On call
//   - locale string
//   - accountID string
//   - program entity.Program
//   - showTimeDate time.Time
//   - showTimeTime time.Time
func (_e *MockBookingNotificationService_Expecter) SendBookingConfirm(locale interface{}, accountID interface{}, program interface{}, showTimeDate interface{}, showTimeTime interface{}) *MockBookingNotificationService_SendBookingConfirm_Call {
	return &MockBookingNotificationService_SendBookingConfirm_Call{Call: _e.mock.On("SendBookingConfirm", locale, accountID, program, showTimeDate, showTimeTime)}
}

func (_c *MockBookingNotificationService_SendBookingConfirm_Call) Run(run func(locale string, accountID string, program entity.Program, showTimeDate time.Time, showTimeTime time.Time)) *MockBookingNotificationService_SendBookingConfirm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(entity.Program), args[3].(time.Time), args[4].(time.Time))
	})
	return _c
}

func (_c *MockBookingNotificationService_SendBookingConfirm_Call) Return(_a0 error) *MockBookingNotificationService_SendBookingConfirm_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBookingNotificationService_SendBookingConfirm_Call) RunAndReturn(run func(string, string, entity.Program, time.Time, time.Time) error) *MockBookingNotificationService_SendBookingConfirm_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBookingNotificationService creates a new instance of MockBookingNotificationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBookingNotificationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBookingNotificationService {
	mock := &MockBookingNotificationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
