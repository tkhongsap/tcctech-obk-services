// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "example.com/art-culture-api/domain/booking/entity"
	mock "github.com/stretchr/testify/mock"
)

// MockBookingTicketRepository is an autogenerated mock type for the BookingTicketRepository type
type MockBookingTicketRepository struct {
	mock.Mock
}

type MockBookingTicketRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBookingTicketRepository) EXPECT() *MockBookingTicketRepository_Expecter {
	return &MockBookingTicketRepository_Expecter{mock: &_m.Mock}
}

// BulkInsert provides a mock function with given fields: ctx, bookingTickets
func (_m *MockBookingTicketRepository) BulkInsert(ctx context.Context, bookingTickets []entity.BookingTicket) ([]entity.BookingTicket, error) {
	ret := _m.Called(ctx, bookingTickets)

	if len(ret) == 0 {
		panic("no return value specified for BulkInsert")
	}

	var r0 []entity.BookingTicket
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []entity.BookingTicket) ([]entity.BookingTicket, error)); ok {
		return rf(ctx, bookingTickets)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []entity.BookingTicket) []entity.BookingTicket); ok {
		r0 = rf(ctx, bookingTickets)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.BookingTicket)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []entity.BookingTicket) error); ok {
		r1 = rf(ctx, bookingTickets)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBookingTicketRepository_BulkInsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkInsert'
type MockBookingTicketRepository_BulkInsert_Call struct {
	*mock.Call
}

// BulkInsert is a helper method to define mock.On call
//   - ctx context.Context
//   - bookingTickets []entity.BookingTicket
func (_e *MockBookingTicketRepository_Expecter) BulkInsert(ctx interface{}, bookingTickets interface{}) *MockBookingTicketRepository_BulkInsert_Call {
	return &MockBookingTicketRepository_BulkInsert_Call{Call: _e.mock.On("BulkInsert", ctx, bookingTickets)}
}

func (_c *MockBookingTicketRepository_BulkInsert_Call) Run(run func(ctx context.Context, bookingTickets []entity.BookingTicket)) *MockBookingTicketRepository_BulkInsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]entity.BookingTicket))
	})
	return _c
}

func (_c *MockBookingTicketRepository_BulkInsert_Call) Return(_a0 []entity.BookingTicket, _a1 error) *MockBookingTicketRepository_BulkInsert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBookingTicketRepository_BulkInsert_Call) RunAndReturn(run func(context.Context, []entity.BookingTicket) ([]entity.BookingTicket, error)) *MockBookingTicketRepository_BulkInsert_Call {
	_c.Call.Return(run)
	return _c
}

// FindAllByBookingSettingID provides a mock function with given fields: ctx, bookingSettingID
func (_m *MockBookingTicketRepository) FindAllByBookingSettingID(ctx context.Context, bookingSettingID string) ([]entity.BookingTicket, error) {
	ret := _m.Called(ctx, bookingSettingID)

	if len(ret) == 0 {
		panic("no return value specified for FindAllByBookingSettingID")
	}

	var r0 []entity.BookingTicket
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]entity.BookingTicket, error)); ok {
		return rf(ctx, bookingSettingID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.BookingTicket); ok {
		r0 = rf(ctx, bookingSettingID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.BookingTicket)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, bookingSettingID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBookingTicketRepository_FindAllByBookingSettingID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllByBookingSettingID'
type MockBookingTicketRepository_FindAllByBookingSettingID_Call struct {
	*mock.Call
}

// FindAllByBookingSettingID is a helper method to define mock.On call
//   - ctx context.Context
//   - bookingSettingID string
func (_e *MockBookingTicketRepository_Expecter) FindAllByBookingSettingID(ctx interface{}, bookingSettingID interface{}) *MockBookingTicketRepository_FindAllByBookingSettingID_Call {
	return &MockBookingTicketRepository_FindAllByBookingSettingID_Call{Call: _e.mock.On("FindAllByBookingSettingID", ctx, bookingSettingID)}
}

func (_c *MockBookingTicketRepository_FindAllByBookingSettingID_Call) Run(run func(ctx context.Context, bookingSettingID string)) *MockBookingTicketRepository_FindAllByBookingSettingID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockBookingTicketRepository_FindAllByBookingSettingID_Call) Return(_a0 []entity.BookingTicket, _a1 error) *MockBookingTicketRepository_FindAllByBookingSettingID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBookingTicketRepository_FindAllByBookingSettingID_Call) RunAndReturn(run func(context.Context, string) ([]entity.BookingTicket, error)) *MockBookingTicketRepository_FindAllByBookingSettingID_Call {
	_c.Call.Return(run)
	return _c
}

// FindByIDWithPreloadedFields provides a mock function with given fields: ctx, id, preloadFields, locale
func (_m *MockBookingTicketRepository) FindByIDWithPreloadedFields(ctx context.Context, id string, preloadFields []string, locale string) (entity.BookingTicket, error) {
	ret := _m.Called(ctx, id, preloadFields, locale)

	if len(ret) == 0 {
		panic("no return value specified for FindByIDWithPreloadedFields")
	}

	var r0 entity.BookingTicket
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, string) (entity.BookingTicket, error)); ok {
		return rf(ctx, id, preloadFields, locale)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, string) entity.BookingTicket); ok {
		r0 = rf(ctx, id, preloadFields, locale)
	} else {
		r0 = ret.Get(0).(entity.BookingTicket)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string, string) error); ok {
		r1 = rf(ctx, id, preloadFields, locale)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBookingTicketRepository_FindByIDWithPreloadedFields_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByIDWithPreloadedFields'
type MockBookingTicketRepository_FindByIDWithPreloadedFields_Call struct {
	*mock.Call
}

// FindByIDWithPreloadedFields is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - preloadFields []string
//   - locale string
func (_e *MockBookingTicketRepository_Expecter) FindByIDWithPreloadedFields(ctx interface{}, id interface{}, preloadFields interface{}, locale interface{}) *MockBookingTicketRepository_FindByIDWithPreloadedFields_Call {
	return &MockBookingTicketRepository_FindByIDWithPreloadedFields_Call{Call: _e.mock.On("FindByIDWithPreloadedFields", ctx, id, preloadFields, locale)}
}

func (_c *MockBookingTicketRepository_FindByIDWithPreloadedFields_Call) Run(run func(ctx context.Context, id string, preloadFields []string, locale string)) *MockBookingTicketRepository_FindByIDWithPreloadedFields_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string), args[3].(string))
	})
	return _c
}

func (_c *MockBookingTicketRepository_FindByIDWithPreloadedFields_Call) Return(_a0 entity.BookingTicket, _a1 error) *MockBookingTicketRepository_FindByIDWithPreloadedFields_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBookingTicketRepository_FindByIDWithPreloadedFields_Call) RunAndReturn(run func(context.Context, string, []string, string) (entity.BookingTicket, error)) *MockBookingTicketRepository_FindByIDWithPreloadedFields_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateByIDWithSelectedFields provides a mock function with given fields: ctx, id, fields, m
func (_m *MockBookingTicketRepository) UpdateByIDWithSelectedFields(ctx context.Context, id string, fields []string, m map[string]any) error {
	ret := _m.Called(ctx, id, fields, m)

	if len(ret) == 0 {
		panic("no return value specified for UpdateByIDWithSelectedFields")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, map[string]any) error); ok {
		r0 = rf(ctx, id, fields, m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBookingTicketRepository_UpdateByIDWithSelectedFields_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateByIDWithSelectedFields'
type MockBookingTicketRepository_UpdateByIDWithSelectedFields_Call struct {
	*mock.Call
}

// UpdateByIDWithSelectedFields is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - fields []string
//   - m map[string]any
func (_e *MockBookingTicketRepository_Expecter) UpdateByIDWithSelectedFields(ctx interface{}, id interface{}, fields interface{}, m interface{}) *MockBookingTicketRepository_UpdateByIDWithSelectedFields_Call {
	return &MockBookingTicketRepository_UpdateByIDWithSelectedFields_Call{Call: _e.mock.On("UpdateByIDWithSelectedFields", ctx, id, fields, m)}
}

func (_c *MockBookingTicketRepository_UpdateByIDWithSelectedFields_Call) Run(run func(ctx context.Context, id string, fields []string, m map[string]any)) *MockBookingTicketRepository_UpdateByIDWithSelectedFields_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string), args[3].(map[string]any))
	})
	return _c
}

func (_c *MockBookingTicketRepository_UpdateByIDWithSelectedFields_Call) Return(_a0 error) *MockBookingTicketRepository_UpdateByIDWithSelectedFields_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBookingTicketRepository_UpdateByIDWithSelectedFields_Call) RunAndReturn(run func(context.Context, string, []string, map[string]any) error) *MockBookingTicketRepository_UpdateByIDWithSelectedFields_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBookingTicketRepository creates a new instance of MockBookingTicketRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBookingTicketRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBookingTicketRepository {
	mock := &MockBookingTicketRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
