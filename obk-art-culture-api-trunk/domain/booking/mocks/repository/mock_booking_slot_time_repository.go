// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "example.com/art-culture-api/domain/booking/entity"
	mock "github.com/stretchr/testify/mock"
)

// MockBookingSlotTimeRepository is an autogenerated mock type for the BookingSlotTimeRepository type
type MockBookingSlotTimeRepository struct {
	mock.Mock
}

type MockBookingSlotTimeRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBookingSlotTimeRepository) EXPECT() *MockBookingSlotTimeRepository_Expecter {
	return &MockBookingSlotTimeRepository_Expecter{mock: &_m.Mock}
}

// BulkDelete provides a mock function with given fields: ctx, bookingSlotTimes
func (_m *MockBookingSlotTimeRepository) BulkDelete(ctx context.Context, bookingSlotTimes []entity.BookingSlotTime) ([]entity.BookingSlotTime, error) {
	ret := _m.Called(ctx, bookingSlotTimes)

	if len(ret) == 0 {
		panic("no return value specified for BulkDelete")
	}

	var r0 []entity.BookingSlotTime
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []entity.BookingSlotTime) ([]entity.BookingSlotTime, error)); ok {
		return rf(ctx, bookingSlotTimes)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []entity.BookingSlotTime) []entity.BookingSlotTime); ok {
		r0 = rf(ctx, bookingSlotTimes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.BookingSlotTime)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []entity.BookingSlotTime) error); ok {
		r1 = rf(ctx, bookingSlotTimes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBookingSlotTimeRepository_BulkDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkDelete'
type MockBookingSlotTimeRepository_BulkDelete_Call struct {
	*mock.Call
}

// BulkDelete is a helper method to define mock.On call
//   - ctx context.Context
//   - bookingSlotTimes []entity.BookingSlotTime
func (_e *MockBookingSlotTimeRepository_Expecter) BulkDelete(ctx interface{}, bookingSlotTimes interface{}) *MockBookingSlotTimeRepository_BulkDelete_Call {
	return &MockBookingSlotTimeRepository_BulkDelete_Call{Call: _e.mock.On("BulkDelete", ctx, bookingSlotTimes)}
}

func (_c *MockBookingSlotTimeRepository_BulkDelete_Call) Run(run func(ctx context.Context, bookingSlotTimes []entity.BookingSlotTime)) *MockBookingSlotTimeRepository_BulkDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]entity.BookingSlotTime))
	})
	return _c
}

func (_c *MockBookingSlotTimeRepository_BulkDelete_Call) Return(_a0 []entity.BookingSlotTime, _a1 error) *MockBookingSlotTimeRepository_BulkDelete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBookingSlotTimeRepository_BulkDelete_Call) RunAndReturn(run func(context.Context, []entity.BookingSlotTime) ([]entity.BookingSlotTime, error)) *MockBookingSlotTimeRepository_BulkDelete_Call {
	_c.Call.Return(run)
	return _c
}

// BulkUpsert provides a mock function with given fields: ctx, bookingSlotTimes
func (_m *MockBookingSlotTimeRepository) BulkUpsert(ctx context.Context, bookingSlotTimes []entity.BookingSlotTime) ([]entity.BookingSlotTime, error) {
	ret := _m.Called(ctx, bookingSlotTimes)

	if len(ret) == 0 {
		panic("no return value specified for BulkUpsert")
	}

	var r0 []entity.BookingSlotTime
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []entity.BookingSlotTime) ([]entity.BookingSlotTime, error)); ok {
		return rf(ctx, bookingSlotTimes)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []entity.BookingSlotTime) []entity.BookingSlotTime); ok {
		r0 = rf(ctx, bookingSlotTimes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.BookingSlotTime)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []entity.BookingSlotTime) error); ok {
		r1 = rf(ctx, bookingSlotTimes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBookingSlotTimeRepository_BulkUpsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkUpsert'
type MockBookingSlotTimeRepository_BulkUpsert_Call struct {
	*mock.Call
}

// BulkUpsert is a helper method to define mock.On call
//   - ctx context.Context
//   - bookingSlotTimes []entity.BookingSlotTime
func (_e *MockBookingSlotTimeRepository_Expecter) BulkUpsert(ctx interface{}, bookingSlotTimes interface{}) *MockBookingSlotTimeRepository_BulkUpsert_Call {
	return &MockBookingSlotTimeRepository_BulkUpsert_Call{Call: _e.mock.On("BulkUpsert", ctx, bookingSlotTimes)}
}

func (_c *MockBookingSlotTimeRepository_BulkUpsert_Call) Run(run func(ctx context.Context, bookingSlotTimes []entity.BookingSlotTime)) *MockBookingSlotTimeRepository_BulkUpsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]entity.BookingSlotTime))
	})
	return _c
}

func (_c *MockBookingSlotTimeRepository_BulkUpsert_Call) Return(_a0 []entity.BookingSlotTime, _a1 error) *MockBookingSlotTimeRepository_BulkUpsert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBookingSlotTimeRepository_BulkUpsert_Call) RunAndReturn(run func(context.Context, []entity.BookingSlotTime) ([]entity.BookingSlotTime, error)) *MockBookingSlotTimeRepository_BulkUpsert_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAllByBookingSettingID provides a mock function with given fields: ctx, bookingSettingID
func (_m *MockBookingSlotTimeRepository) DeleteAllByBookingSettingID(ctx context.Context, bookingSettingID string) error {
	ret := _m.Called(ctx, bookingSettingID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAllByBookingSettingID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, bookingSettingID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBookingSlotTimeRepository_DeleteAllByBookingSettingID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAllByBookingSettingID'
type MockBookingSlotTimeRepository_DeleteAllByBookingSettingID_Call struct {
	*mock.Call
}

// DeleteAllByBookingSettingID is a helper method to define mock.On call
//   - ctx context.Context
//   - bookingSettingID string
func (_e *MockBookingSlotTimeRepository_Expecter) DeleteAllByBookingSettingID(ctx interface{}, bookingSettingID interface{}) *MockBookingSlotTimeRepository_DeleteAllByBookingSettingID_Call {
	return &MockBookingSlotTimeRepository_DeleteAllByBookingSettingID_Call{Call: _e.mock.On("DeleteAllByBookingSettingID", ctx, bookingSettingID)}
}

func (_c *MockBookingSlotTimeRepository_DeleteAllByBookingSettingID_Call) Run(run func(ctx context.Context, bookingSettingID string)) *MockBookingSlotTimeRepository_DeleteAllByBookingSettingID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockBookingSlotTimeRepository_DeleteAllByBookingSettingID_Call) Return(_a0 error) *MockBookingSlotTimeRepository_DeleteAllByBookingSettingID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBookingSlotTimeRepository_DeleteAllByBookingSettingID_Call) RunAndReturn(run func(context.Context, string) error) *MockBookingSlotTimeRepository_DeleteAllByBookingSettingID_Call {
	_c.Call.Return(run)
	return _c
}

// FindAllByTuplesOfProgramIDAndBookingSettingIDAndBookingSlotDateID provides a mock function with given fields: ctx, tuples
func (_m *MockBookingSlotTimeRepository) FindAllByTuplesOfProgramIDAndBookingSettingIDAndBookingSlotDateID(ctx context.Context, tuples [][]interface{}) ([]entity.BookingSlotTime, error) {
	ret := _m.Called(ctx, tuples)

	if len(ret) == 0 {
		panic("no return value specified for FindAllByTuplesOfProgramIDAndBookingSettingIDAndBookingSlotDateID")
	}

	var r0 []entity.BookingSlotTime
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, [][]interface{}) ([]entity.BookingSlotTime, error)); ok {
		return rf(ctx, tuples)
	}
	if rf, ok := ret.Get(0).(func(context.Context, [][]interface{}) []entity.BookingSlotTime); ok {
		r0 = rf(ctx, tuples)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.BookingSlotTime)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, [][]interface{}) error); ok {
		r1 = rf(ctx, tuples)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBookingSlotTimeRepository_FindAllByTuplesOfProgramIDAndBookingSettingIDAndBookingSlotDateID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllByTuplesOfProgramIDAndBookingSettingIDAndBookingSlotDateID'
type MockBookingSlotTimeRepository_FindAllByTuplesOfProgramIDAndBookingSettingIDAndBookingSlotDateID_Call struct {
	*mock.Call
}

// FindAllByTuplesOfProgramIDAndBookingSettingIDAndBookingSlotDateID is a helper method to define mock.On call
//   - ctx context.Context
//   - tuples [][]interface{}
func (_e *MockBookingSlotTimeRepository_Expecter) FindAllByTuplesOfProgramIDAndBookingSettingIDAndBookingSlotDateID(ctx interface{}, tuples interface{}) *MockBookingSlotTimeRepository_FindAllByTuplesOfProgramIDAndBookingSettingIDAndBookingSlotDateID_Call {
	return &MockBookingSlotTimeRepository_FindAllByTuplesOfProgramIDAndBookingSettingIDAndBookingSlotDateID_Call{Call: _e.mock.On("FindAllByTuplesOfProgramIDAndBookingSettingIDAndBookingSlotDateID", ctx, tuples)}
}

func (_c *MockBookingSlotTimeRepository_FindAllByTuplesOfProgramIDAndBookingSettingIDAndBookingSlotDateID_Call) Run(run func(ctx context.Context, tuples [][]interface{})) *MockBookingSlotTimeRepository_FindAllByTuplesOfProgramIDAndBookingSettingIDAndBookingSlotDateID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([][]interface{}))
	})
	return _c
}

func (_c *MockBookingSlotTimeRepository_FindAllByTuplesOfProgramIDAndBookingSettingIDAndBookingSlotDateID_Call) Return(_a0 []entity.BookingSlotTime, _a1 error) *MockBookingSlotTimeRepository_FindAllByTuplesOfProgramIDAndBookingSettingIDAndBookingSlotDateID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBookingSlotTimeRepository_FindAllByTuplesOfProgramIDAndBookingSettingIDAndBookingSlotDateID_Call) RunAndReturn(run func(context.Context, [][]interface{}) ([]entity.BookingSlotTime, error)) *MockBookingSlotTimeRepository_FindAllByTuplesOfProgramIDAndBookingSettingIDAndBookingSlotDateID_Call {
	_c.Call.Return(run)
	return _c
}

// FindByIDWithReadLock provides a mock function with given fields: ctx, id
func (_m *MockBookingSlotTimeRepository) FindByIDWithReadLock(ctx context.Context, id string) (entity.BookingSlotTime, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByIDWithReadLock")
	}

	var r0 entity.BookingSlotTime
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entity.BookingSlotTime, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.BookingSlotTime); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entity.BookingSlotTime)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBookingSlotTimeRepository_FindByIDWithReadLock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByIDWithReadLock'
type MockBookingSlotTimeRepository_FindByIDWithReadLock_Call struct {
	*mock.Call
}

// FindByIDWithReadLock is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockBookingSlotTimeRepository_Expecter) FindByIDWithReadLock(ctx interface{}, id interface{}) *MockBookingSlotTimeRepository_FindByIDWithReadLock_Call {
	return &MockBookingSlotTimeRepository_FindByIDWithReadLock_Call{Call: _e.mock.On("FindByIDWithReadLock", ctx, id)}
}

func (_c *MockBookingSlotTimeRepository_FindByIDWithReadLock_Call) Run(run func(ctx context.Context, id string)) *MockBookingSlotTimeRepository_FindByIDWithReadLock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockBookingSlotTimeRepository_FindByIDWithReadLock_Call) Return(_a0 entity.BookingSlotTime, _a1 error) *MockBookingSlotTimeRepository_FindByIDWithReadLock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBookingSlotTimeRepository_FindByIDWithReadLock_Call) RunAndReturn(run func(context.Context, string) (entity.BookingSlotTime, error)) *MockBookingSlotTimeRepository_FindByIDWithReadLock_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, bookingSlotTime
func (_m *MockBookingSlotTimeRepository) Update(ctx context.Context, bookingSlotTime entity.BookingSlotTime) error {
	ret := _m.Called(ctx, bookingSlotTime)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.BookingSlotTime) error); ok {
		r0 = rf(ctx, bookingSlotTime)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBookingSlotTimeRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockBookingSlotTimeRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - bookingSlotTime entity.BookingSlotTime
func (_e *MockBookingSlotTimeRepository_Expecter) Update(ctx interface{}, bookingSlotTime interface{}) *MockBookingSlotTimeRepository_Update_Call {
	return &MockBookingSlotTimeRepository_Update_Call{Call: _e.mock.On("Update", ctx, bookingSlotTime)}
}

func (_c *MockBookingSlotTimeRepository_Update_Call) Run(run func(ctx context.Context, bookingSlotTime entity.BookingSlotTime)) *MockBookingSlotTimeRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.BookingSlotTime))
	})
	return _c
}

func (_c *MockBookingSlotTimeRepository_Update_Call) Return(_a0 error) *MockBookingSlotTimeRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBookingSlotTimeRepository_Update_Call) RunAndReturn(run func(context.Context, entity.BookingSlotTime) error) *MockBookingSlotTimeRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateByIDWithSelectedFields provides a mock function with given fields: ctx, id, fields, m
func (_m *MockBookingSlotTimeRepository) UpdateByIDWithSelectedFields(ctx context.Context, id string, fields []string, m map[string]any) error {
	ret := _m.Called(ctx, id, fields, m)

	if len(ret) == 0 {
		panic("no return value specified for UpdateByIDWithSelectedFields")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, map[string]any) error); ok {
		r0 = rf(ctx, id, fields, m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBookingSlotTimeRepository_UpdateByIDWithSelectedFields_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateByIDWithSelectedFields'
type MockBookingSlotTimeRepository_UpdateByIDWithSelectedFields_Call struct {
	*mock.Call
}

// UpdateByIDWithSelectedFields is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - fields []string
//   - m map[string]any
func (_e *MockBookingSlotTimeRepository_Expecter) UpdateByIDWithSelectedFields(ctx interface{}, id interface{}, fields interface{}, m interface{}) *MockBookingSlotTimeRepository_UpdateByIDWithSelectedFields_Call {
	return &MockBookingSlotTimeRepository_UpdateByIDWithSelectedFields_Call{Call: _e.mock.On("UpdateByIDWithSelectedFields", ctx, id, fields, m)}
}

func (_c *MockBookingSlotTimeRepository_UpdateByIDWithSelectedFields_Call) Run(run func(ctx context.Context, id string, fields []string, m map[string]any)) *MockBookingSlotTimeRepository_UpdateByIDWithSelectedFields_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string), args[3].(map[string]any))
	})
	return _c
}

func (_c *MockBookingSlotTimeRepository_UpdateByIDWithSelectedFields_Call) Return(_a0 error) *MockBookingSlotTimeRepository_UpdateByIDWithSelectedFields_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBookingSlotTimeRepository_UpdateByIDWithSelectedFields_Call) RunAndReturn(run func(context.Context, string, []string, map[string]any) error) *MockBookingSlotTimeRepository_UpdateByIDWithSelectedFields_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBookingSlotTimeRepository creates a new instance of MockBookingSlotTimeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBookingSlotTimeRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBookingSlotTimeRepository {
	mock := &MockBookingSlotTimeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
