// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "example.com/art-culture-api/domain/booking/entity"
	mock "github.com/stretchr/testify/mock"

	pkg "example.com/art-culture-api/pkg"

	time "time"
)

// MockBookingSettingRepository is an autogenerated mock type for the BookingSettingRepository type
type MockBookingSettingRepository struct {
	mock.Mock
}

type MockBookingSettingRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBookingSettingRepository) EXPECT() *MockBookingSettingRepository_Expecter {
	return &MockBookingSettingRepository_Expecter{mock: &_m.Mock}
}

// DeleteByID provides a mock function with given fields: ctx, id
func (_m *MockBookingSettingRepository) DeleteByID(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBookingSettingRepository_DeleteByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByID'
type MockBookingSettingRepository_DeleteByID_Call struct {
	*mock.Call
}

// DeleteByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockBookingSettingRepository_Expecter) DeleteByID(ctx interface{}, id interface{}) *MockBookingSettingRepository_DeleteByID_Call {
	return &MockBookingSettingRepository_DeleteByID_Call{Call: _e.mock.On("DeleteByID", ctx, id)}
}

func (_c *MockBookingSettingRepository_DeleteByID_Call) Run(run func(ctx context.Context, id string)) *MockBookingSettingRepository_DeleteByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockBookingSettingRepository_DeleteByID_Call) Return(_a0 error) *MockBookingSettingRepository_DeleteByID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBookingSettingRepository_DeleteByID_Call) RunAndReturn(run func(context.Context, string) error) *MockBookingSettingRepository_DeleteByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindAllByProgramIDsWithBookingSlotDates provides a mock function with given fields: ctx, programIDs
func (_m *MockBookingSettingRepository) FindAllByProgramIDsWithBookingSlotDates(ctx context.Context, programIDs []uint) ([]entity.BookingSetting, error) {
	ret := _m.Called(ctx, programIDs)

	if len(ret) == 0 {
		panic("no return value specified for FindAllByProgramIDsWithBookingSlotDates")
	}

	var r0 []entity.BookingSetting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uint) ([]entity.BookingSetting, error)); ok {
		return rf(ctx, programIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uint) []entity.BookingSetting); ok {
		r0 = rf(ctx, programIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.BookingSetting)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uint) error); ok {
		r1 = rf(ctx, programIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBookingSettingRepository_FindAllByProgramIDsWithBookingSlotDates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllByProgramIDsWithBookingSlotDates'
type MockBookingSettingRepository_FindAllByProgramIDsWithBookingSlotDates_Call struct {
	*mock.Call
}

// FindAllByProgramIDsWithBookingSlotDates is a helper method to define mock.On call
//   - ctx context.Context
//   - programIDs []uint
func (_e *MockBookingSettingRepository_Expecter) FindAllByProgramIDsWithBookingSlotDates(ctx interface{}, programIDs interface{}) *MockBookingSettingRepository_FindAllByProgramIDsWithBookingSlotDates_Call {
	return &MockBookingSettingRepository_FindAllByProgramIDsWithBookingSlotDates_Call{Call: _e.mock.On("FindAllByProgramIDsWithBookingSlotDates", ctx, programIDs)}
}

func (_c *MockBookingSettingRepository_FindAllByProgramIDsWithBookingSlotDates_Call) Run(run func(ctx context.Context, programIDs []uint)) *MockBookingSettingRepository_FindAllByProgramIDsWithBookingSlotDates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]uint))
	})
	return _c
}

func (_c *MockBookingSettingRepository_FindAllByProgramIDsWithBookingSlotDates_Call) Return(_a0 []entity.BookingSetting, _a1 error) *MockBookingSettingRepository_FindAllByProgramIDsWithBookingSlotDates_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBookingSettingRepository_FindAllByProgramIDsWithBookingSlotDates_Call) RunAndReturn(run func(context.Context, []uint) ([]entity.BookingSetting, error)) *MockBookingSettingRepository_FindAllByProgramIDsWithBookingSlotDates_Call {
	_c.Call.Return(run)
	return _c
}

// FindAllWithPagination provides a mock function with given fields: ctx, locale, pagination, filterFields, currentDate
func (_m *MockBookingSettingRepository) FindAllWithPagination(ctx context.Context, locale string, pagination pkg.Pagination, filterFields map[string]any, currentDate time.Time) ([]entity.BookingSettingPagination, *pkg.Pagination, error) {
	ret := _m.Called(ctx, locale, pagination, filterFields, currentDate)

	if len(ret) == 0 {
		panic("no return value specified for FindAllWithPagination")
	}

	var r0 []entity.BookingSettingPagination
	var r1 *pkg.Pagination
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, pkg.Pagination, map[string]any, time.Time) ([]entity.BookingSettingPagination, *pkg.Pagination, error)); ok {
		return rf(ctx, locale, pagination, filterFields, currentDate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, pkg.Pagination, map[string]any, time.Time) []entity.BookingSettingPagination); ok {
		r0 = rf(ctx, locale, pagination, filterFields, currentDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.BookingSettingPagination)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, pkg.Pagination, map[string]any, time.Time) *pkg.Pagination); ok {
		r1 = rf(ctx, locale, pagination, filterFields, currentDate)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*pkg.Pagination)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, pkg.Pagination, map[string]any, time.Time) error); ok {
		r2 = rf(ctx, locale, pagination, filterFields, currentDate)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockBookingSettingRepository_FindAllWithPagination_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllWithPagination'
type MockBookingSettingRepository_FindAllWithPagination_Call struct {
	*mock.Call
}

// FindAllWithPagination is a helper method to define mock.On call
//   - ctx context.Context
//   - locale string
//   - pagination pkg.Pagination
//   - filterFields map[string]any
//   - currentDate time.Time
func (_e *MockBookingSettingRepository_Expecter) FindAllWithPagination(ctx interface{}, locale interface{}, pagination interface{}, filterFields interface{}, currentDate interface{}) *MockBookingSettingRepository_FindAllWithPagination_Call {
	return &MockBookingSettingRepository_FindAllWithPagination_Call{Call: _e.mock.On("FindAllWithPagination", ctx, locale, pagination, filterFields, currentDate)}
}

func (_c *MockBookingSettingRepository_FindAllWithPagination_Call) Run(run func(ctx context.Context, locale string, pagination pkg.Pagination, filterFields map[string]any, currentDate time.Time)) *MockBookingSettingRepository_FindAllWithPagination_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(pkg.Pagination), args[3].(map[string]any), args[4].(time.Time))
	})
	return _c
}

func (_c *MockBookingSettingRepository_FindAllWithPagination_Call) Return(_a0 []entity.BookingSettingPagination, _a1 *pkg.Pagination, _a2 error) *MockBookingSettingRepository_FindAllWithPagination_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockBookingSettingRepository_FindAllWithPagination_Call) RunAndReturn(run func(context.Context, string, pkg.Pagination, map[string]any, time.Time) ([]entity.BookingSettingPagination, *pkg.Pagination, error)) *MockBookingSettingRepository_FindAllWithPagination_Call {
	_c.Call.Return(run)
	return _c
}

// FindByIDWithBookingSlotDatesAndBookingSlotTimes provides a mock function with given fields: ctx, id
func (_m *MockBookingSettingRepository) FindByIDWithBookingSlotDatesAndBookingSlotTimes(ctx context.Context, id string) (entity.BookingSetting, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByIDWithBookingSlotDatesAndBookingSlotTimes")
	}

	var r0 entity.BookingSetting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entity.BookingSetting, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.BookingSetting); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entity.BookingSetting)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBookingSettingRepository_FindByIDWithBookingSlotDatesAndBookingSlotTimes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByIDWithBookingSlotDatesAndBookingSlotTimes'
type MockBookingSettingRepository_FindByIDWithBookingSlotDatesAndBookingSlotTimes_Call struct {
	*mock.Call
}

// FindByIDWithBookingSlotDatesAndBookingSlotTimes is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockBookingSettingRepository_Expecter) FindByIDWithBookingSlotDatesAndBookingSlotTimes(ctx interface{}, id interface{}) *MockBookingSettingRepository_FindByIDWithBookingSlotDatesAndBookingSlotTimes_Call {
	return &MockBookingSettingRepository_FindByIDWithBookingSlotDatesAndBookingSlotTimes_Call{Call: _e.mock.On("FindByIDWithBookingSlotDatesAndBookingSlotTimes", ctx, id)}
}

func (_c *MockBookingSettingRepository_FindByIDWithBookingSlotDatesAndBookingSlotTimes_Call) Run(run func(ctx context.Context, id string)) *MockBookingSettingRepository_FindByIDWithBookingSlotDatesAndBookingSlotTimes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockBookingSettingRepository_FindByIDWithBookingSlotDatesAndBookingSlotTimes_Call) Return(_a0 entity.BookingSetting, _a1 error) *MockBookingSettingRepository_FindByIDWithBookingSlotDatesAndBookingSlotTimes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBookingSettingRepository_FindByIDWithBookingSlotDatesAndBookingSlotTimes_Call) RunAndReturn(run func(context.Context, string) (entity.BookingSetting, error)) *MockBookingSettingRepository_FindByIDWithBookingSlotDatesAndBookingSlotTimes_Call {
	_c.Call.Return(run)
	return _c
}

// FindByProgramID provides a mock function with given fields: ctx, programID
func (_m *MockBookingSettingRepository) FindByProgramID(ctx context.Context, programID uint) (entity.BookingSetting, error) {
	ret := _m.Called(ctx, programID)

	if len(ret) == 0 {
		panic("no return value specified for FindByProgramID")
	}

	var r0 entity.BookingSetting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (entity.BookingSetting, error)); ok {
		return rf(ctx, programID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) entity.BookingSetting); ok {
		r0 = rf(ctx, programID)
	} else {
		r0 = ret.Get(0).(entity.BookingSetting)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, programID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBookingSettingRepository_FindByProgramID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByProgramID'
type MockBookingSettingRepository_FindByProgramID_Call struct {
	*mock.Call
}

// FindByProgramID is a helper method to define mock.On call
//   - ctx context.Context
//   - programID uint
func (_e *MockBookingSettingRepository_Expecter) FindByProgramID(ctx interface{}, programID interface{}) *MockBookingSettingRepository_FindByProgramID_Call {
	return &MockBookingSettingRepository_FindByProgramID_Call{Call: _e.mock.On("FindByProgramID", ctx, programID)}
}

func (_c *MockBookingSettingRepository_FindByProgramID_Call) Run(run func(ctx context.Context, programID uint)) *MockBookingSettingRepository_FindByProgramID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *MockBookingSettingRepository_FindByProgramID_Call) Return(_a0 entity.BookingSetting, _a1 error) *MockBookingSettingRepository_FindByProgramID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBookingSettingRepository_FindByProgramID_Call) RunAndReturn(run func(context.Context, uint) (entity.BookingSetting, error)) *MockBookingSettingRepository_FindByProgramID_Call {
	_c.Call.Return(run)
	return _c
}

// FindByProgramIDWithLocaleAndPreloadFields provides a mock function with given fields: ctx, locale, programID, minDate, preloadFields
func (_m *MockBookingSettingRepository) FindByProgramIDWithLocaleAndPreloadFields(ctx context.Context, locale string, programID uint, minDate *time.Time, preloadFields []string) (entity.BookingSetting, error) {
	ret := _m.Called(ctx, locale, programID, minDate, preloadFields)

	if len(ret) == 0 {
		panic("no return value specified for FindByProgramIDWithLocaleAndPreloadFields")
	}

	var r0 entity.BookingSetting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint, *time.Time, []string) (entity.BookingSetting, error)); ok {
		return rf(ctx, locale, programID, minDate, preloadFields)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, uint, *time.Time, []string) entity.BookingSetting); ok {
		r0 = rf(ctx, locale, programID, minDate, preloadFields)
	} else {
		r0 = ret.Get(0).(entity.BookingSetting)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, uint, *time.Time, []string) error); ok {
		r1 = rf(ctx, locale, programID, minDate, preloadFields)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBookingSettingRepository_FindByProgramIDWithLocaleAndPreloadFields_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByProgramIDWithLocaleAndPreloadFields'
type MockBookingSettingRepository_FindByProgramIDWithLocaleAndPreloadFields_Call struct {
	*mock.Call
}

// FindByProgramIDWithLocaleAndPreloadFields is a helper method to define mock.On call
//   - ctx context.Context
//   - locale string
//   - programID uint
//   - minDate *time.Time
//   - preloadFields []string
func (_e *MockBookingSettingRepository_Expecter) FindByProgramIDWithLocaleAndPreloadFields(ctx interface{}, locale interface{}, programID interface{}, minDate interface{}, preloadFields interface{}) *MockBookingSettingRepository_FindByProgramIDWithLocaleAndPreloadFields_Call {
	return &MockBookingSettingRepository_FindByProgramIDWithLocaleAndPreloadFields_Call{Call: _e.mock.On("FindByProgramIDWithLocaleAndPreloadFields", ctx, locale, programID, minDate, preloadFields)}
}

func (_c *MockBookingSettingRepository_FindByProgramIDWithLocaleAndPreloadFields_Call) Run(run func(ctx context.Context, locale string, programID uint, minDate *time.Time, preloadFields []string)) *MockBookingSettingRepository_FindByProgramIDWithLocaleAndPreloadFields_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uint), args[3].(*time.Time), args[4].([]string))
	})
	return _c
}

func (_c *MockBookingSettingRepository_FindByProgramIDWithLocaleAndPreloadFields_Call) Return(_a0 entity.BookingSetting, _a1 error) *MockBookingSettingRepository_FindByProgramIDWithLocaleAndPreloadFields_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBookingSettingRepository_FindByProgramIDWithLocaleAndPreloadFields_Call) RunAndReturn(run func(context.Context, string, uint, *time.Time, []string) (entity.BookingSetting, error)) *MockBookingSettingRepository_FindByProgramIDWithLocaleAndPreloadFields_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function with given fields: ctx, bookingSetting
func (_m *MockBookingSettingRepository) Insert(ctx context.Context, bookingSetting entity.BookingSetting) (entity.BookingSetting, error) {
	ret := _m.Called(ctx, bookingSetting)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 entity.BookingSetting
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.BookingSetting) (entity.BookingSetting, error)); ok {
		return rf(ctx, bookingSetting)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.BookingSetting) entity.BookingSetting); ok {
		r0 = rf(ctx, bookingSetting)
	} else {
		r0 = ret.Get(0).(entity.BookingSetting)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.BookingSetting) error); ok {
		r1 = rf(ctx, bookingSetting)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBookingSettingRepository_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type MockBookingSettingRepository_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - ctx context.Context
//   - bookingSetting entity.BookingSetting
func (_e *MockBookingSettingRepository_Expecter) Insert(ctx interface{}, bookingSetting interface{}) *MockBookingSettingRepository_Insert_Call {
	return &MockBookingSettingRepository_Insert_Call{Call: _e.mock.On("Insert", ctx, bookingSetting)}
}

func (_c *MockBookingSettingRepository_Insert_Call) Run(run func(ctx context.Context, bookingSetting entity.BookingSetting)) *MockBookingSettingRepository_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.BookingSetting))
	})
	return _c
}

func (_c *MockBookingSettingRepository_Insert_Call) Return(_a0 entity.BookingSetting, _a1 error) *MockBookingSettingRepository_Insert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBookingSettingRepository_Insert_Call) RunAndReturn(run func(context.Context, entity.BookingSetting) (entity.BookingSetting, error)) *MockBookingSettingRepository_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateByIDWithSelectedFields provides a mock function with given fields: ctx, id, fields, m
func (_m *MockBookingSettingRepository) UpdateByIDWithSelectedFields(ctx context.Context, id string, fields []string, m map[string]any) error {
	ret := _m.Called(ctx, id, fields, m)

	if len(ret) == 0 {
		panic("no return value specified for UpdateByIDWithSelectedFields")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string, map[string]any) error); ok {
		r0 = rf(ctx, id, fields, m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBookingSettingRepository_UpdateByIDWithSelectedFields_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateByIDWithSelectedFields'
type MockBookingSettingRepository_UpdateByIDWithSelectedFields_Call struct {
	*mock.Call
}

// UpdateByIDWithSelectedFields is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - fields []string
//   - m map[string]any
func (_e *MockBookingSettingRepository_Expecter) UpdateByIDWithSelectedFields(ctx interface{}, id interface{}, fields interface{}, m interface{}) *MockBookingSettingRepository_UpdateByIDWithSelectedFields_Call {
	return &MockBookingSettingRepository_UpdateByIDWithSelectedFields_Call{Call: _e.mock.On("UpdateByIDWithSelectedFields", ctx, id, fields, m)}
}

func (_c *MockBookingSettingRepository_UpdateByIDWithSelectedFields_Call) Run(run func(ctx context.Context, id string, fields []string, m map[string]any)) *MockBookingSettingRepository_UpdateByIDWithSelectedFields_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string), args[3].(map[string]any))
	})
	return _c
}

func (_c *MockBookingSettingRepository_UpdateByIDWithSelectedFields_Call) Return(_a0 error) *MockBookingSettingRepository_UpdateByIDWithSelectedFields_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBookingSettingRepository_UpdateByIDWithSelectedFields_Call) RunAndReturn(run func(context.Context, string, []string, map[string]any) error) *MockBookingSettingRepository_UpdateByIDWithSelectedFields_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBookingSettingRepository creates a new instance of MockBookingSettingRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBookingSettingRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBookingSettingRepository {
	mock := &MockBookingSettingRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
