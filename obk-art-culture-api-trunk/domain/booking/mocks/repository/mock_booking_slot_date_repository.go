// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "example.com/art-culture-api/domain/booking/entity"
	mock "github.com/stretchr/testify/mock"

	pkg "example.com/art-culture-api/pkg"

	time "time"
)

// MockBookingSlotDateRepository is an autogenerated mock type for the BookingSlotDateRepository type
type MockBookingSlotDateRepository struct {
	mock.Mock
}

type MockBookingSlotDateRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBookingSlotDateRepository) EXPECT() *MockBookingSlotDateRepository_Expecter {
	return &MockBookingSlotDateRepository_Expecter{mock: &_m.Mock}
}

// BulkDelete provides a mock function with given fields: ctx, bookingSlotDates
func (_m *MockBookingSlotDateRepository) BulkDelete(ctx context.Context, bookingSlotDates []entity.BookingSlotDate) ([]entity.BookingSlotDate, error) {
	ret := _m.Called(ctx, bookingSlotDates)

	if len(ret) == 0 {
		panic("no return value specified for BulkDelete")
	}

	var r0 []entity.BookingSlotDate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []entity.BookingSlotDate) ([]entity.BookingSlotDate, error)); ok {
		return rf(ctx, bookingSlotDates)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []entity.BookingSlotDate) []entity.BookingSlotDate); ok {
		r0 = rf(ctx, bookingSlotDates)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.BookingSlotDate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []entity.BookingSlotDate) error); ok {
		r1 = rf(ctx, bookingSlotDates)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBookingSlotDateRepository_BulkDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkDelete'
type MockBookingSlotDateRepository_BulkDelete_Call struct {
	*mock.Call
}

// BulkDelete is a helper method to define mock.On call
//   - ctx context.Context
//   - bookingSlotDates []entity.BookingSlotDate
func (_e *MockBookingSlotDateRepository_Expecter) BulkDelete(ctx interface{}, bookingSlotDates interface{}) *MockBookingSlotDateRepository_BulkDelete_Call {
	return &MockBookingSlotDateRepository_BulkDelete_Call{Call: _e.mock.On("BulkDelete", ctx, bookingSlotDates)}
}

func (_c *MockBookingSlotDateRepository_BulkDelete_Call) Run(run func(ctx context.Context, bookingSlotDates []entity.BookingSlotDate)) *MockBookingSlotDateRepository_BulkDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]entity.BookingSlotDate))
	})
	return _c
}

func (_c *MockBookingSlotDateRepository_BulkDelete_Call) Return(_a0 []entity.BookingSlotDate, _a1 error) *MockBookingSlotDateRepository_BulkDelete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBookingSlotDateRepository_BulkDelete_Call) RunAndReturn(run func(context.Context, []entity.BookingSlotDate) ([]entity.BookingSlotDate, error)) *MockBookingSlotDateRepository_BulkDelete_Call {
	_c.Call.Return(run)
	return _c
}

// BulkUpsert provides a mock function with given fields: ctx, bookingSlotDates
func (_m *MockBookingSlotDateRepository) BulkUpsert(ctx context.Context, bookingSlotDates []entity.BookingSlotDate) ([]entity.BookingSlotDate, error) {
	ret := _m.Called(ctx, bookingSlotDates)

	if len(ret) == 0 {
		panic("no return value specified for BulkUpsert")
	}

	var r0 []entity.BookingSlotDate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []entity.BookingSlotDate) ([]entity.BookingSlotDate, error)); ok {
		return rf(ctx, bookingSlotDates)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []entity.BookingSlotDate) []entity.BookingSlotDate); ok {
		r0 = rf(ctx, bookingSlotDates)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.BookingSlotDate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []entity.BookingSlotDate) error); ok {
		r1 = rf(ctx, bookingSlotDates)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBookingSlotDateRepository_BulkUpsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkUpsert'
type MockBookingSlotDateRepository_BulkUpsert_Call struct {
	*mock.Call
}

// BulkUpsert is a helper method to define mock.On call
//   - ctx context.Context
//   - bookingSlotDates []entity.BookingSlotDate
func (_e *MockBookingSlotDateRepository_Expecter) BulkUpsert(ctx interface{}, bookingSlotDates interface{}) *MockBookingSlotDateRepository_BulkUpsert_Call {
	return &MockBookingSlotDateRepository_BulkUpsert_Call{Call: _e.mock.On("BulkUpsert", ctx, bookingSlotDates)}
}

func (_c *MockBookingSlotDateRepository_BulkUpsert_Call) Run(run func(ctx context.Context, bookingSlotDates []entity.BookingSlotDate)) *MockBookingSlotDateRepository_BulkUpsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]entity.BookingSlotDate))
	})
	return _c
}

func (_c *MockBookingSlotDateRepository_BulkUpsert_Call) Return(_a0 []entity.BookingSlotDate, _a1 error) *MockBookingSlotDateRepository_BulkUpsert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBookingSlotDateRepository_BulkUpsert_Call) RunAndReturn(run func(context.Context, []entity.BookingSlotDate) ([]entity.BookingSlotDate, error)) *MockBookingSlotDateRepository_BulkUpsert_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAllByBookingSettingID provides a mock function with given fields: ctx, bookingSettingID
func (_m *MockBookingSlotDateRepository) DeleteAllByBookingSettingID(ctx context.Context, bookingSettingID string) error {
	ret := _m.Called(ctx, bookingSettingID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAllByBookingSettingID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, bookingSettingID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBookingSlotDateRepository_DeleteAllByBookingSettingID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAllByBookingSettingID'
type MockBookingSlotDateRepository_DeleteAllByBookingSettingID_Call struct {
	*mock.Call
}

// DeleteAllByBookingSettingID is a helper method to define mock.On call
//   - ctx context.Context
//   - bookingSettingID string
func (_e *MockBookingSlotDateRepository_Expecter) DeleteAllByBookingSettingID(ctx interface{}, bookingSettingID interface{}) *MockBookingSlotDateRepository_DeleteAllByBookingSettingID_Call {
	return &MockBookingSlotDateRepository_DeleteAllByBookingSettingID_Call{Call: _e.mock.On("DeleteAllByBookingSettingID", ctx, bookingSettingID)}
}

func (_c *MockBookingSlotDateRepository_DeleteAllByBookingSettingID_Call) Run(run func(ctx context.Context, bookingSettingID string)) *MockBookingSlotDateRepository_DeleteAllByBookingSettingID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockBookingSlotDateRepository_DeleteAllByBookingSettingID_Call) Return(_a0 error) *MockBookingSlotDateRepository_DeleteAllByBookingSettingID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBookingSlotDateRepository_DeleteAllByBookingSettingID_Call) RunAndReturn(run func(context.Context, string) error) *MockBookingSlotDateRepository_DeleteAllByBookingSettingID_Call {
	_c.Call.Return(run)
	return _c
}

// FindAllByBookingSettingIDWithBookingSlotTimes provides a mock function with given fields: ctx, bookingSettingID
func (_m *MockBookingSlotDateRepository) FindAllByBookingSettingIDWithBookingSlotTimes(ctx context.Context, bookingSettingID string) ([]entity.BookingSlotDate, error) {
	ret := _m.Called(ctx, bookingSettingID)

	if len(ret) == 0 {
		panic("no return value specified for FindAllByBookingSettingIDWithBookingSlotTimes")
	}

	var r0 []entity.BookingSlotDate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]entity.BookingSlotDate, error)); ok {
		return rf(ctx, bookingSettingID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []entity.BookingSlotDate); ok {
		r0 = rf(ctx, bookingSettingID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.BookingSlotDate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, bookingSettingID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBookingSlotDateRepository_FindAllByBookingSettingIDWithBookingSlotTimes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllByBookingSettingIDWithBookingSlotTimes'
type MockBookingSlotDateRepository_FindAllByBookingSettingIDWithBookingSlotTimes_Call struct {
	*mock.Call
}

// FindAllByBookingSettingIDWithBookingSlotTimes is a helper method to define mock.On call
//   - ctx context.Context
//   - bookingSettingID string
func (_e *MockBookingSlotDateRepository_Expecter) FindAllByBookingSettingIDWithBookingSlotTimes(ctx interface{}, bookingSettingID interface{}) *MockBookingSlotDateRepository_FindAllByBookingSettingIDWithBookingSlotTimes_Call {
	return &MockBookingSlotDateRepository_FindAllByBookingSettingIDWithBookingSlotTimes_Call{Call: _e.mock.On("FindAllByBookingSettingIDWithBookingSlotTimes", ctx, bookingSettingID)}
}

func (_c *MockBookingSlotDateRepository_FindAllByBookingSettingIDWithBookingSlotTimes_Call) Run(run func(ctx context.Context, bookingSettingID string)) *MockBookingSlotDateRepository_FindAllByBookingSettingIDWithBookingSlotTimes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockBookingSlotDateRepository_FindAllByBookingSettingIDWithBookingSlotTimes_Call) Return(_a0 []entity.BookingSlotDate, _a1 error) *MockBookingSlotDateRepository_FindAllByBookingSettingIDWithBookingSlotTimes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBookingSlotDateRepository_FindAllByBookingSettingIDWithBookingSlotTimes_Call) RunAndReturn(run func(context.Context, string) ([]entity.BookingSlotDate, error)) *MockBookingSlotDateRepository_FindAllByBookingSettingIDWithBookingSlotTimes_Call {
	_c.Call.Return(run)
	return _c
}

// FindAllWithPagination provides a mock function with given fields: ctx, pagination, filterFields, currentDate
func (_m *MockBookingSlotDateRepository) FindAllWithPagination(ctx context.Context, pagination pkg.Pagination, filterFields map[string]any, currentDate time.Time) ([]entity.BookingSlotDate, *pkg.Pagination, error) {
	ret := _m.Called(ctx, pagination, filterFields, currentDate)

	if len(ret) == 0 {
		panic("no return value specified for FindAllWithPagination")
	}

	var r0 []entity.BookingSlotDate
	var r1 *pkg.Pagination
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, pkg.Pagination, map[string]any, time.Time) ([]entity.BookingSlotDate, *pkg.Pagination, error)); ok {
		return rf(ctx, pagination, filterFields, currentDate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pkg.Pagination, map[string]any, time.Time) []entity.BookingSlotDate); ok {
		r0 = rf(ctx, pagination, filterFields, currentDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.BookingSlotDate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, pkg.Pagination, map[string]any, time.Time) *pkg.Pagination); ok {
		r1 = rf(ctx, pagination, filterFields, currentDate)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*pkg.Pagination)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, pkg.Pagination, map[string]any, time.Time) error); ok {
		r2 = rf(ctx, pagination, filterFields, currentDate)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockBookingSlotDateRepository_FindAllWithPagination_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllWithPagination'
type MockBookingSlotDateRepository_FindAllWithPagination_Call struct {
	*mock.Call
}

// FindAllWithPagination is a helper method to define mock.On call
//   - ctx context.Context
//   - pagination pkg.Pagination
//   - filterFields map[string]any
//   - currentDate time.Time
func (_e *MockBookingSlotDateRepository_Expecter) FindAllWithPagination(ctx interface{}, pagination interface{}, filterFields interface{}, currentDate interface{}) *MockBookingSlotDateRepository_FindAllWithPagination_Call {
	return &MockBookingSlotDateRepository_FindAllWithPagination_Call{Call: _e.mock.On("FindAllWithPagination", ctx, pagination, filterFields, currentDate)}
}

func (_c *MockBookingSlotDateRepository_FindAllWithPagination_Call) Run(run func(ctx context.Context, pagination pkg.Pagination, filterFields map[string]any, currentDate time.Time)) *MockBookingSlotDateRepository_FindAllWithPagination_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pkg.Pagination), args[2].(map[string]any), args[3].(time.Time))
	})
	return _c
}

func (_c *MockBookingSlotDateRepository_FindAllWithPagination_Call) Return(_a0 []entity.BookingSlotDate, _a1 *pkg.Pagination, _a2 error) *MockBookingSlotDateRepository_FindAllWithPagination_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockBookingSlotDateRepository_FindAllWithPagination_Call) RunAndReturn(run func(context.Context, pkg.Pagination, map[string]any, time.Time) ([]entity.BookingSlotDate, *pkg.Pagination, error)) *MockBookingSlotDateRepository_FindAllWithPagination_Call {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *MockBookingSlotDateRepository) FindByID(ctx context.Context, id string) (entity.BookingSlotDate, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 entity.BookingSlotDate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entity.BookingSlotDate, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.BookingSlotDate); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entity.BookingSlotDate)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBookingSlotDateRepository_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type MockBookingSlotDateRepository_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockBookingSlotDateRepository_Expecter) FindByID(ctx interface{}, id interface{}) *MockBookingSlotDateRepository_FindByID_Call {
	return &MockBookingSlotDateRepository_FindByID_Call{Call: _e.mock.On("FindByID", ctx, id)}
}

func (_c *MockBookingSlotDateRepository_FindByID_Call) Run(run func(ctx context.Context, id string)) *MockBookingSlotDateRepository_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockBookingSlotDateRepository_FindByID_Call) Return(_a0 entity.BookingSlotDate, _a1 error) *MockBookingSlotDateRepository_FindByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBookingSlotDateRepository_FindByID_Call) RunAndReturn(run func(context.Context, string) (entity.BookingSlotDate, error)) *MockBookingSlotDateRepository_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindByIDWithBookingSlotTimes provides a mock function with given fields: ctx, id
func (_m *MockBookingSlotDateRepository) FindByIDWithBookingSlotTimes(ctx context.Context, id string) (entity.BookingSlotDate, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByIDWithBookingSlotTimes")
	}

	var r0 entity.BookingSlotDate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entity.BookingSlotDate, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.BookingSlotDate); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entity.BookingSlotDate)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBookingSlotDateRepository_FindByIDWithBookingSlotTimes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByIDWithBookingSlotTimes'
type MockBookingSlotDateRepository_FindByIDWithBookingSlotTimes_Call struct {
	*mock.Call
}

// FindByIDWithBookingSlotTimes is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockBookingSlotDateRepository_Expecter) FindByIDWithBookingSlotTimes(ctx interface{}, id interface{}) *MockBookingSlotDateRepository_FindByIDWithBookingSlotTimes_Call {
	return &MockBookingSlotDateRepository_FindByIDWithBookingSlotTimes_Call{Call: _e.mock.On("FindByIDWithBookingSlotTimes", ctx, id)}
}

func (_c *MockBookingSlotDateRepository_FindByIDWithBookingSlotTimes_Call) Run(run func(ctx context.Context, id string)) *MockBookingSlotDateRepository_FindByIDWithBookingSlotTimes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockBookingSlotDateRepository_FindByIDWithBookingSlotTimes_Call) Return(_a0 entity.BookingSlotDate, _a1 error) *MockBookingSlotDateRepository_FindByIDWithBookingSlotTimes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBookingSlotDateRepository_FindByIDWithBookingSlotTimes_Call) RunAndReturn(run func(context.Context, string) (entity.BookingSlotDate, error)) *MockBookingSlotDateRepository_FindByIDWithBookingSlotTimes_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBookingSlotDateRepository creates a new instance of MockBookingSlotDateRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBookingSlotDateRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBookingSlotDateRepository {
	mock := &MockBookingSlotDateRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
