// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	session "example.com/art-culture-api/domain/booking/session"
	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// MockSession is an autogenerated mock type for the Session type
type MockSession struct {
	mock.Mock
}

type MockSession_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSession) EXPECT() *MockSession_Expecter {
	return &MockSession_Expecter{mock: &_m.Mock}
}

// Transact provides a mock function with given fields: ctx, f, opts
func (_m *MockSession) Transact(ctx context.Context, f session.TransactFunc, opts ...*sql.TxOptions) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, f)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Transact")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, session.TransactFunc, ...*sql.TxOptions) error); ok {
		r0 = rf(ctx, f, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSession_Transact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transact'
type MockSession_Transact_Call struct {
	*mock.Call
}

// Transact is a helper method to define mock.On call
//   - ctx context.Context
//   - f session.TransactFunc
//   - opts ...*sql.TxOptions
func (_e *MockSession_Expecter) Transact(ctx interface{}, f interface{}, opts ...interface{}) *MockSession_Transact_Call {
	return &MockSession_Transact_Call{Call: _e.mock.On("Transact",
		append([]interface{}{ctx, f}, opts...)...)}
}

func (_c *MockSession_Transact_Call) Run(run func(ctx context.Context, f session.TransactFunc, opts ...*sql.TxOptions)) *MockSession_Transact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*sql.TxOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*sql.TxOptions)
			}
		}
		run(args[0].(context.Context), args[1].(session.TransactFunc), variadicArgs...)
	})
	return _c
}

func (_c *MockSession_Transact_Call) Return(_a0 error) *MockSession_Transact_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSession_Transact_Call) RunAndReturn(run func(context.Context, session.TransactFunc, ...*sql.TxOptions) error) *MockSession_Transact_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSession creates a new instance of MockSession. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSession(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSession {
	mock := &MockSession{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
