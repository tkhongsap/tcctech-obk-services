# Stage 1: Build Stage
FROM node:20.8.1-alpine3.17 AS builder

# Set the working directory
WORKDIR /usr/src/app

# Accept the NODE_ENV build argument and default it to dev
ARG NODE_ENV=dev
ENV NODE_ENV=${NODE_ENV}

# Only copy the package.json and yarn.lock to optimize Docker caching
COPY package.json yarn.lock ./

# Install dependencies, including dev dependencies
RUN yarn install --frozen-lockfile

# Add TypeScript
RUN yarn add typescript

# Copy the local code to the container
COPY . .

# Compile TypeScript to JavaScript
RUN npx prisma generate
RUN yarn build

# Stage 2: Production Stage
FROM node:20.8.1-alpine3.17 AS production

# Set the working directory
WORKDIR /usr/src/app

# Accept the NODE_ENV argument and set it to production
ARG NODE_ENV=production
ENV NODE_ENV=${NODE_ENV}

# Install only production dependencies
COPY package.json yarn.lock ./
RUN yarn install --frozen-lockfile --production

# Install PM2 globally for production
RUN yarn global add pm2

# Copy only the necessary files from the build stage
COPY --from=builder /usr/src/app/dist ./dist
COPY --from=builder /usr/src/app/db ./dist/db

# Copy the environment-specific config file directly into /usr/src/app/
ARG CONFIG_FILE=event.config.${NODE_ENV}.json
COPY ${CONFIG_FILE} /usr/src/app/event.config.${NODE_ENV}.json

# Expose the application port
EXPOSE 3000

# Run the application using PM2 in cluster mode
CMD ["pm2-runtime", "start", "dist/src/server.js", "-i", "1"]
